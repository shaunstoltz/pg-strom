{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This chapter introduces the overview of PG-Strom, and developer's community. What is PG-Strom? PG-Strom is an extension module of PostgreSQL designed for version 11 or later. By utilization of GPU (Graphic Processor Unit) device which has thousands cores per chip, it enables to accelerate SQL workloads for data analytics or batch processing to big data set. Its core features are GPU code generator that automatically generates GPU program according to the SQL commands and asynchronous parallel execution engine to run SQL workloads on GPU device. The latest version supports SCAN (evaluation of WHERE-clause), JOIN and GROUP BY workloads. In the case when GPU-processing has advantage, PG-Strom replaces the vanilla implementation of PostgreSQL and transparentlly works from users and applications. PG-Strom has two storage options. The first one is the heap storage system of PostgreSQL. It is not always optimal for aggregation / analysis workloads because of its row data format, on the other hands, it has an advantage to run aggregation workloads without data transfer from the transactional database. The other one is Apache Arrow files, that have structured columnar format. Even though it is not suitable for update per row basis, it enables to import large amount of data efficiently, and efficiently search / aggregate the data through foreign data wrapper (FDW). One of the characteristic feature of PG-Strom is GPUDirect SQL that bypasses the CPU/RAM to read the data from NVME / NVME-oF to the GPU directly. SQL processing on the GPU maximizes the bandwidth of these devices. PG-Strom v3.0 newly supports NVIDIA GPUDirect Storage, it allows to support SDS (Software Defined Storage) over the NVME-oF protocol and shared filesystems. Also, the v3.0 newly supports execution of some PostGIS function and GiST index search on the GPU side. Along with the GPU cache, that duplicates the table contents often updated very frequently, it enables search / analysis processing based on the real-time locational information. License and Copyright PG-Strom is an open source software distributed under the PostgreSQL License. See LICENSE for the license details. Community Please post your questions, requests and trouble reports to the Discussion of GitHub\u306e . Please pay attention it is a public board for world wide. So, it is your own responsibility not to disclose confidential information. The primary language of the discussion board is English. On the other hands, we know major portion of PG-Strom users are Japanese because of its development history, so we admit to have a discussion on the list in Japanese language. In this case, please don't forget to attach (JP) prefix on the subject like, for non-Japanese speakers to skip messages. Bug or troubles report If you got troubles like incorrect results, system crash / lockup, or something strange behavior, please open a new issue with bug tag at the PG-Strom Issue Tracker . Please ensure the items below on bug reports. Whether you can reproduce the same problem on the latest revision? Hopefully, we recommend to test on the latest OS, CUDA, PostgreSQL and related software. Whether you can reproduce the same problem if PG-Strom is disabled? GUC option pg_strom.enabled can turn on/off PG-Strom. Is there any known issues on the issue tracker of GitHub? Please don't forget to search closed issues The information below are helpful for bug-reports. Output of EXPLAIN VERBOSE for the queries in trouble. Data structure of the tables involved with \\d+ <table name> on psql command. Log messages (verbose messages are more helpful) Status of GUC options you modified from the default configurations. Hardware configuration - GPU model and host RAM size especially. If you are not certain whether the strange behavior on your site is bug or not, please report it to the discussion board prior to the open a new issue ticket. Developers may be able to suggest you next action - like a request for extra information. New features proposition If you have any ideas of new features, please open a new issue with feature tag at the PG-Strom Issue Tracker , then have a discussion with other developers. A preferable design proposal will contain the items below. What is your problem to solve / improve? How much serious is it on your workloads / user case? Way to implement your idea? Expected downside, if any. Once we could make a consensus about its necessity, coordinator will attach accepted tag and the issue ticket is used to track rest of the development. Elsewhere, the issue ticket got rejected tag and closed. Once a proposal got rejected, we may have different decision in the future. If comprehensive circumstance would be changed, you don't need to hesitate revised proposition again. On the development stage, please attach patch file on the issue ticket. We don't use pull request. Support Policy The PG-Strom development team will support the latest release which are distributed from the HeteroDB Software Distribution Center only. So, people who met troubles needs to ensure the problems can be reproduced with the latest release. Please note that it is volunteer based community support policy, so our support is best effort and no SLA definition. If you need commercial support, contact to HeteroDB,Inc (contact@heterodbcom).","title":"Home"},{"location":"#home","text":"This chapter introduces the overview of PG-Strom, and developer's community.","title":"Home"},{"location":"#what-is-pg-strom","text":"PG-Strom is an extension module of PostgreSQL designed for version 11 or later. By utilization of GPU (Graphic Processor Unit) device which has thousands cores per chip, it enables to accelerate SQL workloads for data analytics or batch processing to big data set. Its core features are GPU code generator that automatically generates GPU program according to the SQL commands and asynchronous parallel execution engine to run SQL workloads on GPU device. The latest version supports SCAN (evaluation of WHERE-clause), JOIN and GROUP BY workloads. In the case when GPU-processing has advantage, PG-Strom replaces the vanilla implementation of PostgreSQL and transparentlly works from users and applications. PG-Strom has two storage options. The first one is the heap storage system of PostgreSQL. It is not always optimal for aggregation / analysis workloads because of its row data format, on the other hands, it has an advantage to run aggregation workloads without data transfer from the transactional database. The other one is Apache Arrow files, that have structured columnar format. Even though it is not suitable for update per row basis, it enables to import large amount of data efficiently, and efficiently search / aggregate the data through foreign data wrapper (FDW). One of the characteristic feature of PG-Strom is GPUDirect SQL that bypasses the CPU/RAM to read the data from NVME / NVME-oF to the GPU directly. SQL processing on the GPU maximizes the bandwidth of these devices. PG-Strom v3.0 newly supports NVIDIA GPUDirect Storage, it allows to support SDS (Software Defined Storage) over the NVME-oF protocol and shared filesystems. Also, the v3.0 newly supports execution of some PostGIS function and GiST index search on the GPU side. Along with the GPU cache, that duplicates the table contents often updated very frequently, it enables search / analysis processing based on the real-time locational information.","title":"What is PG-Strom?"},{"location":"#license-and-copyright","text":"PG-Strom is an open source software distributed under the PostgreSQL License. See LICENSE for the license details.","title":"License and Copyright"},{"location":"#community","text":"Please post your questions, requests and trouble reports to the Discussion of GitHub\u306e . Please pay attention it is a public board for world wide. So, it is your own responsibility not to disclose confidential information. The primary language of the discussion board is English. On the other hands, we know major portion of PG-Strom users are Japanese because of its development history, so we admit to have a discussion on the list in Japanese language. In this case, please don't forget to attach (JP) prefix on the subject like, for non-Japanese speakers to skip messages.","title":"Community"},{"location":"#bug-or-troubles-report","text":"If you got troubles like incorrect results, system crash / lockup, or something strange behavior, please open a new issue with bug tag at the PG-Strom Issue Tracker . Please ensure the items below on bug reports. Whether you can reproduce the same problem on the latest revision? Hopefully, we recommend to test on the latest OS, CUDA, PostgreSQL and related software. Whether you can reproduce the same problem if PG-Strom is disabled? GUC option pg_strom.enabled can turn on/off PG-Strom. Is there any known issues on the issue tracker of GitHub? Please don't forget to search closed issues The information below are helpful for bug-reports. Output of EXPLAIN VERBOSE for the queries in trouble. Data structure of the tables involved with \\d+ <table name> on psql command. Log messages (verbose messages are more helpful) Status of GUC options you modified from the default configurations. Hardware configuration - GPU model and host RAM size especially. If you are not certain whether the strange behavior on your site is bug or not, please report it to the discussion board prior to the open a new issue ticket. Developers may be able to suggest you next action - like a request for extra information.","title":"Bug or troubles report"},{"location":"#new-features-proposition","text":"If you have any ideas of new features, please open a new issue with feature tag at the PG-Strom Issue Tracker , then have a discussion with other developers. A preferable design proposal will contain the items below. What is your problem to solve / improve? How much serious is it on your workloads / user case? Way to implement your idea? Expected downside, if any. Once we could make a consensus about its necessity, coordinator will attach accepted tag and the issue ticket is used to track rest of the development. Elsewhere, the issue ticket got rejected tag and closed. Once a proposal got rejected, we may have different decision in the future. If comprehensive circumstance would be changed, you don't need to hesitate revised proposition again. On the development stage, please attach patch file on the issue ticket. We don't use pull request.","title":"New features proposition"},{"location":"#support-policy","text":"The PG-Strom development team will support the latest release which are distributed from the HeteroDB Software Distribution Center only. So, people who met troubles needs to ensure the problems can be reproduced with the latest release. Please note that it is volunteer based community support policy, so our support is best effort and no SLA definition. If you need commercial support, contact to HeteroDB,Inc (contact@heterodbcom).","title":"Support Policy"},{"location":"arrow_fdw/","text":"Apache Arrow (Columnar Store) Overview PostgreSQL tables internally consist of 8KB blocks 1 , and block contains tuples which is a data structure of all the attributes and metadata per row. It collocates date of a row closely, so it works effectively for INSERT/UPDATE-major workloads, but not suitable for summarizing or analytics of mass-data. It is not usual to reference all the columns in a table on mass-data processing, and we tend to reference a part of columns in most cases. In this case, the storage I/O bandwidth consumed by unreferenced columns are waste, however, we have no easy way to fetch only particular columns referenced from the row-oriented data structure. In case of column oriented data structure, in an opposite manner, it has extreme disadvantage on INSERT/UPDATE-major workloads, however, it can pull out maximum performance of storage I/O on mass-data processing workloads because it can loads only referenced columns. From the standpoint of processor efficiency also, column-oriented data structure looks like a flat array that pulls out maximum bandwidth of memory subsystem for GPU, by special memory access pattern called Coalesced Memory Access. What is Apache Arrow? Apache Arrow is a data format of structured data to save in columnar-form and to exchange other applications. Some applications for big-data processing support the format, and it is easy for self-developed applications to use Apache Arrow format since they provides libraries for major programming languages like C,C++ or Python. Apache Arrow format file internally contains Schema portion to define data structure, and one or more RecordBatch to save columnar-data based on the schema definition. For data types, it supports integers, strint (variable-length), date/time types and so on. Indivisual columnar data has its internal representation according to the data types. Data representation in Apache Arrow is not identical with the representation in PostgreSQL. For example, epoch of timestamp in Arrow is 1970-01-01 and it supports multiple precision. In contrast, epoch of timestamp in PostgreSQL is 2001-01-01 and it has microseconds accuracy. Arrow_Fdw allows to read Apache Arrow files on PostgreSQL using foreign table mechanism. If an Arrow file contains 8 of record batches that has million items for each column data, for example, we can access 8 million rows on the Arrow files through the foreign table. Operations Creation of foreign tables Usually it takes the 3 steps below to create a foreign table. Define a foreign-data-wrapper using CREATE FOREIGN DATA WRAPPER command Define a foreign server using CREATE SERVER command Define a foreign table using CREATE FOREIGN TABLE command The first 2 steps above are included in the CREATE EXTENSION pg_strom command. All you need to run individually is CREATE FOREIGN TABLE command last. CREATE FOREIGN TABLE flogdata ( ts timestamp, sensor_id int, signal1 smallint, signal2 smallint, signal3 smallint, signal4 smallint, ) SERVER arrow_fdw OPTIONS (file '/path/to/logdata.arrow'); Data type of columns specified by the CREATE FOREIGN TABLE command must be matched to schema definition of the Arrow files to be mapped. Arrow_Fdw also supports a useful manner using IMPORT FOREIGN SCHEMA statement. It automatically generates a foreign table definition using schema definition of the Arrow files. It specifies the foreign table name, schema name to import, and path name of the Arrow files using OPTION-clause. Schema definition of Arrow files contains data types and optional column name for each column. It declares a new foreign table using these information. IMPORT FOREIGN SCHEMA flogdata FROM SERVER arrow_fdw INTO public OPTIONS (file '/path/to/logdata.arrow'); Foreign table options Arrow_Fdw supports the options below. Right now, all the options are for foreign tables. file=PATHNAME It maps an Arrow file specified on the foreign table. files=PATHNAME1[,PATHNAME2...] It maps multiple Arrow files specified by comma (,) separated files list on the foreign table. dir=DIRNAME It maps all the Arrow files in the directory specified on the foreign table. suffix=SUFFIX When dir option is given, it maps only files with the specified suffix, like .arrow` for example. parallel_workers=N_WORKERS It tells the number of workers that should be used to assist a parallel scan of this foreign table; equivalent to parallel_workers storage parameter at normal tables. writable=(true|false) It allows execution of INSERT command on the foreign table. See the section of \"Writable Arrow_Fdw\" Data type mapping Arrow data types are mapped on PostgreSQL data types as follows. Int mapped to either of int1 , int2 , int4 or int8 according to the bitWidth attribute. is_signed attribute shall be ignored. int1 is an enhanced data type by PG-Strom. FloatingPoint mapped to either of float2 , float4 or float8 according to the precision attribute. float2 is an enhanced data type by PG-Strom. Binary mapped to bytea data type Decimal mapped to numeric data type Date mapped to date data type; to be adjusted as if it has unit=Day precision. Time mapped to time data type; to be adjusted as if it has unit=MicroSecond precision. Timestamp mapped to timestamp data type; to be adjusted as if it has unit=MicroSecond precision. Interval mapped to interval data type. List mapped to 1-dimensional array of the element data type. Struct mapped to compatible composite data type; that shall be defined preliminary. FixedSizeBinary mapped to char(n) data type according to the byteWidth attribute. If pg_type=TYPENAME is configured, PG-Strom may assign the configured data type. Right now, inet and macaddr are supported. Union , Map , Duration , LargeBinary , LargeUtf8 , LargeList Right now, PG-Strom cannot map these Arrow data types onto any of PostgreSQL data types. How to read EXPLAIN EXPLAIN command show us information about Arrow files reading. The example below is an output of query execution plan that includes flineorder foreign table that mapps an Arrow file of 309GB. =# EXPLAIN SELECT sum(lo_extendedprice*lo_discount) as revenue FROM flineorder,date1 WHERE lo_orderdate = d_datekey AND d_year = 1993 AND lo_discount between 1 and 3 AND lo_quantity < 25; QUERY PLAN ----------------------------------------------------------------------------------------------------- Aggregate (cost=12632759.02..12632759.03 rows=1 width=32) -> Custom Scan (GpuPreAgg) (cost=12632754.43..12632757.49 rows=204 width=8) Reduction: NoGroup Combined GpuJoin: enabled GPU Preference: GPU0 (Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on flineorder (cost=9952.15..12638126.98 rows=572635 width=12) Outer Scan: flineorder (cost=9877.70..12649677.69 rows=4010017 width=16) Outer Scan Filter: ((lo_discount >= 1) AND (lo_discount <= 3) AND (lo_quantity < 25)) Depth 1: GpuHashJoin (nrows 4010017...572635) HashKeys: flineorder.lo_orderdate JoinQuals: (flineorder.lo_orderdate = date1.d_datekey) KDS-Hash (size: 66.06KB) GPU Preference: GPU0 (Tesla V100-PCIE-16GB) NVMe-Strom: enabled referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/nvme/lineorder_s401.arrow (size: 309.23GB) -> Seq Scan on date1 (cost=0.00..78.95 rows=365 width=4) Filter: (d_year = 1993) (18 rows) According to the EXPLAIN output, we can see Custom Scan (GpuJoin) scans flineorder foreign table. file0 item shows the filename ( /opt/nvme/lineorder_s401.arrow ) on behalf of the foreign table and its size. If multiple files are mapped, any files are individually shown, like file1 , file2 , ... The referenced item shows the list of referenced columns. We can see this query touches lo_orderdate , lo_quantity , lo_extendedprice and lo_discount columns. In addition, GPU Preference: GPU0 (Tesla V100-PCIE-16GB) and NVMe-Strom: enabled shows us the scan on flineorder uses SSD-to-GPU Direct SQL mechanism. VERBOSE option outputs more detailed information. =# EXPLAIN VERBOSE SELECT sum(lo_extendedprice*lo_discount) as revenue FROM flineorder,date1 WHERE lo_orderdate = d_datekey AND d_year = 1993 AND lo_discount between 1 and 3 AND lo_quantity < 25; QUERY PLAN -------------------------------------------------------------------------------- Aggregate (cost=12632759.02..12632759.03 rows=1 width=32) Output: sum((pgstrom.psum((flineorder.lo_extendedprice * flineorder.lo_discount)))) -> Custom Scan (GpuPreAgg) (cost=12632754.43..12632757.49 rows=204 width=8) Output: (pgstrom.psum((flineorder.lo_extendedprice * flineorder.lo_discount))) Reduction: NoGroup GPU Projection: flineorder.lo_extendedprice, flineorder.lo_discount, pgstrom.psum((flineorder.lo_extendedprice * flineorder.lo_discount)) Combined GpuJoin: enabled GPU Preference: GPU0 (Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on public.flineorder (cost=9952.15..12638126.98 rows=572635 width=12) Output: flineorder.lo_extendedprice, flineorder.lo_discount GPU Projection: flineorder.lo_extendedprice::bigint, flineorder.lo_discount::integer Outer Scan: public.flineorder (cost=9877.70..12649677.69 rows=4010017 width=16) Outer Scan Filter: ((flineorder.lo_discount >= 1) AND (flineorder.lo_discount <= 3) AND (flineorder.lo_quantity < 25)) Depth 1: GpuHashJoin (nrows 4010017...572635) HashKeys: flineorder.lo_orderdate JoinQuals: (flineorder.lo_orderdate = date1.d_datekey) KDS-Hash (size: 66.06KB) GPU Preference: GPU0 (Tesla V100-PCIE-16GB) NVMe-Strom: enabled referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/nvme/lineorder_s401.arrow (size: 309.23GB) lo_orderpriority: 33.61GB lo_extendedprice: 17.93GB lo_ordertotalprice: 17.93GB lo_revenue: 17.93GB -> Seq Scan on public.date1 (cost=0.00..78.95 rows=365 width=4) Output: date1.d_datekey Filter: (date1.d_year = 1993) (28 rows) The verbose output additionally displays amount of column-data to be loaded on reference of columns. The load of lo_orderdate , lo_quantity , lo_extendedprice and lo_discount columns needs to read 87.4GB in total. It is 28.3% towards the filesize (309.2GB). How to make Arrow files This section introduces the way to transform dataset already stored in PostgreSQL database system into Apache Arrow file. Using PyArrow+Pandas A pair of PyArrow module, developed by Arrow developers community, and Pandas data frame can dump PostgreSQL database into an Arrow file. The example below reads all the data in table t0 , then write out them into /tmp/t0.arrow . import pyarrow as pa import pandas as pd X = pd.read_sql(sql=\"SELECT * FROM t0\", con=\"postgresql://localhost/postgres\") Y = pa.Table.from_pandas(X) f = pa.RecordBatchFileWriter('/tmp/t0.arrow', Y.schema) f.write_table(Y,1000000) # RecordBatch for each million rows f.close() Please note that the above operation once keeps query result of the SQL on memory, so should pay attention on memory consumption if you want to transfer massive rows at once. Using Pg2Arrow On the other hand, pg2arrow command, developed by PG-Strom Development Team, enables us to write out query result into Arrow file. This tool is designed to write out massive amount of data into storage device like NVME-SSD. It fetch query results from PostgreSQL database system, and write out Record Batches of Arrow format for each data size specified by the -s|--segment-size option. Thus, its memory consumption is relatively reasonable. pg2arrow command is distributed with PG-Strom. It shall be installed on the bin directory of PostgreSQL related utilities. $ ./pg2arrow --help Usage: pg2arrow [OPTION]... [DBNAME [USERNAME]] General options: -d, --dbname=DBNAME database name to connect to -c, --command=COMMAND SQL command to run -f, --file=FILENAME SQL command from file (-c and -f are exclusive, either of them must be specified) -o, --output=FILENAME result file in Apache Arrow format --append=FILENAME result file to be appended --output and --append are exclusive to use at the same time. If neither of them are specified, it creates a temporary file.) Arrow format options: -s, --segment-size=SIZE size of record batch for each (default: 256MB) Connection options: -h, --host=HOSTNAME database server host -p, --port=PORT database server port -U, --username=USERNAME database user name -w, --no-password never prompt for password -W, --password force password prompt Other options: --dump=FILENAME dump information of arrow file --progress shows progress of the job --set=NAME:VALUE GUC option to set before SQL execution Report bugs to <pgstrom@heterodbcom>. The -h or -U option specifies the connection parameters of PostgreSQL, like psql or pg_dump . The simplest usage of this command is running a SQL command specified by -c|--command option on PostgreSQL server, then write out results into the file specified by -o|--output option in Arrow format. --append option is available, instead of -o|--output option. It means appending data to existing Apache Arrow file. In this case, the target Apache Arrow file must have fully identical schema definition towards the specified SQL command. The example below reads all the data in table t0 , then write out them into the file /tmp/t0.arrow . $ pg2arrow -U kaigai -d postgres -c \"SELECT * FROM t0\" -o /tmp/t0.arrow Although it is an option for developers, --dump <filename> prints schema definition and record-batch location and size of Arrow file in human readable form. --progress option enables to show progress of the task. It is useful when a huge table is transformed to Apache Arrow format. Writable Arrow_Fdw Arrow_Fdw foreign tables that have writable option allow to append data using INSERT command, and to erase entire contents of the foreign table (that is Apache Arrow file on behalf of the foreign table) using pgstrom.arrow_fdw_truncate() function. On the other hand, UPDATE and DELETE commands are not supported. In case of writable option was enabled on Arrow_Fdw foreign tables, it accepts only one pathname specified by the file or files option. You cannot specify multiple pathnames, and exclusive to the dir option. It does not require that the Apache Arrow file actually exists on the specified path at the foreign table declaration time, on the other hands, PostgreSQL server needs to have permission to create a new file on the path. The diagram above introduces the internal layout of Apache Arrow files. In addition to the metadata like header or footer, it can have multiple DictionayBatch (dictionary data for dictionary compression) and RecordBatch (user data) chunks. RecordBatch is a unit of columnar data that have a particular number of rows. For example, on the Apache Arrow file that have x , y and z fields, when RecordBatch[0] contains 2,500 rows, it means 2,500 items of x , y and z fields are located at the RecordBatch[0] in columnar format. Also, when RecordBatch[1] contains 4,000 rows, it also means 4,000 items of x , y and z fields are located at the RecordBatch[1] in columnar format. Therefore, appending user data to Apache Arrow file is addition of a new RecordBatch. On Apache Arrow files, the file offset information towards DictionaryBatch and RecordBatch are internally held by the Footer chunk, which is next to the last RecordBatch. So, we can overwrite the original Footer chunk by the (k+1)th RecordBatch when INSERT command appends new data, then reconstruct a new Footer. Due to the data format, the newly appended RecordBatch has rows processed by the single INSERT command. So, it makes the file usage worst efficiency if an INSERT command added only a few rows. We recommend to insert as many rows as possible by a single INSERT command, when you add data to Arrow_Fdw foreign table. Write operations to Arrow_Fdw follows transaction control of PostgreSQL. No concurrent transactions can reference the rows newly appended until its commit, and user can rollback the pending written data, which is uncommited. Due to the implementation reason, writes to Arrow_Fdw foreign table acquires ShareRowExclusiveLock , although INSERT or UPDATE on regular PostgreSQL tables acquire RowExclusiveLock . It means only 1 transaction can write to a particular Arrow_Fdw foreign table concurrently. It is not a problem usually because the workloads Arrow_Fdw expects are mostly bulk data loading. When you design many concurrent transaction try to write Arrow_Fdw foreign table, we recomment to use a temporary table for many small writes. postgres=# CREATE FOREIGN TABLE ftest (x int) SERVER arrow_fdw OPTIONS (file '/dev/shm/ftest.arrow', writable 'true'); CREATE FOREIGN TABLE postgres=# INSERT INTO ftest (SELECT * FROM generate_series(1,100)); INSERT 0 100 postgres=# BEGIN; BEGIN postgres=# INSERT INTO ftest (SELECT * FROM generate_series(1,50)); INSERT 0 50 postgres=# SELECT count(*) FROM ftest; count ------- 150 (1 row) -- By the transaction rollback, the above INSERT shall be reverted. postgres=# ROLLBACK; ROLLBACK postgres=# SELECT count(*) FROM ftest; count ------- 100 (1 row) Right now, PostgreSQL does not support TRUNCATE statement on foreign tables. As an alternative, Arrow_Fdw provide pgstrom.arrow_fdw_truncate(regclass) function that eliminates all the contents of Apache Arrow file on behalf of the foreign table. postgres=# SELECT count(*) FROM ftest; count ------- 100 (1 row) postgres=# SELECT pgstrom.arrow_fdw_truncate('ftest'); arrow_fdw_truncate -------------------- (1 row) postgres=# SELECT count(*) FROM ftest; count ------- 0 (1 row) Advanced Usage SSDtoGPU Direct SQL In case when all the Arrow files mapped on the Arrow_Fdw foreign table satisfies the terms below, PG-Strom enables SSD-to-GPU Direct SQL to load columnar data. Arrow files are on NVME-SSD volume. NVME-SSD volume is managed by Ext4 filesystem. Total size of Arrow files exceeds the pg_strom.nvme_strom_threshold configuration. Partition configuration Arrow_Fdw foreign tables can be used as a part of partition leafs. Usual PostgreSQL tables can be mixtured with Arrow_Fdw foreign tables. So, pay attention Arrow_Fdw foreign table does not support any writer operations. And, make boundary condition of the partition consistent to the contents of the mapped Arrow file. It is a responsibility of the database administrators. A typical usage scenario is processing of long-standing accumulated log-data. Unlike transactional data, log-data is mostly write-once and will never be updated / deleted. Thus, by migration of the log-data after a lapse of certain period into Arrow_Fdw foreign table that is read-only but rapid processing, we can accelerate summarizing and analytics workloads. In addition, log-data likely have timestamp, so it is quite easy design to add partition leafs periodically, like monthly, weekly or others. The example below defines a partitioned table that mixes a normal PostgreSQL table and Arrow_Fdw foreign tables. The normal PostgreSQL table, is read-writable, is specified as default partition 2 , so DBA can migrate only past log-data into Arrow_Fdw foreign table under the database system operations. CREATE TABLE lineorder ( lo_orderkey numeric, lo_linenumber integer, lo_custkey numeric, lo_partkey integer, lo_suppkey numeric, lo_orderdate integer, lo_orderpriority character(15), lo_shippriority character(1), lo_quantity numeric, lo_extendedprice numeric, lo_ordertotalprice numeric, lo_discount numeric, lo_revenue numeric, lo_supplycost numeric, lo_tax numeric, lo_commit_date character(8), lo_shipmode character(10) ) PARTITION BY RANGE (lo_orderdate); CREATE TABLE lineorder__now PARTITION OF lineorder default; CREATE FOREIGN TABLE lineorder__1993 PARTITION OF lineorder FOR VALUES FROM (19930101) TO (19940101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1993.arrow'); CREATE FOREIGN TABLE lineorder__1994 PARTITION OF lineorder FOR VALUES FROM (19940101) TO (19950101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1994.arrow'); CREATE FOREIGN TABLE lineorder__1995 PARTITION OF lineorder FOR VALUES FROM (19950101) TO (19960101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1995.arrow'); CREATE FOREIGN TABLE lineorder__1996 PARTITION OF lineorder FOR VALUES FROM (19960101) TO (19970101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1996.arrow'); Below is the query execution plan towards the table. By the query condition lo_orderdate between 19950701 and 19960630 that touches boundary condition of the partition, the partition leaf lineorder__1993 and lineorder__1994 are pruned, so it makes a query execution plan to read other (foreign) tables only. =# EXPLAIN SELECT sum(lo_extendedprice*lo_discount) as revenue FROM lineorder,date1 WHERE lo_orderdate = d_datekey AND lo_orderdate between 19950701 and 19960630 AND lo_discount between 1 and 3 ABD lo_quantity < 25; QUERY PLAN -------------------------------------------------------------------------------- Aggregate (cost=172088.90..172088.91 rows=1 width=32) -> Hash Join (cost=10548.86..172088.51 rows=77 width=64) Hash Cond: (lineorder__1995.lo_orderdate = date1.d_datekey) -> Append (cost=10444.35..171983.80 rows=77 width=67) -> Custom Scan (GpuScan) on lineorder__1995 (cost=10444.35..33671.87 rows=38 width=68) GPU Filter: ((lo_orderdate >= 19950701) AND (lo_orderdate <= 19960630) AND (lo_discount >= '1'::numeric) AND (lo_discount <= '3'::numeric) AND (lo_quantity < '25'::numeric)) referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/tmp/lineorder_1995.arrow (size: 892.57MB) -> Custom Scan (GpuScan) on lineorder__1996 (cost=10444.62..33849.21 rows=38 width=68) GPU Filter: ((lo_orderdate >= 19950701) AND (lo_orderdate <= 19960630) AND (lo_discount >= '1'::numeric) AND (lo_discount <= '3'::numeric) AND (lo_quantity < '25'::numeric)) referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/tmp/lineorder_1996.arrow (size: 897.87MB) -> Custom Scan (GpuScan) on lineorder__now (cost=11561.33..104462.33 rows=1 width=18) GPU Filter: ((lo_orderdate >= 19950701) AND (lo_orderdate <= 19960630) AND (lo_discount >= '1'::numeric) AND (lo_discount <= '3'::numeric) AND (lo_quantity < '25'::numeric)) -> Hash (cost=72.56..72.56 rows=2556 width=4) -> Seq Scan on date1 (cost=0.00..72.56 rows=2556 width=4) (16 rows) The operation below extracts the data in 1997 from lineorder__now table, then move to a new Arrow_Fdw foreign table. $ pg2arrow -d sample -o /opt/tmp/lineorder_1997.arrow \\ -c \"SELECT * FROM lineorder WHERE lo_orderdate between 19970101 and 19971231\" pg2arrow command extracts the data in 1997 from the lineorder table into a new Arrow file. BEGIN; -- -- remove rows in 1997 from the read-writable table -- DELETE FROM lineorder WHERE lo_orderdate BETWEEN 19970101 AND 19971231; -- -- define a new partition leaf which maps log-data in 1997 -- CREATE FOREIGN TABLE lineorder__1997 PARTITION OF lineorder FOR VALUES FROM (19970101) TO (19980101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1997.arrow'); COMMIT; A series of operations above delete the data in 1997 from lineorder__new that is a PostgreSQL table, then maps an Arrow file ( /opt/tmp/lineorder_1997.arrow ) which contains an identical contents as a foreign table lineorder__1997 . For correctness, block size is configurable on build from 4KB to 32KB. \u21a9 Supported at PostgreSQL v11 or later. \u21a9","title":"Apache Arrow"},{"location":"arrow_fdw/#apache-arrow-columnar-store","text":"","title":"Apache Arrow (Columnar Store)"},{"location":"arrow_fdw/#overview","text":"PostgreSQL tables internally consist of 8KB blocks 1 , and block contains tuples which is a data structure of all the attributes and metadata per row. It collocates date of a row closely, so it works effectively for INSERT/UPDATE-major workloads, but not suitable for summarizing or analytics of mass-data. It is not usual to reference all the columns in a table on mass-data processing, and we tend to reference a part of columns in most cases. In this case, the storage I/O bandwidth consumed by unreferenced columns are waste, however, we have no easy way to fetch only particular columns referenced from the row-oriented data structure. In case of column oriented data structure, in an opposite manner, it has extreme disadvantage on INSERT/UPDATE-major workloads, however, it can pull out maximum performance of storage I/O on mass-data processing workloads because it can loads only referenced columns. From the standpoint of processor efficiency also, column-oriented data structure looks like a flat array that pulls out maximum bandwidth of memory subsystem for GPU, by special memory access pattern called Coalesced Memory Access.","title":"Overview"},{"location":"arrow_fdw/#what-is-apache-arrow","text":"Apache Arrow is a data format of structured data to save in columnar-form and to exchange other applications. Some applications for big-data processing support the format, and it is easy for self-developed applications to use Apache Arrow format since they provides libraries for major programming languages like C,C++ or Python. Apache Arrow format file internally contains Schema portion to define data structure, and one or more RecordBatch to save columnar-data based on the schema definition. For data types, it supports integers, strint (variable-length), date/time types and so on. Indivisual columnar data has its internal representation according to the data types. Data representation in Apache Arrow is not identical with the representation in PostgreSQL. For example, epoch of timestamp in Arrow is 1970-01-01 and it supports multiple precision. In contrast, epoch of timestamp in PostgreSQL is 2001-01-01 and it has microseconds accuracy. Arrow_Fdw allows to read Apache Arrow files on PostgreSQL using foreign table mechanism. If an Arrow file contains 8 of record batches that has million items for each column data, for example, we can access 8 million rows on the Arrow files through the foreign table.","title":"What is Apache Arrow?"},{"location":"arrow_fdw/#operations","text":"","title":"Operations"},{"location":"arrow_fdw/#creation-of-foreign-tables","text":"Usually it takes the 3 steps below to create a foreign table. Define a foreign-data-wrapper using CREATE FOREIGN DATA WRAPPER command Define a foreign server using CREATE SERVER command Define a foreign table using CREATE FOREIGN TABLE command The first 2 steps above are included in the CREATE EXTENSION pg_strom command. All you need to run individually is CREATE FOREIGN TABLE command last. CREATE FOREIGN TABLE flogdata ( ts timestamp, sensor_id int, signal1 smallint, signal2 smallint, signal3 smallint, signal4 smallint, ) SERVER arrow_fdw OPTIONS (file '/path/to/logdata.arrow'); Data type of columns specified by the CREATE FOREIGN TABLE command must be matched to schema definition of the Arrow files to be mapped. Arrow_Fdw also supports a useful manner using IMPORT FOREIGN SCHEMA statement. It automatically generates a foreign table definition using schema definition of the Arrow files. It specifies the foreign table name, schema name to import, and path name of the Arrow files using OPTION-clause. Schema definition of Arrow files contains data types and optional column name for each column. It declares a new foreign table using these information. IMPORT FOREIGN SCHEMA flogdata FROM SERVER arrow_fdw INTO public OPTIONS (file '/path/to/logdata.arrow');","title":"Creation of foreign tables"},{"location":"arrow_fdw/#foreign-table-options","text":"Arrow_Fdw supports the options below. Right now, all the options are for foreign tables. file=PATHNAME It maps an Arrow file specified on the foreign table. files=PATHNAME1[,PATHNAME2...] It maps multiple Arrow files specified by comma (,) separated files list on the foreign table. dir=DIRNAME It maps all the Arrow files in the directory specified on the foreign table. suffix=SUFFIX When dir option is given, it maps only files with the specified suffix, like .arrow` for example. parallel_workers=N_WORKERS It tells the number of workers that should be used to assist a parallel scan of this foreign table; equivalent to parallel_workers storage parameter at normal tables. writable=(true|false) It allows execution of INSERT command on the foreign table. See the section of \"Writable Arrow_Fdw\"","title":"Foreign table options"},{"location":"arrow_fdw/#data-type-mapping","text":"Arrow data types are mapped on PostgreSQL data types as follows. Int mapped to either of int1 , int2 , int4 or int8 according to the bitWidth attribute. is_signed attribute shall be ignored. int1 is an enhanced data type by PG-Strom. FloatingPoint mapped to either of float2 , float4 or float8 according to the precision attribute. float2 is an enhanced data type by PG-Strom. Binary mapped to bytea data type Decimal mapped to numeric data type Date mapped to date data type; to be adjusted as if it has unit=Day precision. Time mapped to time data type; to be adjusted as if it has unit=MicroSecond precision. Timestamp mapped to timestamp data type; to be adjusted as if it has unit=MicroSecond precision. Interval mapped to interval data type. List mapped to 1-dimensional array of the element data type. Struct mapped to compatible composite data type; that shall be defined preliminary. FixedSizeBinary mapped to char(n) data type according to the byteWidth attribute. If pg_type=TYPENAME is configured, PG-Strom may assign the configured data type. Right now, inet and macaddr are supported. Union , Map , Duration , LargeBinary , LargeUtf8 , LargeList Right now, PG-Strom cannot map these Arrow data types onto any of PostgreSQL data types.","title":"Data type mapping"},{"location":"arrow_fdw/#how-to-read-explain","text":"EXPLAIN command show us information about Arrow files reading. The example below is an output of query execution plan that includes flineorder foreign table that mapps an Arrow file of 309GB. =# EXPLAIN SELECT sum(lo_extendedprice*lo_discount) as revenue FROM flineorder,date1 WHERE lo_orderdate = d_datekey AND d_year = 1993 AND lo_discount between 1 and 3 AND lo_quantity < 25; QUERY PLAN ----------------------------------------------------------------------------------------------------- Aggregate (cost=12632759.02..12632759.03 rows=1 width=32) -> Custom Scan (GpuPreAgg) (cost=12632754.43..12632757.49 rows=204 width=8) Reduction: NoGroup Combined GpuJoin: enabled GPU Preference: GPU0 (Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on flineorder (cost=9952.15..12638126.98 rows=572635 width=12) Outer Scan: flineorder (cost=9877.70..12649677.69 rows=4010017 width=16) Outer Scan Filter: ((lo_discount >= 1) AND (lo_discount <= 3) AND (lo_quantity < 25)) Depth 1: GpuHashJoin (nrows 4010017...572635) HashKeys: flineorder.lo_orderdate JoinQuals: (flineorder.lo_orderdate = date1.d_datekey) KDS-Hash (size: 66.06KB) GPU Preference: GPU0 (Tesla V100-PCIE-16GB) NVMe-Strom: enabled referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/nvme/lineorder_s401.arrow (size: 309.23GB) -> Seq Scan on date1 (cost=0.00..78.95 rows=365 width=4) Filter: (d_year = 1993) (18 rows) According to the EXPLAIN output, we can see Custom Scan (GpuJoin) scans flineorder foreign table. file0 item shows the filename ( /opt/nvme/lineorder_s401.arrow ) on behalf of the foreign table and its size. If multiple files are mapped, any files are individually shown, like file1 , file2 , ... The referenced item shows the list of referenced columns. We can see this query touches lo_orderdate , lo_quantity , lo_extendedprice and lo_discount columns. In addition, GPU Preference: GPU0 (Tesla V100-PCIE-16GB) and NVMe-Strom: enabled shows us the scan on flineorder uses SSD-to-GPU Direct SQL mechanism. VERBOSE option outputs more detailed information. =# EXPLAIN VERBOSE SELECT sum(lo_extendedprice*lo_discount) as revenue FROM flineorder,date1 WHERE lo_orderdate = d_datekey AND d_year = 1993 AND lo_discount between 1 and 3 AND lo_quantity < 25; QUERY PLAN -------------------------------------------------------------------------------- Aggregate (cost=12632759.02..12632759.03 rows=1 width=32) Output: sum((pgstrom.psum((flineorder.lo_extendedprice * flineorder.lo_discount)))) -> Custom Scan (GpuPreAgg) (cost=12632754.43..12632757.49 rows=204 width=8) Output: (pgstrom.psum((flineorder.lo_extendedprice * flineorder.lo_discount))) Reduction: NoGroup GPU Projection: flineorder.lo_extendedprice, flineorder.lo_discount, pgstrom.psum((flineorder.lo_extendedprice * flineorder.lo_discount)) Combined GpuJoin: enabled GPU Preference: GPU0 (Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on public.flineorder (cost=9952.15..12638126.98 rows=572635 width=12) Output: flineorder.lo_extendedprice, flineorder.lo_discount GPU Projection: flineorder.lo_extendedprice::bigint, flineorder.lo_discount::integer Outer Scan: public.flineorder (cost=9877.70..12649677.69 rows=4010017 width=16) Outer Scan Filter: ((flineorder.lo_discount >= 1) AND (flineorder.lo_discount <= 3) AND (flineorder.lo_quantity < 25)) Depth 1: GpuHashJoin (nrows 4010017...572635) HashKeys: flineorder.lo_orderdate JoinQuals: (flineorder.lo_orderdate = date1.d_datekey) KDS-Hash (size: 66.06KB) GPU Preference: GPU0 (Tesla V100-PCIE-16GB) NVMe-Strom: enabled referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/nvme/lineorder_s401.arrow (size: 309.23GB) lo_orderpriority: 33.61GB lo_extendedprice: 17.93GB lo_ordertotalprice: 17.93GB lo_revenue: 17.93GB -> Seq Scan on public.date1 (cost=0.00..78.95 rows=365 width=4) Output: date1.d_datekey Filter: (date1.d_year = 1993) (28 rows) The verbose output additionally displays amount of column-data to be loaded on reference of columns. The load of lo_orderdate , lo_quantity , lo_extendedprice and lo_discount columns needs to read 87.4GB in total. It is 28.3% towards the filesize (309.2GB).","title":"How to read EXPLAIN"},{"location":"arrow_fdw/#how-to-make-arrow-files","text":"This section introduces the way to transform dataset already stored in PostgreSQL database system into Apache Arrow file.","title":"How to make Arrow files"},{"location":"arrow_fdw/#using-pyarrowpandas","text":"A pair of PyArrow module, developed by Arrow developers community, and Pandas data frame can dump PostgreSQL database into an Arrow file. The example below reads all the data in table t0 , then write out them into /tmp/t0.arrow . import pyarrow as pa import pandas as pd X = pd.read_sql(sql=\"SELECT * FROM t0\", con=\"postgresql://localhost/postgres\") Y = pa.Table.from_pandas(X) f = pa.RecordBatchFileWriter('/tmp/t0.arrow', Y.schema) f.write_table(Y,1000000) # RecordBatch for each million rows f.close() Please note that the above operation once keeps query result of the SQL on memory, so should pay attention on memory consumption if you want to transfer massive rows at once.","title":"Using PyArrow+Pandas"},{"location":"arrow_fdw/#using-pg2arrow","text":"On the other hand, pg2arrow command, developed by PG-Strom Development Team, enables us to write out query result into Arrow file. This tool is designed to write out massive amount of data into storage device like NVME-SSD. It fetch query results from PostgreSQL database system, and write out Record Batches of Arrow format for each data size specified by the -s|--segment-size option. Thus, its memory consumption is relatively reasonable. pg2arrow command is distributed with PG-Strom. It shall be installed on the bin directory of PostgreSQL related utilities. $ ./pg2arrow --help Usage: pg2arrow [OPTION]... [DBNAME [USERNAME]] General options: -d, --dbname=DBNAME database name to connect to -c, --command=COMMAND SQL command to run -f, --file=FILENAME SQL command from file (-c and -f are exclusive, either of them must be specified) -o, --output=FILENAME result file in Apache Arrow format --append=FILENAME result file to be appended --output and --append are exclusive to use at the same time. If neither of them are specified, it creates a temporary file.) Arrow format options: -s, --segment-size=SIZE size of record batch for each (default: 256MB) Connection options: -h, --host=HOSTNAME database server host -p, --port=PORT database server port -U, --username=USERNAME database user name -w, --no-password never prompt for password -W, --password force password prompt Other options: --dump=FILENAME dump information of arrow file --progress shows progress of the job --set=NAME:VALUE GUC option to set before SQL execution Report bugs to <pgstrom@heterodbcom>. The -h or -U option specifies the connection parameters of PostgreSQL, like psql or pg_dump . The simplest usage of this command is running a SQL command specified by -c|--command option on PostgreSQL server, then write out results into the file specified by -o|--output option in Arrow format. --append option is available, instead of -o|--output option. It means appending data to existing Apache Arrow file. In this case, the target Apache Arrow file must have fully identical schema definition towards the specified SQL command. The example below reads all the data in table t0 , then write out them into the file /tmp/t0.arrow . $ pg2arrow -U kaigai -d postgres -c \"SELECT * FROM t0\" -o /tmp/t0.arrow Although it is an option for developers, --dump <filename> prints schema definition and record-batch location and size of Arrow file in human readable form. --progress option enables to show progress of the task. It is useful when a huge table is transformed to Apache Arrow format.","title":"Using Pg2Arrow"},{"location":"arrow_fdw/#writable-arrow_fdw","text":"Arrow_Fdw foreign tables that have writable option allow to append data using INSERT command, and to erase entire contents of the foreign table (that is Apache Arrow file on behalf of the foreign table) using pgstrom.arrow_fdw_truncate() function. On the other hand, UPDATE and DELETE commands are not supported. In case of writable option was enabled on Arrow_Fdw foreign tables, it accepts only one pathname specified by the file or files option. You cannot specify multiple pathnames, and exclusive to the dir option. It does not require that the Apache Arrow file actually exists on the specified path at the foreign table declaration time, on the other hands, PostgreSQL server needs to have permission to create a new file on the path. The diagram above introduces the internal layout of Apache Arrow files. In addition to the metadata like header or footer, it can have multiple DictionayBatch (dictionary data for dictionary compression) and RecordBatch (user data) chunks. RecordBatch is a unit of columnar data that have a particular number of rows. For example, on the Apache Arrow file that have x , y and z fields, when RecordBatch[0] contains 2,500 rows, it means 2,500 items of x , y and z fields are located at the RecordBatch[0] in columnar format. Also, when RecordBatch[1] contains 4,000 rows, it also means 4,000 items of x , y and z fields are located at the RecordBatch[1] in columnar format. Therefore, appending user data to Apache Arrow file is addition of a new RecordBatch. On Apache Arrow files, the file offset information towards DictionaryBatch and RecordBatch are internally held by the Footer chunk, which is next to the last RecordBatch. So, we can overwrite the original Footer chunk by the (k+1)th RecordBatch when INSERT command appends new data, then reconstruct a new Footer. Due to the data format, the newly appended RecordBatch has rows processed by the single INSERT command. So, it makes the file usage worst efficiency if an INSERT command added only a few rows. We recommend to insert as many rows as possible by a single INSERT command, when you add data to Arrow_Fdw foreign table. Write operations to Arrow_Fdw follows transaction control of PostgreSQL. No concurrent transactions can reference the rows newly appended until its commit, and user can rollback the pending written data, which is uncommited. Due to the implementation reason, writes to Arrow_Fdw foreign table acquires ShareRowExclusiveLock , although INSERT or UPDATE on regular PostgreSQL tables acquire RowExclusiveLock . It means only 1 transaction can write to a particular Arrow_Fdw foreign table concurrently. It is not a problem usually because the workloads Arrow_Fdw expects are mostly bulk data loading. When you design many concurrent transaction try to write Arrow_Fdw foreign table, we recomment to use a temporary table for many small writes. postgres=# CREATE FOREIGN TABLE ftest (x int) SERVER arrow_fdw OPTIONS (file '/dev/shm/ftest.arrow', writable 'true'); CREATE FOREIGN TABLE postgres=# INSERT INTO ftest (SELECT * FROM generate_series(1,100)); INSERT 0 100 postgres=# BEGIN; BEGIN postgres=# INSERT INTO ftest (SELECT * FROM generate_series(1,50)); INSERT 0 50 postgres=# SELECT count(*) FROM ftest; count ------- 150 (1 row) -- By the transaction rollback, the above INSERT shall be reverted. postgres=# ROLLBACK; ROLLBACK postgres=# SELECT count(*) FROM ftest; count ------- 100 (1 row) Right now, PostgreSQL does not support TRUNCATE statement on foreign tables. As an alternative, Arrow_Fdw provide pgstrom.arrow_fdw_truncate(regclass) function that eliminates all the contents of Apache Arrow file on behalf of the foreign table. postgres=# SELECT count(*) FROM ftest; count ------- 100 (1 row) postgres=# SELECT pgstrom.arrow_fdw_truncate('ftest'); arrow_fdw_truncate -------------------- (1 row) postgres=# SELECT count(*) FROM ftest; count ------- 0 (1 row)","title":"Writable Arrow_Fdw"},{"location":"arrow_fdw/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"arrow_fdw/#ssdtogpu-direct-sql","text":"In case when all the Arrow files mapped on the Arrow_Fdw foreign table satisfies the terms below, PG-Strom enables SSD-to-GPU Direct SQL to load columnar data. Arrow files are on NVME-SSD volume. NVME-SSD volume is managed by Ext4 filesystem. Total size of Arrow files exceeds the pg_strom.nvme_strom_threshold configuration.","title":"SSDtoGPU Direct SQL"},{"location":"arrow_fdw/#partition-configuration","text":"Arrow_Fdw foreign tables can be used as a part of partition leafs. Usual PostgreSQL tables can be mixtured with Arrow_Fdw foreign tables. So, pay attention Arrow_Fdw foreign table does not support any writer operations. And, make boundary condition of the partition consistent to the contents of the mapped Arrow file. It is a responsibility of the database administrators. A typical usage scenario is processing of long-standing accumulated log-data. Unlike transactional data, log-data is mostly write-once and will never be updated / deleted. Thus, by migration of the log-data after a lapse of certain period into Arrow_Fdw foreign table that is read-only but rapid processing, we can accelerate summarizing and analytics workloads. In addition, log-data likely have timestamp, so it is quite easy design to add partition leafs periodically, like monthly, weekly or others. The example below defines a partitioned table that mixes a normal PostgreSQL table and Arrow_Fdw foreign tables. The normal PostgreSQL table, is read-writable, is specified as default partition 2 , so DBA can migrate only past log-data into Arrow_Fdw foreign table under the database system operations. CREATE TABLE lineorder ( lo_orderkey numeric, lo_linenumber integer, lo_custkey numeric, lo_partkey integer, lo_suppkey numeric, lo_orderdate integer, lo_orderpriority character(15), lo_shippriority character(1), lo_quantity numeric, lo_extendedprice numeric, lo_ordertotalprice numeric, lo_discount numeric, lo_revenue numeric, lo_supplycost numeric, lo_tax numeric, lo_commit_date character(8), lo_shipmode character(10) ) PARTITION BY RANGE (lo_orderdate); CREATE TABLE lineorder__now PARTITION OF lineorder default; CREATE FOREIGN TABLE lineorder__1993 PARTITION OF lineorder FOR VALUES FROM (19930101) TO (19940101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1993.arrow'); CREATE FOREIGN TABLE lineorder__1994 PARTITION OF lineorder FOR VALUES FROM (19940101) TO (19950101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1994.arrow'); CREATE FOREIGN TABLE lineorder__1995 PARTITION OF lineorder FOR VALUES FROM (19950101) TO (19960101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1995.arrow'); CREATE FOREIGN TABLE lineorder__1996 PARTITION OF lineorder FOR VALUES FROM (19960101) TO (19970101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1996.arrow'); Below is the query execution plan towards the table. By the query condition lo_orderdate between 19950701 and 19960630 that touches boundary condition of the partition, the partition leaf lineorder__1993 and lineorder__1994 are pruned, so it makes a query execution plan to read other (foreign) tables only. =# EXPLAIN SELECT sum(lo_extendedprice*lo_discount) as revenue FROM lineorder,date1 WHERE lo_orderdate = d_datekey AND lo_orderdate between 19950701 and 19960630 AND lo_discount between 1 and 3 ABD lo_quantity < 25; QUERY PLAN -------------------------------------------------------------------------------- Aggregate (cost=172088.90..172088.91 rows=1 width=32) -> Hash Join (cost=10548.86..172088.51 rows=77 width=64) Hash Cond: (lineorder__1995.lo_orderdate = date1.d_datekey) -> Append (cost=10444.35..171983.80 rows=77 width=67) -> Custom Scan (GpuScan) on lineorder__1995 (cost=10444.35..33671.87 rows=38 width=68) GPU Filter: ((lo_orderdate >= 19950701) AND (lo_orderdate <= 19960630) AND (lo_discount >= '1'::numeric) AND (lo_discount <= '3'::numeric) AND (lo_quantity < '25'::numeric)) referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/tmp/lineorder_1995.arrow (size: 892.57MB) -> Custom Scan (GpuScan) on lineorder__1996 (cost=10444.62..33849.21 rows=38 width=68) GPU Filter: ((lo_orderdate >= 19950701) AND (lo_orderdate <= 19960630) AND (lo_discount >= '1'::numeric) AND (lo_discount <= '3'::numeric) AND (lo_quantity < '25'::numeric)) referenced: lo_orderdate, lo_quantity, lo_extendedprice, lo_discount files0: /opt/tmp/lineorder_1996.arrow (size: 897.87MB) -> Custom Scan (GpuScan) on lineorder__now (cost=11561.33..104462.33 rows=1 width=18) GPU Filter: ((lo_orderdate >= 19950701) AND (lo_orderdate <= 19960630) AND (lo_discount >= '1'::numeric) AND (lo_discount <= '3'::numeric) AND (lo_quantity < '25'::numeric)) -> Hash (cost=72.56..72.56 rows=2556 width=4) -> Seq Scan on date1 (cost=0.00..72.56 rows=2556 width=4) (16 rows) The operation below extracts the data in 1997 from lineorder__now table, then move to a new Arrow_Fdw foreign table. $ pg2arrow -d sample -o /opt/tmp/lineorder_1997.arrow \\ -c \"SELECT * FROM lineorder WHERE lo_orderdate between 19970101 and 19971231\" pg2arrow command extracts the data in 1997 from the lineorder table into a new Arrow file. BEGIN; -- -- remove rows in 1997 from the read-writable table -- DELETE FROM lineorder WHERE lo_orderdate BETWEEN 19970101 AND 19971231; -- -- define a new partition leaf which maps log-data in 1997 -- CREATE FOREIGN TABLE lineorder__1997 PARTITION OF lineorder FOR VALUES FROM (19970101) TO (19980101) SERVER arrow_fdw OPTIONS (file '/opt/tmp/lineorder_1997.arrow'); COMMIT; A series of operations above delete the data in 1997 from lineorder__new that is a PostgreSQL table, then maps an Arrow file ( /opt/tmp/lineorder_1997.arrow ) which contains an identical contents as a foreign table lineorder__1997 . For correctness, block size is configurable on build from 4KB to 32KB. \u21a9 Supported at PostgreSQL v11 or later. \u21a9","title":"Partition configuration"},{"location":"brin/","text":"Index Support Overview PostgreSQL supports several index strategies. The default is B-tree that can rapidly fetch records with a particular value. Elsewhere, it also supports Hash, BRIN, GiST, GIN and others that have own characteristics for each. PG-Strom supports only BRIN-index right now. BRIN-index works efficiently on the dataset we can expect physically neighbor records have similar key values, like timestamp values of time-series data. It allows to skip blocks-range if any records in the range obviously don't match to the scan qualifiers, then, also enables to reduce the amount of I/O due to full table scan. PG-Strom also utilizes the feature of BRIN-index, to skip obviously unnecessary blocks from the ones to be loaded to GPU. Configuration No special configurations are needed to use BRIN-index. PG-Strom automatically applies BRIN-index based scan if BRIN-index is configured on the referenced columns and scan qualifiers are suitable to the index. Also see the PostgreSQL Documentation for the BRIN-index feature. By the GUC parameters below, PG-Strom enables/disables usage of BRIN-index. It usually don't need to change from the default configuration, except for debugging or trouble shooting. Parameter Type Default Description pg_strom.enable_brin bool on enables/disables usage of BRIN-index Operations By EXPLAIN , we can check whether BRIN-index is in use. postgres=# EXPLAIN ANALYZE SELECT * FROM dt WHERE ymd BETWEEN '2018-01-01' AND '2018-12-31' AND cat LIKE '%aaa%'; QUERY PLAN -------------------------------------------------------------------------------- Custom Scan (GpuScan) on dt (cost=94810.93..176275.00 rows=169992 width=44) (actual time=1777.819..1901.537 rows=175277 loops=1) GPU Filter: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date) AND (cat ~~ '%aaa%'::text)) Rows Removed by GPU Filter: 4385491 BRIN cond: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date)) BRIN skipped: 424704 Planning time: 0.529 ms Execution time: 2323.063 ms (7 rows) In the example above, BRIN-index is configured on the ymd column. BRIN cond shows the qualifier of BRIN-index for concentration. BRIN skipped shows the number of skipped blocks actually. In this case, 424704 blocks are skipped, then, it filters out 4385491 rows in the loaded blocks by the scan qualifiers. GpuJoin and GpuPreAgg often pulls up its underlying table scan and runs the scan by itself, to reduce inefficient data transfer. In this case, it also uses the BRIN-index to concentrate the scan. The example below shows a usage of BRIN-index in a query which includes GROUP BY. postgres=# EXPLAIN ANALYZE SELECT cat,count(*) FROM dt WHERE ymd BETWEEN '2018-01-01' AND '2018-12-31' GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=6149.78..6151.86 rows=26 width=12) (actual time=427.482..427.499 rows=26 loops=1) Group Key: cat -> Sort (cost=6149.78..6150.24 rows=182 width=12) (actual time=427.465..427.467 rows=26 loops=1) Sort Key: cat Sort Method: quicksort Memory: 26kB -> Custom Scan (GpuPreAgg) on dt (cost=6140.68..6142.95 rows=182 width=12) (actual time=427.331..427.339 rows=26 loops=1) Reduction: Local Outer Scan: dt (cost=4000.00..4011.99 rows=4541187 width=4) (actual time=78.573..415.961 rows=4560768 loops=1) Outer Scan Filter: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date)) Rows Removed by Outer Scan Filter: 15564 BRIN cond: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date)) BRIN skipped: 424704 Planning time: 30.992 ms Execution time: 818.994 ms (14 rows)","title":"BRIN Index"},{"location":"brin/#index-support","text":"","title":"Index Support"},{"location":"brin/#overview","text":"PostgreSQL supports several index strategies. The default is B-tree that can rapidly fetch records with a particular value. Elsewhere, it also supports Hash, BRIN, GiST, GIN and others that have own characteristics for each. PG-Strom supports only BRIN-index right now. BRIN-index works efficiently on the dataset we can expect physically neighbor records have similar key values, like timestamp values of time-series data. It allows to skip blocks-range if any records in the range obviously don't match to the scan qualifiers, then, also enables to reduce the amount of I/O due to full table scan. PG-Strom also utilizes the feature of BRIN-index, to skip obviously unnecessary blocks from the ones to be loaded to GPU.","title":"Overview"},{"location":"brin/#configuration","text":"No special configurations are needed to use BRIN-index. PG-Strom automatically applies BRIN-index based scan if BRIN-index is configured on the referenced columns and scan qualifiers are suitable to the index. Also see the PostgreSQL Documentation for the BRIN-index feature. By the GUC parameters below, PG-Strom enables/disables usage of BRIN-index. It usually don't need to change from the default configuration, except for debugging or trouble shooting. Parameter Type Default Description pg_strom.enable_brin bool on enables/disables usage of BRIN-index","title":"Configuration"},{"location":"brin/#operations","text":"By EXPLAIN , we can check whether BRIN-index is in use. postgres=# EXPLAIN ANALYZE SELECT * FROM dt WHERE ymd BETWEEN '2018-01-01' AND '2018-12-31' AND cat LIKE '%aaa%'; QUERY PLAN -------------------------------------------------------------------------------- Custom Scan (GpuScan) on dt (cost=94810.93..176275.00 rows=169992 width=44) (actual time=1777.819..1901.537 rows=175277 loops=1) GPU Filter: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date) AND (cat ~~ '%aaa%'::text)) Rows Removed by GPU Filter: 4385491 BRIN cond: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date)) BRIN skipped: 424704 Planning time: 0.529 ms Execution time: 2323.063 ms (7 rows) In the example above, BRIN-index is configured on the ymd column. BRIN cond shows the qualifier of BRIN-index for concentration. BRIN skipped shows the number of skipped blocks actually. In this case, 424704 blocks are skipped, then, it filters out 4385491 rows in the loaded blocks by the scan qualifiers. GpuJoin and GpuPreAgg often pulls up its underlying table scan and runs the scan by itself, to reduce inefficient data transfer. In this case, it also uses the BRIN-index to concentrate the scan. The example below shows a usage of BRIN-index in a query which includes GROUP BY. postgres=# EXPLAIN ANALYZE SELECT cat,count(*) FROM dt WHERE ymd BETWEEN '2018-01-01' AND '2018-12-31' GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=6149.78..6151.86 rows=26 width=12) (actual time=427.482..427.499 rows=26 loops=1) Group Key: cat -> Sort (cost=6149.78..6150.24 rows=182 width=12) (actual time=427.465..427.467 rows=26 loops=1) Sort Key: cat Sort Method: quicksort Memory: 26kB -> Custom Scan (GpuPreAgg) on dt (cost=6140.68..6142.95 rows=182 width=12) (actual time=427.331..427.339 rows=26 loops=1) Reduction: Local Outer Scan: dt (cost=4000.00..4011.99 rows=4541187 width=4) (actual time=78.573..415.961 rows=4560768 loops=1) Outer Scan Filter: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date)) Rows Removed by Outer Scan Filter: 15564 BRIN cond: ((ymd >= '2018-01-01'::date) AND (ymd <= '2018-12-31'::date)) BRIN skipped: 424704 Planning time: 30.992 ms Execution time: 818.994 ms (14 rows)","title":"Operations"},{"location":"gpucache/","text":"GPU Cache Overview GPU has a device memory that is independent of the RAM in the host system, and in order to calculate on the GPU, data must be transferred from the host system or storage device to the GPU device memory once through the PCI-E bus. The same is true when PG-Strom processes SQL queries on the GPU. Internally, the records read from the PostgreSQL table are transferred to the GPU, and then various SQL operations are executed on the GPU. However, these processes take time to read the tables and transfer the data. (In many cases, much longer than the processing on the GPU!) GPU Cache is a function that reserves an area on the GPU device memory in advance and keeps a copy of the PostgreSQL table there. This can be used to execute search/analysis SQL in real time for data that is relatively small(~10GB) and is frequently updated. The log-based synchronization mechanism described below allows GPU Cache to be kept up-to-date without interfering with highly parallel and transactional workloads. Nevertheless, you can process search/analytical SQL workloads on data already loaded on GPU Cache without reading the records from the table again or transferring the data over the PCI-E bus. A typical use case of GPU Cache is to join location data, such as the current position of a mobile device like a car or a cell phone, collected in real time with other data using GPU-PostGIS . The workload of updating location information sent out by many devices is extremely heavy. However, it also needs to be applied on the GPU side without delay in order to perform search/analysis queries based on the latest location information. Although the size is limited, GPU Cache is one option to achieve both high frequency updates and high-performance search/analysis query execution. Architecture GPU Caches needs to satisfy two requirements: highly parallel update-based workloads and search/analytical queries on constantly up-to-date data. In many systems, the CPU and GPU are connected via the PCI-E bus, and there is a reasonable delay in their communication. Therefore, synchronizing GPU Cache every time a row is updated in the target table will significantly degrade the transaction performance. Using GPU Cache allocates a \"REDO Log Buffer\" on the shared memory on the host side in addition to the area on the memory of the GPU. When a SQL command (INSERT, UPDATE, DELETE) is executed to update a table, the updated contents are copied to the REDO Log Buffer by the AFTER ROW trigger. Since this process can be completed by CPU and RAM alone without any GPU call, it has little impact on transaction performance. When a certain amount of unapplied REDO Log Entries accumulate in the REDO Log Buffer, or a certain amount of time has passed since the last write, it is loaded by a background worker process (GPU memory keeper) and applied to GPU Cache. At this time, REDO Log Entries are transferred to the GPU in batches and processed in parallel by thousands of processor cores on the GPU, so delays caused by this process are rarely a problem. Search/analysis queries against the target table in GPU Cache do not load the table data, but use the data mapped from GPU Cache pre-allocated on the GPU device memory. If there are any unapplied REDO Logs at the start of the search/analysis query, they will all be applied to GPU Cache. This means that the results of a search/analysis query scanning the target GPU Cache will return the same results as if it were referring to the table directly, and the query will always be consistent. Configuration To enable GPU Cache, set the following trigger function for the target table. The pgstrom.gpucache_sync_trigger() function must be set as the row trigger for AFTER INSERT OR UPDATE OR DELETE. The pgstrom.gpucache_sync_trigger() function must be set as a syntax trigger for AFTER TRUNCATE. The timing of the above triggers must be set to ALWAYS (the slave side of replication must also fire the trigger). =# create trigger row_sync after insert or update or delete on dpoints_even for row execute function pgstrom.gpucache_sync_trigger(); =# create trigger stmt_sync after truncate on dpoints_even for statement execute function pgstrom.gpucache_sync_trigger(); =# alter table dpoints_even enable always trigger row_sync; =# alter table dpoints_even enable always trigger stmt_sync; GPU Cache Customize You can customize GPU Cache by specifying an optional string in the form of KEY=VALUE as an argument to GPU Cache line trigger. Please note that where you should specify is not to the syntax trigger. The following SQL statement is an example of creating a GPU Cache whose maximum row count is 2.5 million rows and the size of the REDO Log Buffer is 100MB. =# create trigger row_sync after insert or update or delete on dpoints_even for row execute function pgstrom.gpucache_sync_trigger('max_num_rows=2500000,redo_buffer_size=100m'); The options that can be given to the argument of the line trigger are shown below. gpu_device_id=GPU_ID (default: 0) Specify the target GPU device ID to allocate GPU Cache. max_num_rows=NROWS (default: 10485760) Specify the number of rows that can be allocated on GPU Cache. Just as with PostgreSQL tables, GPU Cache needs to retain updated rows prior to commit for visibility control, so max_num_rows should be specified with some margin. Note that the old version of the updated/deleted row will be released after the transaction is committed. redo_buffer_size=SIZE (default: 160m) Specify the size of REDO Log Buffer. You can use k, m and g as the unit. gpu_sync_interval=SECONDS (default: 5) If the specified time has passed since the last write to the REDO Log Buffer, REDO Log will be applied to the GPU, regardless of the number of rows updated. gpu_sync_threshold=SIZE (default: 25% of redo_buffer_size ) When the unapplied REDO Log in the REDO Log Buffer reaches SIZE bytes, it is applied to the GPU side. You can use k, m and g as the unit. GPU Cache Options Below are GPU Cache related PostgreSQL configuration parameters. pg_strom.enable_gpucache (default: on) This option controls whether search/analytical queries will use GPU Cache or not. If this value is off, the data will be read from the table each time, ignoring GPU Cache even if it is available. Note that this setting has no effect on REDO Log Buffer appending by triggers. pg_strom.gpucache_auto_preload (default: NULL) When PostgreSQL is started/restarted, GPU Cache for the table specified by this parameter will be built in advance. The value should be in the format: DATABASE_NAME.SCHEMA_NAME.TABLE_NAME . To specify multiple tables, separate them by commas. If GPU Cache is not built, the PostgreSQL backend process that first attempts to access GPU Cache will scan the entire target table and transfer it to the GPU. This process usually takes a considerable amount of time. However, by specifying the tables that should be loaded in this option, you can avoid waiting too long the first time you run a search/analysis query. If this parameter is set to '*', it will attempt to load the contents of all tables with GPU Cache into the GPU in order. At this time, the background worker will access all the databases in order, and will return exit code 1 to prompt the postmaster to restart. The server startup log will show that the \"GPUCache Startup Preloader\" exited with exit code 1 as follows, but this is not abnormal. LOG: database system is ready to accept connections LOG: background worker \"GPUCache Startup Preloader\" (PID 856418) exited with exit code 1 LOG: background worker \"GPUCache Startup Preloader\" (PID 856427) exited with exit code 1 LOG: create GpuCacheSharedState dpoints:164c95f71 LOG: gpucache: AllocMemory dpoints:164c95f71 (main_sz=772505600, extra_sz=0) LOG: gpucache: auto preload 'public.dpoints' (DB: postgres) LOG: create GpuCacheSharedState mytest:1773a589b LOG: gpucache: auto preload 'public.mytest' (DB: postgres) LOG: gpucache: AllocMemory mytest:1773a589b (main_sz=675028992, extra_sz=0) Operations Confirm GPU Cache usage GPU Cache is referred to transparently. The user does not need to be aware of the presence or absence of GPU Cache, and PG-Strom will automatically determine and switch the process. The following is the query plan for a query that refers to the table \"dpoints\" which has GPU Cache set. The 3rd row from the bottom, in the \"GPU Cache\" field, shows the basic information about GPU Cache of this table. We can see that the query is executed with referring to GPU Cache and not the \"dpoints\" table. Note that the meaning of each item is as follows: max_num_rows indicates the maximum number of rows that GPU Cache can hold; main indicates the size of the area in GPU Cache for fixed-length fields; extra indicates the size of the area for variable-length data. =# explain select pref, city, count(*) from giscity g, dpoints d where pref = 'Tokyo' and st_contains(g.geom,st_makepoint(d.x, d.y)) group by pref, city; QUERY PLAN -------------------------------------------------------------------------------------------------------- HashAggregate (cost=5638809.75..5638859.99 rows=5024 width=29) Group Key: g.pref, g.city -> Custom Scan (GpuPreAgg) (cost=5638696.71..5638759.51 rows=5024 width=29) Reduction: Local Combined GpuJoin: enabled GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on dpoints d (cost=631923.57..5606933.23 rows=50821573 width=21) Outer Scan: dpoints d (cost=0.00..141628.18 rows=7999618 width=16) Depth 1: GpuGiSTJoin(nrows 7999618...50821573) HeapSize: 3251.36KB IndexFilter: (g.geom ~ st_makepoint(d.x, d.y)) on giscity_geom_idx JoinQuals: st_contains(g.geom, st_makepoint(d.x, d.y)) GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) GPU Cache: NVIDIA Tesla V100-PCIE-16GB [max_num_rows: 12000000, main: 772.51M, extra: 0] -> Seq Scan on giscity g (cost=0.00..8929.24 rows=6353 width=1883) Filter: ((pref)::text = 'Tokyo'::text) (16 rows) Check status of GPU Cache Use the pgstrom.gpucache_info view to check the current state of GPU Cache. =# select * from pgstrom.gpucache_info ; database_oid | database_name | table_oid | table_name | signature | gpu_main_sz | gpu_extra_sz | redo_write_ts | redo_write_nitems | redo_write_pos | redo_read_nitems | redo_read_pos | redo_sync_pos | config_options --------------+---------------+-----------+------------+------------+-------------+--------------+----------------------------+-------------------+----------------+------------------+---------------+---------------+------------------------------------------------------------------------------------------------------------------------ 12728 | postgres | 25244 | mytest | 6295279771 | 675028992 | 0 | 2021-05-14 03:00:18.623503 | 500000 | 36000000 | 500000 | 36000000 | 36000000 | gpu_device_id=0,max_num_rows=10485760,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 12728 | postgres | 25262 | dpoints | 5985886065 | 772505600 | 0 | 2021-05-14 03:00:18.524627 | 8000000 | 576000192 | 8000000 | 576000192 | 576000192 | gpu_device_id=0,max_num_rows=12000000,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 (2 rows) Note that pgstrom.gpucache_info will only show the status of GPU Caches that have been initially loaded and have space allocated on the GPU device memory at that time. In other words, if the trigger function is set but not yet initially loaded (no one has accessed it yet), the potentially allocated GPU Cache will not be shown yet. The meaning of each field is as follows: database_oid The OID of the database to which the table with GPU Cache enabled exists. database_name The name of the database to which the table with GPU Cache enabled exists. table_oid The OID of the table with GPU Cache enabled. Note that the database this table exists in is not necessarily the database you are connected to. table_name The name of the table with GPU Cache enabled. Note that the database this table exists in is not necessarily the database you are connected to. signature A hash value indicating the uniqueness of GPU Cache. This value may change, for example, before and after executing ALTER TABLE . gpu_main_sz The size of the area reserved in GPU Cache for fixed-length data. gpu_extra_sz The size of the area reserved in GPU Cache for variable-length data. redo_write_ts The time when the REDO Log Buffer was last updated. redo_write_nitems The total number of REDO Logs in the REDO Log Buffer. redo_write_pos The total size (in bytes) of the REDO Logs in the REDO Log Buffer. redo_read_nitems The total number of REDO Logs read from the REDO Log Buffer and applied to the GPU. redo_read_pos The total size (in bytes) of REDO Logs read from the REDO Log Buffer and applied to the GPU. redo_sync_pos The position of the REDO Log which is scheduled to be applied to GPU Cache by the background worker on the REDO Log Buffer. This is used internally to avoid a situation where many sessions generate asynchronous requests at the same time when the remaining REDO Log Buffer is running out. config_options The optional string to customize GPU Cache.","title":"GPU Cache"},{"location":"gpucache/#gpu-cache","text":"","title":"GPU Cache"},{"location":"gpucache/#overview","text":"GPU has a device memory that is independent of the RAM in the host system, and in order to calculate on the GPU, data must be transferred from the host system or storage device to the GPU device memory once through the PCI-E bus. The same is true when PG-Strom processes SQL queries on the GPU. Internally, the records read from the PostgreSQL table are transferred to the GPU, and then various SQL operations are executed on the GPU. However, these processes take time to read the tables and transfer the data. (In many cases, much longer than the processing on the GPU!) GPU Cache is a function that reserves an area on the GPU device memory in advance and keeps a copy of the PostgreSQL table there. This can be used to execute search/analysis SQL in real time for data that is relatively small(~10GB) and is frequently updated. The log-based synchronization mechanism described below allows GPU Cache to be kept up-to-date without interfering with highly parallel and transactional workloads. Nevertheless, you can process search/analytical SQL workloads on data already loaded on GPU Cache without reading the records from the table again or transferring the data over the PCI-E bus. A typical use case of GPU Cache is to join location data, such as the current position of a mobile device like a car or a cell phone, collected in real time with other data using GPU-PostGIS . The workload of updating location information sent out by many devices is extremely heavy. However, it also needs to be applied on the GPU side without delay in order to perform search/analysis queries based on the latest location information. Although the size is limited, GPU Cache is one option to achieve both high frequency updates and high-performance search/analysis query execution.","title":"Overview"},{"location":"gpucache/#architecture","text":"GPU Caches needs to satisfy two requirements: highly parallel update-based workloads and search/analytical queries on constantly up-to-date data. In many systems, the CPU and GPU are connected via the PCI-E bus, and there is a reasonable delay in their communication. Therefore, synchronizing GPU Cache every time a row is updated in the target table will significantly degrade the transaction performance. Using GPU Cache allocates a \"REDO Log Buffer\" on the shared memory on the host side in addition to the area on the memory of the GPU. When a SQL command (INSERT, UPDATE, DELETE) is executed to update a table, the updated contents are copied to the REDO Log Buffer by the AFTER ROW trigger. Since this process can be completed by CPU and RAM alone without any GPU call, it has little impact on transaction performance. When a certain amount of unapplied REDO Log Entries accumulate in the REDO Log Buffer, or a certain amount of time has passed since the last write, it is loaded by a background worker process (GPU memory keeper) and applied to GPU Cache. At this time, REDO Log Entries are transferred to the GPU in batches and processed in parallel by thousands of processor cores on the GPU, so delays caused by this process are rarely a problem. Search/analysis queries against the target table in GPU Cache do not load the table data, but use the data mapped from GPU Cache pre-allocated on the GPU device memory. If there are any unapplied REDO Logs at the start of the search/analysis query, they will all be applied to GPU Cache. This means that the results of a search/analysis query scanning the target GPU Cache will return the same results as if it were referring to the table directly, and the query will always be consistent.","title":"Architecture"},{"location":"gpucache/#configuration","text":"To enable GPU Cache, set the following trigger function for the target table. The pgstrom.gpucache_sync_trigger() function must be set as the row trigger for AFTER INSERT OR UPDATE OR DELETE. The pgstrom.gpucache_sync_trigger() function must be set as a syntax trigger for AFTER TRUNCATE. The timing of the above triggers must be set to ALWAYS (the slave side of replication must also fire the trigger). =# create trigger row_sync after insert or update or delete on dpoints_even for row execute function pgstrom.gpucache_sync_trigger(); =# create trigger stmt_sync after truncate on dpoints_even for statement execute function pgstrom.gpucache_sync_trigger(); =# alter table dpoints_even enable always trigger row_sync; =# alter table dpoints_even enable always trigger stmt_sync;","title":"Configuration"},{"location":"gpucache/#gpu-cache-customize","text":"You can customize GPU Cache by specifying an optional string in the form of KEY=VALUE as an argument to GPU Cache line trigger. Please note that where you should specify is not to the syntax trigger. The following SQL statement is an example of creating a GPU Cache whose maximum row count is 2.5 million rows and the size of the REDO Log Buffer is 100MB. =# create trigger row_sync after insert or update or delete on dpoints_even for row execute function pgstrom.gpucache_sync_trigger('max_num_rows=2500000,redo_buffer_size=100m'); The options that can be given to the argument of the line trigger are shown below. gpu_device_id=GPU_ID (default: 0) Specify the target GPU device ID to allocate GPU Cache. max_num_rows=NROWS (default: 10485760) Specify the number of rows that can be allocated on GPU Cache. Just as with PostgreSQL tables, GPU Cache needs to retain updated rows prior to commit for visibility control, so max_num_rows should be specified with some margin. Note that the old version of the updated/deleted row will be released after the transaction is committed. redo_buffer_size=SIZE (default: 160m) Specify the size of REDO Log Buffer. You can use k, m and g as the unit. gpu_sync_interval=SECONDS (default: 5) If the specified time has passed since the last write to the REDO Log Buffer, REDO Log will be applied to the GPU, regardless of the number of rows updated. gpu_sync_threshold=SIZE (default: 25% of redo_buffer_size ) When the unapplied REDO Log in the REDO Log Buffer reaches SIZE bytes, it is applied to the GPU side. You can use k, m and g as the unit.","title":"GPU Cache Customize"},{"location":"gpucache/#gpu-cache-options","text":"Below are GPU Cache related PostgreSQL configuration parameters. pg_strom.enable_gpucache (default: on) This option controls whether search/analytical queries will use GPU Cache or not. If this value is off, the data will be read from the table each time, ignoring GPU Cache even if it is available. Note that this setting has no effect on REDO Log Buffer appending by triggers. pg_strom.gpucache_auto_preload (default: NULL) When PostgreSQL is started/restarted, GPU Cache for the table specified by this parameter will be built in advance. The value should be in the format: DATABASE_NAME.SCHEMA_NAME.TABLE_NAME . To specify multiple tables, separate them by commas. If GPU Cache is not built, the PostgreSQL backend process that first attempts to access GPU Cache will scan the entire target table and transfer it to the GPU. This process usually takes a considerable amount of time. However, by specifying the tables that should be loaded in this option, you can avoid waiting too long the first time you run a search/analysis query. If this parameter is set to '*', it will attempt to load the contents of all tables with GPU Cache into the GPU in order. At this time, the background worker will access all the databases in order, and will return exit code 1 to prompt the postmaster to restart. The server startup log will show that the \"GPUCache Startup Preloader\" exited with exit code 1 as follows, but this is not abnormal. LOG: database system is ready to accept connections LOG: background worker \"GPUCache Startup Preloader\" (PID 856418) exited with exit code 1 LOG: background worker \"GPUCache Startup Preloader\" (PID 856427) exited with exit code 1 LOG: create GpuCacheSharedState dpoints:164c95f71 LOG: gpucache: AllocMemory dpoints:164c95f71 (main_sz=772505600, extra_sz=0) LOG: gpucache: auto preload 'public.dpoints' (DB: postgres) LOG: create GpuCacheSharedState mytest:1773a589b LOG: gpucache: auto preload 'public.mytest' (DB: postgres) LOG: gpucache: AllocMemory mytest:1773a589b (main_sz=675028992, extra_sz=0)","title":"GPU Cache Options"},{"location":"gpucache/#operations","text":"","title":"Operations"},{"location":"gpucache/#confirm-gpu-cache-usage","text":"GPU Cache is referred to transparently. The user does not need to be aware of the presence or absence of GPU Cache, and PG-Strom will automatically determine and switch the process. The following is the query plan for a query that refers to the table \"dpoints\" which has GPU Cache set. The 3rd row from the bottom, in the \"GPU Cache\" field, shows the basic information about GPU Cache of this table. We can see that the query is executed with referring to GPU Cache and not the \"dpoints\" table. Note that the meaning of each item is as follows: max_num_rows indicates the maximum number of rows that GPU Cache can hold; main indicates the size of the area in GPU Cache for fixed-length fields; extra indicates the size of the area for variable-length data. =# explain select pref, city, count(*) from giscity g, dpoints d where pref = 'Tokyo' and st_contains(g.geom,st_makepoint(d.x, d.y)) group by pref, city; QUERY PLAN -------------------------------------------------------------------------------------------------------- HashAggregate (cost=5638809.75..5638859.99 rows=5024 width=29) Group Key: g.pref, g.city -> Custom Scan (GpuPreAgg) (cost=5638696.71..5638759.51 rows=5024 width=29) Reduction: Local Combined GpuJoin: enabled GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on dpoints d (cost=631923.57..5606933.23 rows=50821573 width=21) Outer Scan: dpoints d (cost=0.00..141628.18 rows=7999618 width=16) Depth 1: GpuGiSTJoin(nrows 7999618...50821573) HeapSize: 3251.36KB IndexFilter: (g.geom ~ st_makepoint(d.x, d.y)) on giscity_geom_idx JoinQuals: st_contains(g.geom, st_makepoint(d.x, d.y)) GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) GPU Cache: NVIDIA Tesla V100-PCIE-16GB [max_num_rows: 12000000, main: 772.51M, extra: 0] -> Seq Scan on giscity g (cost=0.00..8929.24 rows=6353 width=1883) Filter: ((pref)::text = 'Tokyo'::text) (16 rows)","title":"Confirm GPU Cache usage"},{"location":"gpucache/#check-status-of-gpu-cache","text":"Use the pgstrom.gpucache_info view to check the current state of GPU Cache. =# select * from pgstrom.gpucache_info ; database_oid | database_name | table_oid | table_name | signature | gpu_main_sz | gpu_extra_sz | redo_write_ts | redo_write_nitems | redo_write_pos | redo_read_nitems | redo_read_pos | redo_sync_pos | config_options --------------+---------------+-----------+------------+------------+-------------+--------------+----------------------------+-------------------+----------------+------------------+---------------+---------------+------------------------------------------------------------------------------------------------------------------------ 12728 | postgres | 25244 | mytest | 6295279771 | 675028992 | 0 | 2021-05-14 03:00:18.623503 | 500000 | 36000000 | 500000 | 36000000 | 36000000 | gpu_device_id=0,max_num_rows=10485760,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 12728 | postgres | 25262 | dpoints | 5985886065 | 772505600 | 0 | 2021-05-14 03:00:18.524627 | 8000000 | 576000192 | 8000000 | 576000192 | 576000192 | gpu_device_id=0,max_num_rows=12000000,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 (2 rows) Note that pgstrom.gpucache_info will only show the status of GPU Caches that have been initially loaded and have space allocated on the GPU device memory at that time. In other words, if the trigger function is set but not yet initially loaded (no one has accessed it yet), the potentially allocated GPU Cache will not be shown yet. The meaning of each field is as follows: database_oid The OID of the database to which the table with GPU Cache enabled exists. database_name The name of the database to which the table with GPU Cache enabled exists. table_oid The OID of the table with GPU Cache enabled. Note that the database this table exists in is not necessarily the database you are connected to. table_name The name of the table with GPU Cache enabled. Note that the database this table exists in is not necessarily the database you are connected to. signature A hash value indicating the uniqueness of GPU Cache. This value may change, for example, before and after executing ALTER TABLE . gpu_main_sz The size of the area reserved in GPU Cache for fixed-length data. gpu_extra_sz The size of the area reserved in GPU Cache for variable-length data. redo_write_ts The time when the REDO Log Buffer was last updated. redo_write_nitems The total number of REDO Logs in the REDO Log Buffer. redo_write_pos The total size (in bytes) of the REDO Logs in the REDO Log Buffer. redo_read_nitems The total number of REDO Logs read from the REDO Log Buffer and applied to the GPU. redo_read_pos The total size (in bytes) of REDO Logs read from the REDO Log Buffer and applied to the GPU. redo_sync_pos The position of the REDO Log which is scheduled to be applied to GPU Cache by the background worker on the REDO Log Buffer. This is used internally to avoid a situation where many sessions generate asynchronous requests at the same time when the remaining REDO Log Buffer is running out. config_options The optional string to customize GPU Cache.","title":"Check status of GPU Cache"},{"location":"install/","text":"Installation This chapter introduces the steps to install PG-Strom. Checklist Server Hardware It requires generic x86_64 hardware that can run Linux operating system supported by CUDA Toolkit. We have no special requirement for CPU, storage and network devices. note002:HW Validation List may help you to choose the hardware. GPU Direct SQL Execution needs SSD devices which support NVMe specification, and to be installed under the same PCIe Root Complex where GPU is located on. GPU Device PG-Strom requires at least one GPU device on the system, which is supported by CUDA Toolkit, has computing capability 6.0 (Pascal generation) or later; Please check at 002: HW Validation List - List of supported GPU models for GPU selection. Operating System PG-Strom requires Linux operating system for x86_64 architecture, and its distribution supported by CUDA Toolkit. Our recommendation is Red Hat Enterprise Linux or CentOS version 8.x series. GPU Direct SQL Execution (w/ HeteroDB driver) needs Red Hat Enterprise Linux or CentOS version 7.3/8.0 or newer. GPU Direct SQL Execution (w/ NVIDIA driver; experimental) needs Red Hat Enterprise Linux or CentOS version 8.3 or newer, and Mellanox OFED (OpenFabrics Enterprise Distribution) driver. PostgreSQL PG-Strom v3.0 requires PostgreSQL v11 or later. Some of PostgreSQL APIs used by PG-Strom internally are not included in the former versions. CUDA Toolkit PG-Strom requires CUDA Toolkit version 11.4 or later. Some of CUDA Driver APIs used by PG-Strom internally are not included in the former versions. NVIDIA GPUDirect Storage (GDS) has been included in the CUDA Toolkit version 11.4 or later. Selection of GPU Direct SQL Execiton drivers Please consider the software stack for GPUDirect SQL, prior to the installation. There are two individual Linux kernel driver for GPUDirect SQL execution, as follows: HeteroDB NVME-Strom The dedicated Linux kernel module, released at 2018, supported since PG-Strom v2.0. It supports RHEL7.x/RHEL8.x, enables direct read from local NVME-SSDs to GPU using GPUDirect RDMA. NVIDIA GPUDirect Storage The general purpose driver stack, has been developed by NVIDIA, to support direct read from NVME/NVME-oF devices to GPU. At May-2021, its public beta revision has been published. PG-Strom v3.0 experimentally supports the GPUDirect Storage, that supports RHEL8.3/8.4 and Ubuntu 18.04/20.04. Some partners, including HeteroDB, expressed to support this feature. It also allows direct read from shared-filesystems or SDS(Software Defined Storage) devices over NVME-oF protocols. Here is little performance differences on the above two drivers. On the other hands, GPUDirect Storage has more variations of the supported storages and filesystems, and more mature software QA process, expect for the case of PG-Strom on RHEL7/CentOS7, we will recommend to use GPUDirect Storage driver. Tips For RHEL8/CentOS8 or Ubuntu 18.04/20.04, install the software according to the following steps. OS Installation CUDA Toolkit Installation heterodb-extra module installation No need to install heterodb-kmod MOFED Driver installation GPUDirect Storage module installation PostgreSQL installation PG-Strom installation PostGIS installation (on the demand) For RHEL7/CentOS7, install the software according to the following steps. OS Installation CUDA Toolkit Installation heterodb-extra module installation heterodb-kmod module installation No need to install MOFED Driver and GPUDirect Storage module PostgreSQL installation PG-Strom installation PostGIS installation (on the demand) OS Installation Choose a Linux distribution which is supported by CUDA Toolkit, then install the system according to the installation process of the distribution. NVIDIA DEVELOPER ZONE introduces the list of Linux distributions which are supported by CUDA Toolkit. In case of Red Hat Enterprise Linux 8.x or CentOS 8.x series, choose \"Minimal installation\" as base environment, and also check the following add-ons. Development Tools Next to the OS installation on the server, go on the package repository configuration to install the third-party packages. If you didn't check the \"Development Tools\" at the installer, we can additionally install the software using the command below after the operating system installation. # dnf groupinstall 'Development Tools' Tip If GPU devices installed on the server are too new, it may cause system crash during system boot. In this case, you may avoid the problem by adding nouveau.modeset=0 onto the kernel boot option, to disable the inbox graphic driver. Disables nouveau driver When the nouveau driver, that is an open source compatible driver for NVIDIA GPUs, is loaded, it prevent to load the nvidia driver. In this case, reboot the operating system after a configuration to disable the nouveau driver. To disable the nouveau driver, put the following configuration onto /etc/modprobe.d/disable-nouveau.conf , and run dracut command to apply them on the boot image of Linux kernel. Then, restart the system once. # cat > /etc/modprobe.d/disable-nouveau.conf <<EOF blacklist nouveau options nouveau modeset=0 EOF # dracut -f # shutdown -r now epel-release Installation Several software modules required by PG-Strom are distributed as a part of EPEL (Extra Packages for Enterprise Linux). You need to add a repository definition of EPEL packages for yum system to obtain these software. One of the package we will get from EPEL repository is DKMS (Dynamic Kernel Module Support). It is a framework to build Linux kernel module for the running Linux kernel on demand; used for NVIDIA's GPU driver and related. Linux kernel module must be rebuilt according to version-up of Linux kernel, so we don't recommend to operate the system without DKMS. epel-release package provides the repository definition of EPEL. Install the package as follows. # dnf install epel-release heterodb-swdc Installation PG-Strom and related packages are distributed from HeteroDB Software Distribution Center . You need to add a repository definition of HeteroDB-SWDC for you system to obtain these software. heterodb-swdc package provides the repository definition of HeteroDB-SWDC. Access to the HeteroDB Software Distribution Center using Web browser, download the heterodb-swdc-1.2-1.el8.noarch.rpm on top of the file list, then install this package. Once heterodb-swdc package gets installed, yum system configuration is updated to get software from the HeteroDB-SWDC repository. Install the heterodb-swdc package as follows. # dnf install https://heterodb.github.io/swdc/yum/rhel8-noarch/heterodb-swdc-1.2-1.el8.noarch.rpm CUDA Toolkit Installation This section introduces the installation of CUDA Toolkit. If you already installed the latest CUDA Toolkit, you can skip this section. NVIDIA offers two approach to install CUDA Toolkit; one is by self-extracting archive (called runfile), and the other is by RPM packages. We recommend RPM installation because it allows simple software updates. You can download the installation package for CUDA Toolkit from NVIDIA DEVELOPER ZONE. Choose your OS, architecture, distribution and version, then choose \"rpm(network)\" edition. Once you choose the \"rpm(network)\" option, it shows a few step-by-step commands to configure the repository definition and to install the related packages, by RPM installation of CUDA Toolkit over the network. The example below is the commands for RHEL8/CentOS8. sudo dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo sudo dnf clean all sudo dnf -y module install nvidia-driver:latest-dkms sudo dnf -y install cuda Once installation completed successfully, CUDA Toolkit is deployed at /usr/local/cuda . $ ls /usr/local/cuda bin include libnsight nvml samples tools doc jre libnvvp nvvm share version.txt extras lib64 nsightee_plugins pkgconfig src Once installation gets completed, ensure the system recognizes the GPU devices correctly. nvidia-smi command shows GPU information installed on your system, as follows. $ nvidia-smi Thu May 27 15:05:50 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 465.19.01 Driver Version: 465.19.01 CUDA Version: 11.3 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA A100-PCI... Off | 00000000:8E:00.0 Off | 0 | | N/A 44C P0 49W / 250W | 0MiB / 40536MiB | 0% Default | | | | Disabled | +-------------------------------+----------------------+----------------------+ | 1 NVIDIA A100-PCI... Off | 00000000:B1:00.0 Off | 0 | | N/A 41C P0 54W / 250W | 0MiB / 40536MiB | 0% Default | | | | Disabled | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+ HeteroDB extra modules heterodb-extra module enhances PG-Strom the following features. multi-GPUs support GPUDirect SQL GiST index support on GPU License management If you don't use the above features, only open source modules, you don't need to install the heterodb-extra module here. Please skip this section. Install the heterodb-extra package, downloaded from the SWDC, as follows. # dnf install heterodb-extra License activation License activation is needed to use all the features of heterodb-extra , provided by HeteroDB,Inc. You can operate the system without license, but features below are restricted. Multiple GPUs support Striping of NVME-SSD drives (md-raid0) on GPUDirect SQL Support of NVME-oF device on GPUDirect SQL Support of GiST index on GPU-version of PostGIS workloads You can obtain a license file, like as a plain text below, from HeteroDB,Inc. IAgIVdKxhe+BSer3Y67jQW0+uTzYh00K6WOSH7xQ26Qcw8aeUNYqJB9YcKJTJb+QQhjmUeQpUnboNxVwLCd3HFuLXeBWMKp11/BgG0FSrkUWu/ZCtDtw0F1hEIUY7m767zAGV8y+i7BuNXGJFvRlAkxdVO3/K47ocIgoVkuzBfLvN/h9LffOydUnHPzrFHfLc0r3nNNgtyTrfvoZiXegkGM9GBTAKyq8uWu/OGonh9ybzVKOgofhDLk0rVbLohOXDhMlwDl2oMGIr83tIpCWG+BGE+TDwsJ4n71Sv6n4bi/ZBXBS498qShNHDGrbz6cNcDVBa+EuZc6HzZoF6UrljEcl= ---- VERSION:2 SERIAL_NR:HDB-TRIAL ISSUED_AT:2019-05-09 EXPIRED_AT:2019-06-08 GPU_UUID:GPU-a137b1df-53c9-197f-2801-f2dccaf9d42f Copy the license file to /etc/heterodb.license , then restart PostgreSQL. The startup log messages of PostgreSQL dumps the license information, and it tells us the license activation is successfully done. : LOG: HeteroDB Extra module loaded (API=20210525; NVIDIA cuFile) LOG: HeteroDB License: { \"version\" : 2, \"serial_nr\" : \"HDB-TRIAL\", \"issued_at\" : \"2020-11-24\", \"expired_at\" : \"2025-12-31\", \"gpus\" : [ { \"uuid\" : \"GPU-8ba149db-53d8-c5f3-0f55-97ce8cfadb28\" } ]} LOG: PG-Strom version 3.0 built for PostgreSQL 12 heterodb-kmod Installation This module should be installed, if you use GPUDirect SQL using nvme_strom kernel module by HeteroDB. If NVIDIA GPUDirect Storage is used, skip this section. heterodb-kmod package is distributed at the (https://heterodb.github.io/swdc/)[HeteroDB Software Distribution Center] as a free software. In other words, it is not an open source software. If your system already setup heterodb-swdc package, dnf install command downloads the RPM file and install the heterodb-kmod package. # dnf install heterodb-kmod You ought to be ensure existence of nvme_strom kernel module using modinfo command. # modinfo nvme_strom filename: /lib/modules/4.18.0-240.22.1.el8_3.x86_64/extra/nvme_strom.ko.xz version: 2.9-1.el8 license: BSD description: SSD-to-GPU Direct SQL Module author: KaiGai Kohei <kaigai@heterodbcom> rhelversion: 8.3 depends: name: nvme_strom vermagic: 4.18.0-240.22.1.el8_3.x86_64 SMP mod_unload modversions parm: verbose:Enables debug messages (1=on, 2=verbose) (int) parm: stat_enabled:Enables run-time statistics (int) parm: p2p_dma_max_depth:Max number of concurrent P2P DMA requests per NVME device parm: p2p_dma_max_unitsz:Max length of single DMA request in kB parm: fast_ssd_mode:Use SSD2GPU Direct even if clean page caches exist (int) parm: license:License validation status NVME-Strom Linux kernel module has some parameters. Parameter Type Default Description verbose int 0 Enables detailed debug output stat_enabled int 1 Enables statistics using nvme_stat command fast_ssd_mode int 0 Operating mode for fast NVME-SSD p2p_dma_max_depth int 1024 Maximum number of asynchronous P2P DMA request can be enqueued on the I/O-queue of NVME device p2p_dma_max_unitsz int 256 Maximum length of data blocks, in kB, to be read by a single P2P DMA request at once license string -1 Shows the license expired date, if any. Note Here is an extra explanation for fast_ssd_mode parameter. When NVME-Strom Linux kernel module get a request for GPUDirect SQL data transfer, first of all, it checks whether the required data blocks are caches on page-caches of operating system. If fast_ssd_mode is 0 , NVME-Strom once writes back page caches of the required data blocks to the userspace buffer of the caller, then indicates application to invoke normal host-->device data transfer by CUDA API. It is suitable for non-fast NVME-SSDs such as PCIe x4 grade. On the other hands, GPUDirect data transfer may be faster, if you use PCIe x8 grade fast NVME-SSD or use multiple SSDs in striping mode, than normal host-->device data transfer after the buffer copy. If fast_ssd_mode is not 0 , NVME-Strom kicks GPUDirect SQL data transfer regardless of the page cache state. However, it shall never kicks GPUDirect data transfer if page cache is dirty. Note Here is an extra explanation for p2p_dma_max_depth parameter. NVME-Strom Linux kernel module makes DMA requests for GPUDirect SQL data transfer, then enqueues them to I/O-queue of the source NVME devices. When asynchronous DMA requests are enqueued more than the capacity of NVME devices, latency of individual DMA requests become terrible because NVME-SSD controler processes the DMA requests in order of arrival. (On the other hands, it maximizes the throughput because NVME-SSD controler receives DMA requests continuously.) If turn-around time of the DMA requests are too large, it may be wrongly considered as errors, then can lead timeout of I/O request and return an error status. Thus, it makes no sense to enqueue more DMA requests to the I/O-queue more than the reasonable amount of pending requests for full usage of NVME devices. p2p_dma_max_depth parameter controls number of asynchronous P2P DMA requests that can be enqueued at once per NVME device. If application tries to enqueue DMA requests more than the configuration, the caller thread will block until completion of the running DMA. So, it enables to avoid unintentional high-load of NVME devices. NVIDIA GPUDirect Storage NVIDIA GPUDirect Storage is a new feature of CUDA Toolkit version 11.4 which was released at Jun-2021. It also requires installation of OpenFabrics Enterprise Distribution (MOFED) driver by Mellanox, for direct read from local NVME-SSD drives or remove NVME-oF devices. You can obtain the MOFED driver from here . The descriptions in this section may not reflect the the latest installation instructions exactly, so please check at the official documentation by NVIDIA also. MOFED Driver Installation You can download the latest MOFED driver from here . This section introduces the example of installation from the tgz archive. Extract the tgz archive, then kick mlnxofedinstall script. Please don't forget the options to enable GPUDirect Storage features. # tar xvf MLNX_OFED_LINUX-5.3-1.0.0.1-rhel8.3-x86_64.tgz # cd MLNX_OFED_LINUX-5.3-1.0.0.1-rhel8.3-x86_64 # ./mlnxofedinstall --with-nvmf --with-nfsrdma --enable-gds --add-kernel-support # dracut -f During the build and installation of MOFED drivers, the installer may require additional packages. If your setup follows the document exactly, the following packages shall be required, so please install them using dnf command. createrepo kernel-rpm-macros python36-devel pciutils python36 lsof kernel-modules-extra tcsh tcl tk gcc-gfortran Once MOFED drivers got installed, it should replace several INBOX drivers like nvme driver. For example, the command below shows the /lib/modules/<KERNEL_VERSION>/extra/mlnx-nvme/host/nvme-rdma.ko that is additionally installed, instead of the INBOX nvme-rdma ( /lib/modules/<KERNEL_VERSION>/kernel/drivers/nvme/host/nvme-rdma.ko.xz ). # modinfo nvme-rdma filename: /lib/modules/4.18.0-240.22.1.el8_3.x86_64/extra/mlnx-nvme/host/nvme-rdma.ko license: GPL v2 rhelversion: 8.3 srcversion: 49FD1FC7CCB178E4D859F29 depends: mlx_compat,rdma_cm,ib_core,nvme-core,nvme-fabrics name: nvme_rdma vermagic: 4.18.0-240.22.1.el8_3.x86_64 SMP mod_unload modversions parm: register_always:Use memory registration even for contiguous memory regions (bool) Then, shutdown the system and restart, to replace the kernel modules already loaded (like nvme ). Please don't forget to run dracut -f after completion of the mlnxofedinstall script. GPUDirect Storage Installation Next, let's install the GPUDirect Storage software stack. # dnf install nvidia-gds Once the above installation is completed, gdscheck command allows to check the status of GPUDirect Storage. By the above installation process, NVME (local NVME-SSD) and NVME-oF (remove devices) should be Supported . # /usr/local/cuda/gds/tools/gdscheck -p GDS release version: 1.0.0.82 nvidia_fs version: 2.7 libcufile version: 2.4 ============ ENVIRONMENT: ============ ===================== DRIVER CONFIGURATION: ===================== NVMe : Supported NVMeOF : Supported SCSI : Unsupported ScaleFlux CSD : Unsupported NVMesh : Unsupported DDN EXAScaler : Unsupported IBM Spectrum Scale : Unsupported NFS : Unsupported WekaFS : Unsupported Userspace RDMA : Unsupported --Mellanox PeerDirect : Enabled --rdma library : Not Loaded (libcufile_rdma.so) --rdma devices : Not configured --rdma_device_status : Up: 0 Down: 0 ===================== CUFILE CONFIGURATION: ===================== properties.use_compat_mode : true properties.gds_rdma_write_support : true properties.use_poll_mode : false properties.poll_mode_max_size_kb : 4 properties.max_batch_io_timeout_msecs : 5 properties.max_direct_io_size_kb : 16384 properties.max_device_cache_size_kb : 131072 properties.max_device_pinned_mem_size_kb : 33554432 properties.posix_pool_slab_size_kb : 4 1024 16384 properties.posix_pool_slab_count : 128 64 32 properties.rdma_peer_affinity_policy : RoundRobin properties.rdma_dynamic_routing : 0 fs.generic.posix_unaligned_writes : false fs.lustre.posix_gds_min_kb: 0 fs.weka.rdma_write_support: false profile.nvtx : false profile.cufile_stats : 0 miscellaneous.api_check_aggressive : false ========= GPU INFO: ========= GPU index 0 NVIDIA A100-PCIE-40GB bar:1 bar size (MiB):65536 supports GDS GPU index 1 NVIDIA A100-PCIE-40GB bar:1 bar size (MiB):65536 supports GDS ============== PLATFORM INFO: ============== IOMMU: disabled Platform verification succeeded Tips Additional configuration for RAID volume For data reading from software RAID (md-raid0) volumes by GPUDirect Storage, the following line must be added to the /lib/udev/rules.d/63-md-raid-arrays.rules configuration file. IMPORT{\u200bprogram}=\"/usr/sbin/mdadm --detail --export $devnode\" Then reboot the system to ensure the new configuration. See NVIDIA GPUDirect Storage Installation and Troubleshooting Guide for the details. PostgreSQL Installation This section introduces PostgreSQL installation with RPM. We don't introduce the installation steps from the source because there are many documents for this approach, and there are also various options for the ./configure script. PostgreSQL is also distributed in the packages of Linux distributions, however, it is not the latest one, and often older than the version which supports PG-Strom. For example, Red Hat Enterprise Linux 7.x or CentOS 7.x distributes PostgreSQL v9.2.x series. This version had been EOL by the PostgreSQL community. PostgreSQL Global Development Group provides yum repository to distribute the latest PostgreSQL and related packages. Like the configuration of EPEL, you can install a small package to set up yum repository, then install PostgreSQL and related software. Here is the list of yum repository definition: http://yum.postgresql.org/repopackages.php . Repository definitions are per PostgreSQL major version and Linux distribution. You need to choose the one for your Linux distribution, and for PostgreSQL v11 or later. You can install PostgreSQL as following steps: Installation of yum repository definition. Disables the distribution's default PostgreSQL module Only for RHEL8/CentOS8 series Installation of PostgreSQL packages. # dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm # dnf -y module disable postgresql # dnf install -y postgresql13-devel postgresql13-server Note On the Red Hat Enterprise Linux 8 and CentOS 8, the package name postgresql conflicts to the default one at the distribution, thus, unable to install the packages from PGDG. So, disable the postgresql module by the distribution, using dnf -y module disable postgresql . For the Ret Hat Enterprise Linux 7 and CentOS 7, no need to disable the module because the packages provided by PGDG are identified by the major version. The RPM packages provided by PostgreSQL Global Development Group installs software under the /usr/pgsql-<version> directory, so you may pay attention whether the PATH environment variable is configured appropriately. postgresql-alternative package set up symbolic links to the related commands under /usr/local/bin , so allows to simplify the operations. Also, it enables to switch target version using alternatives command even if multiple version of PostgreSQL. # dnf install postgresql-alternatives PG-Strom Installation RPM Installation PG-Strom and related packages are distributed from HeteroDB Software Distribution Center . If you repository definition has been added, not many tasks are needed. We provide individual RPM packages of PG-Strom for each PostgreSQL major version. pg_strom-PG12 package is built for PostgreSQL v12, and pg_strom-PG13 is also built for PostgreSQL v13. It is a restriction due to binary compatibility of extension modules for PostgreSQL. # dnf install -y pg_strom-PG13 That's all for package installation. Installation from the source For developers, we also introduces the steps to build and install PG-Strom from the source code. Getting the source code Like RPM packages, you can download tarball of the source code from HeteroDB Software Distribution Center . On the other hands, here is a certain time-lags to release the tarball, it may be preferable to checkout the master branch of PG-Strom on GitHub to use the latest development branch. $ git clone https://github.com/heterodb/pg-strom.git Cloning into 'pg-strom'... remote: Counting objects: 13797, done. remote: Compressing objects: 100% (215/215), done. remote: Total 13797 (delta 208), reused 339 (delta 167), pack-reused 13400 Receiving objects: 100% (13797/13797), 11.81 MiB | 1.76 MiB/s, done. Resolving deltas: 100% (10504/10504), done. Building the PG-Strom Configuration to build PG-Strom must match to the target PostgreSQL strictly. For example, if a particular strcut has inconsistent layout by the configuration at build, it may lead problematic bugs; not easy to find out. Thus, not to have inconsistency, PG-Strom does not have own configure script, but references the build configuration of PostgreSQL using pg_config command. If PATH environment variable is set to the pg_config command of the target PostgreSQL, run make and make install . Elsewhere, give PG_CONFIG=... parameter on make command to tell the full path of the pg_config command. $ cd pg-strom $ make PG_CONFIG=/usr/pgsql-13/bin/pg_config $ sudo make install PG_CONFIG=/usr/pgsql-13/bin/pg_config Post Installation Setup Creation of database cluster Database cluster is not constructed yet, run initdb command to set up initial database of PostgreSQL. The default path of the database cluster on RPM installation is /var/lib/pgsql/<version number>/data . If you install postgresql-alternatives package, this default path can be referenced by /var/lib/pgdata regardless of the PostgreSQL version. # su - postgres $ initdb -D /var/lib/pgdata/ The files belonging to this database system will be owned by user \"postgres\". This user must also own the server process. The database cluster will be initialized with locale \"en_US.UTF-8\". The default database encoding has accordingly been set to \"UTF8\". The default text search configuration will be set to \"english\". Data page checksums are disabled. fixing permissions on existing directory /var/lib/pgdata ... ok creating subdirectories ... ok selecting dynamic shared memory implementation ... posix selecting default max_connections ... 100 selecting default shared_buffers ... 128MB selecting default time zone ... Asia/Tokyo creating configuration files ... ok running bootstrap script ... ok performing post-bootstrap initialization ... ok syncing data to disk ... ok initdb: warning: enabling \"trust\" authentication for local connections You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb. Success. You can now start the database server using: pg_ctl -D /var/lib/pgdata/ -l logfile start Setup postgresql.conf Next, edit postgresql.conf which is a configuration file of PostgreSQL. The parameters below should be edited at least to work PG-Strom. Investigate other parameters according to usage of the system and expected workloads. shared_preload_libraries PG-Strom module must be loaded on startup of the postmaster process by the shared_preload_libraries . Unable to load it on demand. Therefore, you must add the configuration below. shared_preload_libraries = '$libdir/pg_strom' max_worker_processes PG-Strom internally uses several background workers, so the default configuration (= 8) is too small for other usage. So, we recommand to expand the variable for a certain margin. max_worker_processes = 100 shared_buffers Although it depends on the workloads, the initial configuration of shared_buffers is too small for the data size where PG-Strom tries to work, thus storage workloads restricts the entire performance, and may be unable to work GPU efficiently. So, we recommend to expand the variable for a certain margin. shared_buffers = 10GB Please consider to apply SSD-to-GPU Direct SQL Execution to process larger than system's physical RAM size. work_mem Although it depends on the workloads, the initial configuration of work_mem is too small to choose the optimal query execution plan on analytic queries. An typical example is, disk-based merge sort may be chosen instead of the in-memory quick-sorting. So, we recommend to expand the variable for a certain margin. work_mem = 1GB Expand OS resource limits GPU Direct SQL especially tries to open many files simultaneously, so resource limit for number of file descriptors per process should be expanded. Also, we recommend not to limit core file size to generate core dump of PostgreSQL certainly on system crash. If PostgreSQL service is launched by systemd, you can put the configurations of resource limit at /etc/systemd/system/postgresql-XX.service.d/pg_strom.conf . RPM installation setups the configuration below by the default. It comments out configuration to the environment variable CUDA_ENABLE_COREDUMP_ON_EXCEPTION . This is a developer option that enables to generate GPU's core dump on any CUDA/GPU level errors, if enabled. See CUDA-GDB:GPU core dump support for more details. [Service] LimitNOFILE=65536 LimitCORE=infinity #Environment=CUDA_ENABLE_COREDUMP_ON_EXCEPTION=1 Start PostgreSQL Start PostgreSQL service. If PG-Strom is set up appropriately, it writes out log message which shows PG-Strom recognized GPU devices. The example below recognized two NVIDIA A100 (PCIE; 40GB), and displays the closest GPU identifier foe each NVME-SSD drive. # systemctl start postgresql-13 # journalctl -u postgresql-13 -- Logs begin at Thu 2021-05-27 17:02:03 JST, end at Fri 2021-05-28 13:26:35 JST. -- May 28 13:09:33 kujira.heterodb.in systemd[1]: Starting PostgreSQL 13 database server... May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.500 JST [6336] LOG: NVRTC 11.3 is successfully loaded. May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.510 JST [6336] LOG: failed on open('/proc/nvme-strom'): No such file or directory - likely nvme_strom.ko is not loaded May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.510 JST [6336] LOG: HeteroDB Extra module loaded (API=20210525; NVIDIA cuFile) May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.553 JST [6336] LOG: HeteroDB License: { \"version\" : 2, \"serial_nr\" : \"HDB-TRIAL\", \"issued_at\" : \"2021-05-27\", \"expired_at\" : \"2021-06-26\", \"gpus\" : [ { \"uuid\" : \"GPU-cca38cf1-ddcc-6230-57fe-d42ad0dc3315\" }, { \"uuid\" : \"GPU-13943bfd-5b30-38f5-0473-78979c134606\" } ]} May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.553 JST [6336] LOG: PG-Strom version 2.9 built for PostgreSQL 13 May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.748 JST [6336] LOG: PG-Strom: GPU0 NVIDIA A100-PCIE-40GB (108 SMs; 1410MHz, L2 40960kB), RAM 39.59GB (5120bits, 1.16GHz), PCI-E Bar1 64GB, CC 8.0 May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.748 JST [6336] LOG: PG-Strom: GPU1 NVIDIA A100-PCIE-40GB (108 SMs; 1410MHz, L2 40960kB), RAM 39.59GB (5120bits, 1.16GHz), PCI-E Bar1 64GB, CC 8.0 May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme0n1 (INTEL SSDPEDKE020T7; 0000:5e:00.0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme1n1 (INTEL SSDPE2KX010T8; 0000:8a:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme2n1 (INTEL SSDPE2KX010T8; 0000:8b:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme4n1 (INTEL SSDPE2KX010T8; 0000:8d:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme3n1 (INTEL SSDPE2KX010T8; 0000:8c:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme6n1 (INTEL SSDPE2KX010T8; 0000:b5:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme7n1 (INTEL SSDPE2KX010T8; 0000:b6:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme5n1 (INTEL SSDPE2KX010T8; 0000:b4:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme8n1 (INTEL SSDPE2KX010T8; 0000:b7:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.909 JST [6336] LOG: redirecting log output to logging collector process May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.909 JST [6336] HINT: Future log output will appear in directory \"log\". May 28 13:09:44 kujira.heterodb.in systemd[1]: Started PostgreSQL 13 database server. Creation of PG-Strom Extension At the last, create database objects related to PG-Strom, like SQL functions. This steps are packaged using EXTENSION feature of PostgreSQL. So, all you needs to run is CREATE EXTENSION on the SQL command line. Please note that this step is needed for each new database. If you want PG-Strom is pre-configured on new database creation, you can create PG-Strom extension on the template1 database, its configuration will be copied to the new database on CREATE DATABASE command. $ psql -U postgres psql (13.3) Type \"help\" for help. postgres=# create extension pg_strom ; CREATE EXTENSION That's all for the installation. PostGIS Installation PG-Strom supports execution of a part of PostGIS functions on GPU devices. This section introduces the steps to install PostGIS module. Skip it on your demand. PostGIS module can be installed from the yum repository by PostgreSQL Global Development Group, like PostgreSQL itself. The example below shows the command to install PostGIS v3.0 built for PostgreSQL v12. Note CentOS 8 initial configuration does not enable the repository that delivers some libraries required by PostgreSQL, add --enablerepo=powertools on the dnf command to activate PowerTools repository. As of May 2021, PostGIS package built by PGDG depends on the newer version of libray built for CentOS 8 Stream, poppler and poppler-data must be manually installed. The example below downloads the packages mirroed at ftp.riken.jp . # dnf install -y https://ftp.riken.jp/Linux/centos/8-stream/AppStream/x86_64/os/Packages/poppler-20.11.0-2.el8.x86_64.rpm \\ https://ftp.riken.jp/Linux/centos/8-stream/AppStream/x86_64/os/Packages/poppler-data-0.4.9-1.el8.noarch.rpm # dnf install -y postgis31_13 --enablerepo=powertools Start PostgreSQL server after the initial setup of database cluster, then run CREATE EXTENSION command from SQL client to define geometry data type and SQL functions for geoanalytics. postgres=# CREATE EXTENSION postgis; CREATE EXTENSION","title":"Install"},{"location":"install/#installation","text":"This chapter introduces the steps to install PG-Strom.","title":"Installation"},{"location":"install/#checklist","text":"Server Hardware It requires generic x86_64 hardware that can run Linux operating system supported by CUDA Toolkit. We have no special requirement for CPU, storage and network devices. note002:HW Validation List may help you to choose the hardware. GPU Direct SQL Execution needs SSD devices which support NVMe specification, and to be installed under the same PCIe Root Complex where GPU is located on. GPU Device PG-Strom requires at least one GPU device on the system, which is supported by CUDA Toolkit, has computing capability 6.0 (Pascal generation) or later; Please check at 002: HW Validation List - List of supported GPU models for GPU selection. Operating System PG-Strom requires Linux operating system for x86_64 architecture, and its distribution supported by CUDA Toolkit. Our recommendation is Red Hat Enterprise Linux or CentOS version 8.x series. GPU Direct SQL Execution (w/ HeteroDB driver) needs Red Hat Enterprise Linux or CentOS version 7.3/8.0 or newer. GPU Direct SQL Execution (w/ NVIDIA driver; experimental) needs Red Hat Enterprise Linux or CentOS version 8.3 or newer, and Mellanox OFED (OpenFabrics Enterprise Distribution) driver. PostgreSQL PG-Strom v3.0 requires PostgreSQL v11 or later. Some of PostgreSQL APIs used by PG-Strom internally are not included in the former versions. CUDA Toolkit PG-Strom requires CUDA Toolkit version 11.4 or later. Some of CUDA Driver APIs used by PG-Strom internally are not included in the former versions. NVIDIA GPUDirect Storage (GDS) has been included in the CUDA Toolkit version 11.4 or later.","title":"Checklist"},{"location":"install/#selection-of-gpu-direct-sql-execiton-drivers","text":"Please consider the software stack for GPUDirect SQL, prior to the installation. There are two individual Linux kernel driver for GPUDirect SQL execution, as follows: HeteroDB NVME-Strom The dedicated Linux kernel module, released at 2018, supported since PG-Strom v2.0. It supports RHEL7.x/RHEL8.x, enables direct read from local NVME-SSDs to GPU using GPUDirect RDMA. NVIDIA GPUDirect Storage The general purpose driver stack, has been developed by NVIDIA, to support direct read from NVME/NVME-oF devices to GPU. At May-2021, its public beta revision has been published. PG-Strom v3.0 experimentally supports the GPUDirect Storage, that supports RHEL8.3/8.4 and Ubuntu 18.04/20.04. Some partners, including HeteroDB, expressed to support this feature. It also allows direct read from shared-filesystems or SDS(Software Defined Storage) devices over NVME-oF protocols. Here is little performance differences on the above two drivers. On the other hands, GPUDirect Storage has more variations of the supported storages and filesystems, and more mature software QA process, expect for the case of PG-Strom on RHEL7/CentOS7, we will recommend to use GPUDirect Storage driver. Tips For RHEL8/CentOS8 or Ubuntu 18.04/20.04, install the software according to the following steps. OS Installation CUDA Toolkit Installation heterodb-extra module installation No need to install heterodb-kmod MOFED Driver installation GPUDirect Storage module installation PostgreSQL installation PG-Strom installation PostGIS installation (on the demand) For RHEL7/CentOS7, install the software according to the following steps. OS Installation CUDA Toolkit Installation heterodb-extra module installation heterodb-kmod module installation No need to install MOFED Driver and GPUDirect Storage module PostgreSQL installation PG-Strom installation PostGIS installation (on the demand)","title":"Selection of GPU Direct SQL Execiton drivers"},{"location":"install/#os-installation","text":"Choose a Linux distribution which is supported by CUDA Toolkit, then install the system according to the installation process of the distribution. NVIDIA DEVELOPER ZONE introduces the list of Linux distributions which are supported by CUDA Toolkit. In case of Red Hat Enterprise Linux 8.x or CentOS 8.x series, choose \"Minimal installation\" as base environment, and also check the following add-ons. Development Tools Next to the OS installation on the server, go on the package repository configuration to install the third-party packages. If you didn't check the \"Development Tools\" at the installer, we can additionally install the software using the command below after the operating system installation. # dnf groupinstall 'Development Tools' Tip If GPU devices installed on the server are too new, it may cause system crash during system boot. In this case, you may avoid the problem by adding nouveau.modeset=0 onto the kernel boot option, to disable the inbox graphic driver.","title":"OS Installation"},{"location":"install/#disables-nouveau-driver","text":"When the nouveau driver, that is an open source compatible driver for NVIDIA GPUs, is loaded, it prevent to load the nvidia driver. In this case, reboot the operating system after a configuration to disable the nouveau driver. To disable the nouveau driver, put the following configuration onto /etc/modprobe.d/disable-nouveau.conf , and run dracut command to apply them on the boot image of Linux kernel. Then, restart the system once. # cat > /etc/modprobe.d/disable-nouveau.conf <<EOF blacklist nouveau options nouveau modeset=0 EOF # dracut -f # shutdown -r now","title":"Disables nouveau driver"},{"location":"install/#epel-release-installation","text":"Several software modules required by PG-Strom are distributed as a part of EPEL (Extra Packages for Enterprise Linux). You need to add a repository definition of EPEL packages for yum system to obtain these software. One of the package we will get from EPEL repository is DKMS (Dynamic Kernel Module Support). It is a framework to build Linux kernel module for the running Linux kernel on demand; used for NVIDIA's GPU driver and related. Linux kernel module must be rebuilt according to version-up of Linux kernel, so we don't recommend to operate the system without DKMS. epel-release package provides the repository definition of EPEL. Install the package as follows. # dnf install epel-release","title":"epel-release Installation"},{"location":"install/#heterodb-swdc-installation","text":"PG-Strom and related packages are distributed from HeteroDB Software Distribution Center . You need to add a repository definition of HeteroDB-SWDC for you system to obtain these software. heterodb-swdc package provides the repository definition of HeteroDB-SWDC. Access to the HeteroDB Software Distribution Center using Web browser, download the heterodb-swdc-1.2-1.el8.noarch.rpm on top of the file list, then install this package. Once heterodb-swdc package gets installed, yum system configuration is updated to get software from the HeteroDB-SWDC repository. Install the heterodb-swdc package as follows. # dnf install https://heterodb.github.io/swdc/yum/rhel8-noarch/heterodb-swdc-1.2-1.el8.noarch.rpm","title":"heterodb-swdc Installation"},{"location":"install/#cuda-toolkit-installation","text":"This section introduces the installation of CUDA Toolkit. If you already installed the latest CUDA Toolkit, you can skip this section. NVIDIA offers two approach to install CUDA Toolkit; one is by self-extracting archive (called runfile), and the other is by RPM packages. We recommend RPM installation because it allows simple software updates. You can download the installation package for CUDA Toolkit from NVIDIA DEVELOPER ZONE. Choose your OS, architecture, distribution and version, then choose \"rpm(network)\" edition. Once you choose the \"rpm(network)\" option, it shows a few step-by-step commands to configure the repository definition and to install the related packages, by RPM installation of CUDA Toolkit over the network. The example below is the commands for RHEL8/CentOS8. sudo dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo sudo dnf clean all sudo dnf -y module install nvidia-driver:latest-dkms sudo dnf -y install cuda Once installation completed successfully, CUDA Toolkit is deployed at /usr/local/cuda . $ ls /usr/local/cuda bin include libnsight nvml samples tools doc jre libnvvp nvvm share version.txt extras lib64 nsightee_plugins pkgconfig src Once installation gets completed, ensure the system recognizes the GPU devices correctly. nvidia-smi command shows GPU information installed on your system, as follows. $ nvidia-smi Thu May 27 15:05:50 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 465.19.01 Driver Version: 465.19.01 CUDA Version: 11.3 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA A100-PCI... Off | 00000000:8E:00.0 Off | 0 | | N/A 44C P0 49W / 250W | 0MiB / 40536MiB | 0% Default | | | | Disabled | +-------------------------------+----------------------+----------------------+ | 1 NVIDIA A100-PCI... Off | 00000000:B1:00.0 Off | 0 | | N/A 41C P0 54W / 250W | 0MiB / 40536MiB | 0% Default | | | | Disabled | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+","title":"CUDA Toolkit Installation"},{"location":"install/#heterodb-extra-modules","text":"heterodb-extra module enhances PG-Strom the following features. multi-GPUs support GPUDirect SQL GiST index support on GPU License management If you don't use the above features, only open source modules, you don't need to install the heterodb-extra module here. Please skip this section. Install the heterodb-extra package, downloaded from the SWDC, as follows. # dnf install heterodb-extra","title":"HeteroDB extra modules"},{"location":"install/#license-activation","text":"License activation is needed to use all the features of heterodb-extra , provided by HeteroDB,Inc. You can operate the system without license, but features below are restricted. Multiple GPUs support Striping of NVME-SSD drives (md-raid0) on GPUDirect SQL Support of NVME-oF device on GPUDirect SQL Support of GiST index on GPU-version of PostGIS workloads You can obtain a license file, like as a plain text below, from HeteroDB,Inc. IAgIVdKxhe+BSer3Y67jQW0+uTzYh00K6WOSH7xQ26Qcw8aeUNYqJB9YcKJTJb+QQhjmUeQpUnboNxVwLCd3HFuLXeBWMKp11/BgG0FSrkUWu/ZCtDtw0F1hEIUY7m767zAGV8y+i7BuNXGJFvRlAkxdVO3/K47ocIgoVkuzBfLvN/h9LffOydUnHPzrFHfLc0r3nNNgtyTrfvoZiXegkGM9GBTAKyq8uWu/OGonh9ybzVKOgofhDLk0rVbLohOXDhMlwDl2oMGIr83tIpCWG+BGE+TDwsJ4n71Sv6n4bi/ZBXBS498qShNHDGrbz6cNcDVBa+EuZc6HzZoF6UrljEcl= ---- VERSION:2 SERIAL_NR:HDB-TRIAL ISSUED_AT:2019-05-09 EXPIRED_AT:2019-06-08 GPU_UUID:GPU-a137b1df-53c9-197f-2801-f2dccaf9d42f Copy the license file to /etc/heterodb.license , then restart PostgreSQL. The startup log messages of PostgreSQL dumps the license information, and it tells us the license activation is successfully done. : LOG: HeteroDB Extra module loaded (API=20210525; NVIDIA cuFile) LOG: HeteroDB License: { \"version\" : 2, \"serial_nr\" : \"HDB-TRIAL\", \"issued_at\" : \"2020-11-24\", \"expired_at\" : \"2025-12-31\", \"gpus\" : [ { \"uuid\" : \"GPU-8ba149db-53d8-c5f3-0f55-97ce8cfadb28\" } ]} LOG: PG-Strom version 3.0 built for PostgreSQL 12","title":"License activation"},{"location":"install/#heterodb-kmod-installation","text":"This module should be installed, if you use GPUDirect SQL using nvme_strom kernel module by HeteroDB. If NVIDIA GPUDirect Storage is used, skip this section. heterodb-kmod package is distributed at the (https://heterodb.github.io/swdc/)[HeteroDB Software Distribution Center] as a free software. In other words, it is not an open source software. If your system already setup heterodb-swdc package, dnf install command downloads the RPM file and install the heterodb-kmod package. # dnf install heterodb-kmod You ought to be ensure existence of nvme_strom kernel module using modinfo command. # modinfo nvme_strom filename: /lib/modules/4.18.0-240.22.1.el8_3.x86_64/extra/nvme_strom.ko.xz version: 2.9-1.el8 license: BSD description: SSD-to-GPU Direct SQL Module author: KaiGai Kohei <kaigai@heterodbcom> rhelversion: 8.3 depends: name: nvme_strom vermagic: 4.18.0-240.22.1.el8_3.x86_64 SMP mod_unload modversions parm: verbose:Enables debug messages (1=on, 2=verbose) (int) parm: stat_enabled:Enables run-time statistics (int) parm: p2p_dma_max_depth:Max number of concurrent P2P DMA requests per NVME device parm: p2p_dma_max_unitsz:Max length of single DMA request in kB parm: fast_ssd_mode:Use SSD2GPU Direct even if clean page caches exist (int) parm: license:License validation status NVME-Strom Linux kernel module has some parameters. Parameter Type Default Description verbose int 0 Enables detailed debug output stat_enabled int 1 Enables statistics using nvme_stat command fast_ssd_mode int 0 Operating mode for fast NVME-SSD p2p_dma_max_depth int 1024 Maximum number of asynchronous P2P DMA request can be enqueued on the I/O-queue of NVME device p2p_dma_max_unitsz int 256 Maximum length of data blocks, in kB, to be read by a single P2P DMA request at once license string -1 Shows the license expired date, if any. Note Here is an extra explanation for fast_ssd_mode parameter. When NVME-Strom Linux kernel module get a request for GPUDirect SQL data transfer, first of all, it checks whether the required data blocks are caches on page-caches of operating system. If fast_ssd_mode is 0 , NVME-Strom once writes back page caches of the required data blocks to the userspace buffer of the caller, then indicates application to invoke normal host-->device data transfer by CUDA API. It is suitable for non-fast NVME-SSDs such as PCIe x4 grade. On the other hands, GPUDirect data transfer may be faster, if you use PCIe x8 grade fast NVME-SSD or use multiple SSDs in striping mode, than normal host-->device data transfer after the buffer copy. If fast_ssd_mode is not 0 , NVME-Strom kicks GPUDirect SQL data transfer regardless of the page cache state. However, it shall never kicks GPUDirect data transfer if page cache is dirty. Note Here is an extra explanation for p2p_dma_max_depth parameter. NVME-Strom Linux kernel module makes DMA requests for GPUDirect SQL data transfer, then enqueues them to I/O-queue of the source NVME devices. When asynchronous DMA requests are enqueued more than the capacity of NVME devices, latency of individual DMA requests become terrible because NVME-SSD controler processes the DMA requests in order of arrival. (On the other hands, it maximizes the throughput because NVME-SSD controler receives DMA requests continuously.) If turn-around time of the DMA requests are too large, it may be wrongly considered as errors, then can lead timeout of I/O request and return an error status. Thus, it makes no sense to enqueue more DMA requests to the I/O-queue more than the reasonable amount of pending requests for full usage of NVME devices. p2p_dma_max_depth parameter controls number of asynchronous P2P DMA requests that can be enqueued at once per NVME device. If application tries to enqueue DMA requests more than the configuration, the caller thread will block until completion of the running DMA. So, it enables to avoid unintentional high-load of NVME devices.","title":"heterodb-kmod Installation"},{"location":"install/#nvidia-gpudirect-storage","text":"NVIDIA GPUDirect Storage is a new feature of CUDA Toolkit version 11.4 which was released at Jun-2021. It also requires installation of OpenFabrics Enterprise Distribution (MOFED) driver by Mellanox, for direct read from local NVME-SSD drives or remove NVME-oF devices. You can obtain the MOFED driver from here . The descriptions in this section may not reflect the the latest installation instructions exactly, so please check at the official documentation by NVIDIA also.","title":"NVIDIA GPUDirect Storage"},{"location":"install/#mofed-driver-installation","text":"You can download the latest MOFED driver from here . This section introduces the example of installation from the tgz archive. Extract the tgz archive, then kick mlnxofedinstall script. Please don't forget the options to enable GPUDirect Storage features. # tar xvf MLNX_OFED_LINUX-5.3-1.0.0.1-rhel8.3-x86_64.tgz # cd MLNX_OFED_LINUX-5.3-1.0.0.1-rhel8.3-x86_64 # ./mlnxofedinstall --with-nvmf --with-nfsrdma --enable-gds --add-kernel-support # dracut -f During the build and installation of MOFED drivers, the installer may require additional packages. If your setup follows the document exactly, the following packages shall be required, so please install them using dnf command. createrepo kernel-rpm-macros python36-devel pciutils python36 lsof kernel-modules-extra tcsh tcl tk gcc-gfortran Once MOFED drivers got installed, it should replace several INBOX drivers like nvme driver. For example, the command below shows the /lib/modules/<KERNEL_VERSION>/extra/mlnx-nvme/host/nvme-rdma.ko that is additionally installed, instead of the INBOX nvme-rdma ( /lib/modules/<KERNEL_VERSION>/kernel/drivers/nvme/host/nvme-rdma.ko.xz ). # modinfo nvme-rdma filename: /lib/modules/4.18.0-240.22.1.el8_3.x86_64/extra/mlnx-nvme/host/nvme-rdma.ko license: GPL v2 rhelversion: 8.3 srcversion: 49FD1FC7CCB178E4D859F29 depends: mlx_compat,rdma_cm,ib_core,nvme-core,nvme-fabrics name: nvme_rdma vermagic: 4.18.0-240.22.1.el8_3.x86_64 SMP mod_unload modversions parm: register_always:Use memory registration even for contiguous memory regions (bool) Then, shutdown the system and restart, to replace the kernel modules already loaded (like nvme ). Please don't forget to run dracut -f after completion of the mlnxofedinstall script.","title":"MOFED Driver Installation"},{"location":"install/#gpudirect-storage-installation","text":"Next, let's install the GPUDirect Storage software stack. # dnf install nvidia-gds Once the above installation is completed, gdscheck command allows to check the status of GPUDirect Storage. By the above installation process, NVME (local NVME-SSD) and NVME-oF (remove devices) should be Supported . # /usr/local/cuda/gds/tools/gdscheck -p GDS release version: 1.0.0.82 nvidia_fs version: 2.7 libcufile version: 2.4 ============ ENVIRONMENT: ============ ===================== DRIVER CONFIGURATION: ===================== NVMe : Supported NVMeOF : Supported SCSI : Unsupported ScaleFlux CSD : Unsupported NVMesh : Unsupported DDN EXAScaler : Unsupported IBM Spectrum Scale : Unsupported NFS : Unsupported WekaFS : Unsupported Userspace RDMA : Unsupported --Mellanox PeerDirect : Enabled --rdma library : Not Loaded (libcufile_rdma.so) --rdma devices : Not configured --rdma_device_status : Up: 0 Down: 0 ===================== CUFILE CONFIGURATION: ===================== properties.use_compat_mode : true properties.gds_rdma_write_support : true properties.use_poll_mode : false properties.poll_mode_max_size_kb : 4 properties.max_batch_io_timeout_msecs : 5 properties.max_direct_io_size_kb : 16384 properties.max_device_cache_size_kb : 131072 properties.max_device_pinned_mem_size_kb : 33554432 properties.posix_pool_slab_size_kb : 4 1024 16384 properties.posix_pool_slab_count : 128 64 32 properties.rdma_peer_affinity_policy : RoundRobin properties.rdma_dynamic_routing : 0 fs.generic.posix_unaligned_writes : false fs.lustre.posix_gds_min_kb: 0 fs.weka.rdma_write_support: false profile.nvtx : false profile.cufile_stats : 0 miscellaneous.api_check_aggressive : false ========= GPU INFO: ========= GPU index 0 NVIDIA A100-PCIE-40GB bar:1 bar size (MiB):65536 supports GDS GPU index 1 NVIDIA A100-PCIE-40GB bar:1 bar size (MiB):65536 supports GDS ============== PLATFORM INFO: ============== IOMMU: disabled Platform verification succeeded Tips Additional configuration for RAID volume For data reading from software RAID (md-raid0) volumes by GPUDirect Storage, the following line must be added to the /lib/udev/rules.d/63-md-raid-arrays.rules configuration file. IMPORT{\u200bprogram}=\"/usr/sbin/mdadm --detail --export $devnode\" Then reboot the system to ensure the new configuration. See NVIDIA GPUDirect Storage Installation and Troubleshooting Guide for the details.","title":"GPUDirect Storage Installation"},{"location":"install/#postgresql-installation","text":"This section introduces PostgreSQL installation with RPM. We don't introduce the installation steps from the source because there are many documents for this approach, and there are also various options for the ./configure script. PostgreSQL is also distributed in the packages of Linux distributions, however, it is not the latest one, and often older than the version which supports PG-Strom. For example, Red Hat Enterprise Linux 7.x or CentOS 7.x distributes PostgreSQL v9.2.x series. This version had been EOL by the PostgreSQL community. PostgreSQL Global Development Group provides yum repository to distribute the latest PostgreSQL and related packages. Like the configuration of EPEL, you can install a small package to set up yum repository, then install PostgreSQL and related software. Here is the list of yum repository definition: http://yum.postgresql.org/repopackages.php . Repository definitions are per PostgreSQL major version and Linux distribution. You need to choose the one for your Linux distribution, and for PostgreSQL v11 or later. You can install PostgreSQL as following steps: Installation of yum repository definition. Disables the distribution's default PostgreSQL module Only for RHEL8/CentOS8 series Installation of PostgreSQL packages. # dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm # dnf -y module disable postgresql # dnf install -y postgresql13-devel postgresql13-server Note On the Red Hat Enterprise Linux 8 and CentOS 8, the package name postgresql conflicts to the default one at the distribution, thus, unable to install the packages from PGDG. So, disable the postgresql module by the distribution, using dnf -y module disable postgresql . For the Ret Hat Enterprise Linux 7 and CentOS 7, no need to disable the module because the packages provided by PGDG are identified by the major version. The RPM packages provided by PostgreSQL Global Development Group installs software under the /usr/pgsql-<version> directory, so you may pay attention whether the PATH environment variable is configured appropriately. postgresql-alternative package set up symbolic links to the related commands under /usr/local/bin , so allows to simplify the operations. Also, it enables to switch target version using alternatives command even if multiple version of PostgreSQL. # dnf install postgresql-alternatives","title":"PostgreSQL Installation"},{"location":"install/#pg-strom-installation","text":"","title":"PG-Strom Installation"},{"location":"install/#rpm-installation","text":"PG-Strom and related packages are distributed from HeteroDB Software Distribution Center . If you repository definition has been added, not many tasks are needed. We provide individual RPM packages of PG-Strom for each PostgreSQL major version. pg_strom-PG12 package is built for PostgreSQL v12, and pg_strom-PG13 is also built for PostgreSQL v13. It is a restriction due to binary compatibility of extension modules for PostgreSQL. # dnf install -y pg_strom-PG13 That's all for package installation.","title":"RPM Installation"},{"location":"install/#installation-from-the-source","text":"For developers, we also introduces the steps to build and install PG-Strom from the source code.","title":"Installation from the source"},{"location":"install/#getting-the-source-code","text":"Like RPM packages, you can download tarball of the source code from HeteroDB Software Distribution Center . On the other hands, here is a certain time-lags to release the tarball, it may be preferable to checkout the master branch of PG-Strom on GitHub to use the latest development branch. $ git clone https://github.com/heterodb/pg-strom.git Cloning into 'pg-strom'... remote: Counting objects: 13797, done. remote: Compressing objects: 100% (215/215), done. remote: Total 13797 (delta 208), reused 339 (delta 167), pack-reused 13400 Receiving objects: 100% (13797/13797), 11.81 MiB | 1.76 MiB/s, done. Resolving deltas: 100% (10504/10504), done.","title":"Getting the source code"},{"location":"install/#building-the-pg-strom","text":"Configuration to build PG-Strom must match to the target PostgreSQL strictly. For example, if a particular strcut has inconsistent layout by the configuration at build, it may lead problematic bugs; not easy to find out. Thus, not to have inconsistency, PG-Strom does not have own configure script, but references the build configuration of PostgreSQL using pg_config command. If PATH environment variable is set to the pg_config command of the target PostgreSQL, run make and make install . Elsewhere, give PG_CONFIG=... parameter on make command to tell the full path of the pg_config command. $ cd pg-strom $ make PG_CONFIG=/usr/pgsql-13/bin/pg_config $ sudo make install PG_CONFIG=/usr/pgsql-13/bin/pg_config","title":"Building the PG-Strom"},{"location":"install/#post-installation-setup","text":"","title":"Post Installation Setup"},{"location":"install/#creation-of-database-cluster","text":"Database cluster is not constructed yet, run initdb command to set up initial database of PostgreSQL. The default path of the database cluster on RPM installation is /var/lib/pgsql/<version number>/data . If you install postgresql-alternatives package, this default path can be referenced by /var/lib/pgdata regardless of the PostgreSQL version. # su - postgres $ initdb -D /var/lib/pgdata/ The files belonging to this database system will be owned by user \"postgres\". This user must also own the server process. The database cluster will be initialized with locale \"en_US.UTF-8\". The default database encoding has accordingly been set to \"UTF8\". The default text search configuration will be set to \"english\". Data page checksums are disabled. fixing permissions on existing directory /var/lib/pgdata ... ok creating subdirectories ... ok selecting dynamic shared memory implementation ... posix selecting default max_connections ... 100 selecting default shared_buffers ... 128MB selecting default time zone ... Asia/Tokyo creating configuration files ... ok running bootstrap script ... ok performing post-bootstrap initialization ... ok syncing data to disk ... ok initdb: warning: enabling \"trust\" authentication for local connections You can change this by editing pg_hba.conf or using the option -A, or --auth-local and --auth-host, the next time you run initdb. Success. You can now start the database server using: pg_ctl -D /var/lib/pgdata/ -l logfile start","title":"Creation of database cluster"},{"location":"install/#setup-postgresqlconf","text":"Next, edit postgresql.conf which is a configuration file of PostgreSQL. The parameters below should be edited at least to work PG-Strom. Investigate other parameters according to usage of the system and expected workloads. shared_preload_libraries PG-Strom module must be loaded on startup of the postmaster process by the shared_preload_libraries . Unable to load it on demand. Therefore, you must add the configuration below. shared_preload_libraries = '$libdir/pg_strom' max_worker_processes PG-Strom internally uses several background workers, so the default configuration (= 8) is too small for other usage. So, we recommand to expand the variable for a certain margin. max_worker_processes = 100 shared_buffers Although it depends on the workloads, the initial configuration of shared_buffers is too small for the data size where PG-Strom tries to work, thus storage workloads restricts the entire performance, and may be unable to work GPU efficiently. So, we recommend to expand the variable for a certain margin. shared_buffers = 10GB Please consider to apply SSD-to-GPU Direct SQL Execution to process larger than system's physical RAM size. work_mem Although it depends on the workloads, the initial configuration of work_mem is too small to choose the optimal query execution plan on analytic queries. An typical example is, disk-based merge sort may be chosen instead of the in-memory quick-sorting. So, we recommend to expand the variable for a certain margin. work_mem = 1GB","title":"Setup postgresql.conf"},{"location":"install/#expand-os-resource-limits","text":"GPU Direct SQL especially tries to open many files simultaneously, so resource limit for number of file descriptors per process should be expanded. Also, we recommend not to limit core file size to generate core dump of PostgreSQL certainly on system crash. If PostgreSQL service is launched by systemd, you can put the configurations of resource limit at /etc/systemd/system/postgresql-XX.service.d/pg_strom.conf . RPM installation setups the configuration below by the default. It comments out configuration to the environment variable CUDA_ENABLE_COREDUMP_ON_EXCEPTION . This is a developer option that enables to generate GPU's core dump on any CUDA/GPU level errors, if enabled. See CUDA-GDB:GPU core dump support for more details. [Service] LimitNOFILE=65536 LimitCORE=infinity #Environment=CUDA_ENABLE_COREDUMP_ON_EXCEPTION=1","title":"Expand OS resource limits"},{"location":"install/#start-postgresql","text":"Start PostgreSQL service. If PG-Strom is set up appropriately, it writes out log message which shows PG-Strom recognized GPU devices. The example below recognized two NVIDIA A100 (PCIE; 40GB), and displays the closest GPU identifier foe each NVME-SSD drive. # systemctl start postgresql-13 # journalctl -u postgresql-13 -- Logs begin at Thu 2021-05-27 17:02:03 JST, end at Fri 2021-05-28 13:26:35 JST. -- May 28 13:09:33 kujira.heterodb.in systemd[1]: Starting PostgreSQL 13 database server... May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.500 JST [6336] LOG: NVRTC 11.3 is successfully loaded. May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.510 JST [6336] LOG: failed on open('/proc/nvme-strom'): No such file or directory - likely nvme_strom.ko is not loaded May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.510 JST [6336] LOG: HeteroDB Extra module loaded (API=20210525; NVIDIA cuFile) May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.553 JST [6336] LOG: HeteroDB License: { \"version\" : 2, \"serial_nr\" : \"HDB-TRIAL\", \"issued_at\" : \"2021-05-27\", \"expired_at\" : \"2021-06-26\", \"gpus\" : [ { \"uuid\" : \"GPU-cca38cf1-ddcc-6230-57fe-d42ad0dc3315\" }, { \"uuid\" : \"GPU-13943bfd-5b30-38f5-0473-78979c134606\" } ]} May 28 13:09:33 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:33.553 JST [6336] LOG: PG-Strom version 2.9 built for PostgreSQL 13 May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.748 JST [6336] LOG: PG-Strom: GPU0 NVIDIA A100-PCIE-40GB (108 SMs; 1410MHz, L2 40960kB), RAM 39.59GB (5120bits, 1.16GHz), PCI-E Bar1 64GB, CC 8.0 May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.748 JST [6336] LOG: PG-Strom: GPU1 NVIDIA A100-PCIE-40GB (108 SMs; 1410MHz, L2 40960kB), RAM 39.59GB (5120bits, 1.16GHz), PCI-E Bar1 64GB, CC 8.0 May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme0n1 (INTEL SSDPEDKE020T7; 0000:5e:00.0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme1n1 (INTEL SSDPE2KX010T8; 0000:8a:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme2n1 (INTEL SSDPE2KX010T8; 0000:8b:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme4n1 (INTEL SSDPE2KX010T8; 0000:8d:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme3n1 (INTEL SSDPE2KX010T8; 0000:8c:00.0 --> GPU0) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme6n1 (INTEL SSDPE2KX010T8; 0000:b5:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme7n1 (INTEL SSDPE2KX010T8; 0000:b6:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme5n1 (INTEL SSDPE2KX010T8; 0000:b4:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.755 JST [6336] LOG: - nvme8n1 (INTEL SSDPE2KX010T8; 0000:b7:00.0 --> GPU1) May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.909 JST [6336] LOG: redirecting log output to logging collector process May 28 13:09:43 kujira.heterodb.in postmaster[6336]: 2021-05-28 13:09:43.909 JST [6336] HINT: Future log output will appear in directory \"log\". May 28 13:09:44 kujira.heterodb.in systemd[1]: Started PostgreSQL 13 database server.","title":"Start PostgreSQL"},{"location":"install/#creation-of-pg-strom-extension","text":"At the last, create database objects related to PG-Strom, like SQL functions. This steps are packaged using EXTENSION feature of PostgreSQL. So, all you needs to run is CREATE EXTENSION on the SQL command line. Please note that this step is needed for each new database. If you want PG-Strom is pre-configured on new database creation, you can create PG-Strom extension on the template1 database, its configuration will be copied to the new database on CREATE DATABASE command. $ psql -U postgres psql (13.3) Type \"help\" for help. postgres=# create extension pg_strom ; CREATE EXTENSION That's all for the installation.","title":"Creation of PG-Strom Extension"},{"location":"install/#postgis-installation","text":"PG-Strom supports execution of a part of PostGIS functions on GPU devices. This section introduces the steps to install PostGIS module. Skip it on your demand. PostGIS module can be installed from the yum repository by PostgreSQL Global Development Group, like PostgreSQL itself. The example below shows the command to install PostGIS v3.0 built for PostgreSQL v12. Note CentOS 8 initial configuration does not enable the repository that delivers some libraries required by PostgreSQL, add --enablerepo=powertools on the dnf command to activate PowerTools repository. As of May 2021, PostGIS package built by PGDG depends on the newer version of libray built for CentOS 8 Stream, poppler and poppler-data must be manually installed. The example below downloads the packages mirroed at ftp.riken.jp . # dnf install -y https://ftp.riken.jp/Linux/centos/8-stream/AppStream/x86_64/os/Packages/poppler-20.11.0-2.el8.x86_64.rpm \\ https://ftp.riken.jp/Linux/centos/8-stream/AppStream/x86_64/os/Packages/poppler-data-0.4.9-1.el8.noarch.rpm # dnf install -y postgis31_13 --enablerepo=powertools Start PostgreSQL server after the initial setup of database cluster, then run CREATE EXTENSION command from SQL client to define geometry data type and SQL functions for geoanalytics. postgres=# CREATE EXTENSION postgis; CREATE EXTENSION","title":"PostGIS Installation"},{"location":"operations/","text":"Basic operations Confirmation of GPU off-loading You can use EXPLAIN command to check whether query is executed on GPU device or not. A query is internally split into multiple elements and executed, and PG-Strom is capable to run SCAN, JOIN and GROUP BY in parallel on GPU device. If you can find out GpuScan, GpuJoin or GpuPreAgg was displayed instead of the standard operations by PostgreSQL, it means the query is partially executed on GPU device. Below is an example of EXPLAIN command output. postgres=# EXPLAIN SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 NATURAL JOIN t2 GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=989186.82..989190.94 rows=27 width=20) Group Key: t0.cat -> Sort (cost=989186.82..989187.29 rows=189 width=44) Sort Key: t0.cat -> Custom Scan (GpuPreAgg) (cost=989175.89..989179.67 rows=189 width=44) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) Combined GpuJoin: enabled -> Custom Scan (GpuJoin) on t0 (cost=14744.40..875804.46 rows=99996736 width=12) GPU Projection: t0.cat, t1.ax Outer Scan: t0 (cost=0.00..1833360.36 rows=99996736 width=12) Depth 1: GpuHashJoin (nrows 99996736...99996736) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size: 10.39MB) Depth 2: GpuHashJoin (nrows 99996736...99996736) HashKeys: t0.bid JoinQuals: (t0.bid = t2.bid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) -> Seq Scan on t2 (cost=0.00..1935.00 rows=100000 width=4) (21 rows) You can notice some unusual query execution plans. GpuJoin and GpuPreAgg are implemented on the CustomScan mechanism. In this example, GpuJoin runs JOIN operation on t0 , t1 and t1 , then GpuPreAgg which receives the result of GpuJoin runs GROUP BY operation by the cat column on GPU device. PG-Strom interacts with the query optimizer during PostgreSQL is building a query execution plan, and it offers alternative query execution plan with estimated cost for PostgreSQL's optimizer, if any of SCAN, JOIN, or GROUP BY are executable on GPU device. This estimated cost is better than other query execution plans that run on CPU, it chooses the alternative execution plan that shall run on GPU device. For GPU execution, it requires operators, functions and data types in use must be supported by PG-Strom. It supports numeric types like int or float , date and time types like date or timestamp , variable length string like text and so on. It also supports arithmetic operations, comparison operators and many built-in operators. See References for the detailed list. CPU+GPU Hybrid Parallel PG-Strom also supports PostgreSQL's CPU parallel execution. In the CPU parallel execution mode, Gather node launches several background worker processes, then it gathers the result of \"partial\" execution by individual background workers. CustomScan execution plan provided by PG-Strom, like GpuJoin or GpuPreAgg, support execution at the background workers. They process their partial task using GPU individually. A CPU core usually needs much more time to set up buffer to supply data for GPU than execution of SQL workloads on GPU, so hybrid usage of CPU and GPU parallel can expect higher performance. On the other hands, each process creates CUDA context that is required to communicate GPU and consumes a certain amount of GPU resources, so higher parallelism on CPU-side is not always better. Look at the query execution plan below. Execution plan tree under the Gather is executable on background worker process. It scans t0 table which has 100million rows using four background worker processes and the coordinator process, in other words, 20million rows are handled per process by GpuJoin and GpuPreAgg, then its results are merged at Gather node. # EXPLAIN SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 GROUP by cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=955705.47..955720.93 rows=27 width=20) Group Key: t0.cat -> Sort (cost=955705.47..955707.36 rows=756 width=44) Sort Key: t0.cat -> Gather (cost=955589.95..955669.33 rows=756 width=44) Workers Planned: 4 -> Parallel Custom Scan (GpuPreAgg) (cost=954589.95..954593.73 rows=189 width=44) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on t0 (cost=27682.82..841218.52 rows=99996736 width=12) GPU Projection: t0.cat, t1.ax Outer Scan: t0 (cost=0.00..1083384.84 rows=24999184 width=8) Depth 1: GpuHashJoin (nrows 24999184...99996736) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size: 10.39MB) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) (18 rows) Pullup underlying plans PG-Strom can run SCAN, JOIN and GROUP BY workloads on GPU, however, it does not work with best performance if these custom execution plan simply replace the standard operations at PostgreSQL. An example of problematic scenario is that SCAN once writes back its result data set to the host buffer then send the same data into GPU again to execute JOIN. Once again, JOIN results are written back and send to GPU to execute GROUP BY. It causes data ping-pong between CPU and GPU. To avoid such inefficient jobs, PG-Strom has a special mode which pulls up its sub-plan to execute a bunch of jobs in a single GPU kernel invocation. Combination of the operations blow can cause pull-up of sub-plans. SCAN + JOIN SCAN + GROUP BY SCAN + JOIN + GROUP BY The execution plan example below never pulls up the sub-plans. GpuJoin receives the result of GpuScan, then its results are passed to GpuPreAgg to generate the final results. # EXPLAIN SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 WHERE aid < bid GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=1239991.03..1239995.15 rows=27 width=20) Group Key: t0.cat -> Sort (cost=1239991.03..1239991.50 rows=189 width=44) Sort Key: t0.cat -> Custom Scan (GpuPreAgg) (cost=1239980.10..1239983.88 rows=189 width=44) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) -> Custom Scan (GpuJoin) (cost=50776.43..1199522.96 rows=33332245 width=12) GPU Projection: t0.cat, t1.ax Depth 1: GpuHashJoin (nrows 33332245...33332245) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size: 10.39MB) -> Custom Scan (GpuScan) on t0 (cost=12634.49..1187710.85 rows=33332245 width=8) GPU Projection: cat, aid GPU Filter: (aid < bid) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) (18 rows) This example causes data ping-pong between GPU and host buffers for each execution stage, so not efficient and less performance. On the other hands, the query execution plan below pulls up sub-plans. # EXPLAIN ANALYZE SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 WHERE aid < bid GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=903669.50..903673.62 rows=27 width=20) (actual time=7761.630..7761.644 rows=27 loops=1) Group Key: t0.cat -> Sort (cost=903669.50..903669.97 rows=189 width=44) (actual time=7761.621..7761.626 rows=27 loops=1) Sort Key: t0.cat Sort Method: quicksort Memory: 28kB -> Custom Scan (GpuPreAgg) (cost=903658.57..903662.35 rows=189 width=44) (actual time=7761.531..7761.540 rows=27 loops=1) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) Combined GpuJoin: enabled -> Custom Scan (GpuJoin) on t0 (cost=12483.41..863201.43 rows=33332245 width=12) (never executed) GPU Projection: t0.cat, t1.ax Outer Scan: t0 (cost=12634.49..1187710.85 rows=33332245 width=8) (actual time=59.623..5557.052 rows=100000000 loops=1) Outer Scan Filter: (aid < bid) Rows Removed by Outer Scan Filter: 50002874 Depth 1: GpuHashJoin (plan nrows: 33332245...33332245, actual nrows: 49997126...49997126) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size plan: 10.39MB, exec: 64.00MB) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) (actual time=0.013..15.303 rows=100000 loops=1) Planning time: 0.506 ms Execution time: 8495.391 ms (21 rows) You may notice that SCAN on the table t0 is embedded into GpuJoin, and GpuScan gets vanished. It means GpuJoin pulls up the underlying GpuScan, then combined GPU kernel function is also responsible for evaluation of the supplied WHERE-clause. In addition, here is a strange output in EXPLAIN ANALYZE result - it displays (never executed) for GpuJoin. It means GpuJoin is never executed during the query execution, and it is right. GpuPreAgg pulls up the underlying GpuJoin, then its combined GPU kernel function runs JOIN and GROUP BY. The pg_strom.pullup_outer_scan parameter controls whether SCAN is pulled up, and the pg_strom.pullup_outer_join parameter also controls whether JOIN is pulled up. Both parameters are configured to on . Usually, no need to disable them, however, you can use the parameters to identify the problems on system troubles. Knowledge base We publish several articles, just called \"notes\", on the project wiki-site of PG-Strom. https://github.com/heterodb/pg-strom/wiki","title":"Basic Operations"},{"location":"operations/#basic-operations","text":"","title":"Basic operations"},{"location":"operations/#confirmation-of-gpu-off-loading","text":"You can use EXPLAIN command to check whether query is executed on GPU device or not. A query is internally split into multiple elements and executed, and PG-Strom is capable to run SCAN, JOIN and GROUP BY in parallel on GPU device. If you can find out GpuScan, GpuJoin or GpuPreAgg was displayed instead of the standard operations by PostgreSQL, it means the query is partially executed on GPU device. Below is an example of EXPLAIN command output. postgres=# EXPLAIN SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 NATURAL JOIN t2 GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=989186.82..989190.94 rows=27 width=20) Group Key: t0.cat -> Sort (cost=989186.82..989187.29 rows=189 width=44) Sort Key: t0.cat -> Custom Scan (GpuPreAgg) (cost=989175.89..989179.67 rows=189 width=44) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) Combined GpuJoin: enabled -> Custom Scan (GpuJoin) on t0 (cost=14744.40..875804.46 rows=99996736 width=12) GPU Projection: t0.cat, t1.ax Outer Scan: t0 (cost=0.00..1833360.36 rows=99996736 width=12) Depth 1: GpuHashJoin (nrows 99996736...99996736) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size: 10.39MB) Depth 2: GpuHashJoin (nrows 99996736...99996736) HashKeys: t0.bid JoinQuals: (t0.bid = t2.bid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) -> Seq Scan on t2 (cost=0.00..1935.00 rows=100000 width=4) (21 rows) You can notice some unusual query execution plans. GpuJoin and GpuPreAgg are implemented on the CustomScan mechanism. In this example, GpuJoin runs JOIN operation on t0 , t1 and t1 , then GpuPreAgg which receives the result of GpuJoin runs GROUP BY operation by the cat column on GPU device. PG-Strom interacts with the query optimizer during PostgreSQL is building a query execution plan, and it offers alternative query execution plan with estimated cost for PostgreSQL's optimizer, if any of SCAN, JOIN, or GROUP BY are executable on GPU device. This estimated cost is better than other query execution plans that run on CPU, it chooses the alternative execution plan that shall run on GPU device. For GPU execution, it requires operators, functions and data types in use must be supported by PG-Strom. It supports numeric types like int or float , date and time types like date or timestamp , variable length string like text and so on. It also supports arithmetic operations, comparison operators and many built-in operators. See References for the detailed list.","title":"Confirmation of GPU off-loading"},{"location":"operations/#cpugpu-hybrid-parallel","text":"PG-Strom also supports PostgreSQL's CPU parallel execution. In the CPU parallel execution mode, Gather node launches several background worker processes, then it gathers the result of \"partial\" execution by individual background workers. CustomScan execution plan provided by PG-Strom, like GpuJoin or GpuPreAgg, support execution at the background workers. They process their partial task using GPU individually. A CPU core usually needs much more time to set up buffer to supply data for GPU than execution of SQL workloads on GPU, so hybrid usage of CPU and GPU parallel can expect higher performance. On the other hands, each process creates CUDA context that is required to communicate GPU and consumes a certain amount of GPU resources, so higher parallelism on CPU-side is not always better. Look at the query execution plan below. Execution plan tree under the Gather is executable on background worker process. It scans t0 table which has 100million rows using four background worker processes and the coordinator process, in other words, 20million rows are handled per process by GpuJoin and GpuPreAgg, then its results are merged at Gather node. # EXPLAIN SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 GROUP by cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=955705.47..955720.93 rows=27 width=20) Group Key: t0.cat -> Sort (cost=955705.47..955707.36 rows=756 width=44) Sort Key: t0.cat -> Gather (cost=955589.95..955669.33 rows=756 width=44) Workers Planned: 4 -> Parallel Custom Scan (GpuPreAgg) (cost=954589.95..954593.73 rows=189 width=44) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on t0 (cost=27682.82..841218.52 rows=99996736 width=12) GPU Projection: t0.cat, t1.ax Outer Scan: t0 (cost=0.00..1083384.84 rows=24999184 width=8) Depth 1: GpuHashJoin (nrows 24999184...99996736) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size: 10.39MB) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) (18 rows)","title":"CPU+GPU Hybrid Parallel"},{"location":"operations/#pullup-underlying-plans","text":"PG-Strom can run SCAN, JOIN and GROUP BY workloads on GPU, however, it does not work with best performance if these custom execution plan simply replace the standard operations at PostgreSQL. An example of problematic scenario is that SCAN once writes back its result data set to the host buffer then send the same data into GPU again to execute JOIN. Once again, JOIN results are written back and send to GPU to execute GROUP BY. It causes data ping-pong between CPU and GPU. To avoid such inefficient jobs, PG-Strom has a special mode which pulls up its sub-plan to execute a bunch of jobs in a single GPU kernel invocation. Combination of the operations blow can cause pull-up of sub-plans. SCAN + JOIN SCAN + GROUP BY SCAN + JOIN + GROUP BY The execution plan example below never pulls up the sub-plans. GpuJoin receives the result of GpuScan, then its results are passed to GpuPreAgg to generate the final results. # EXPLAIN SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 WHERE aid < bid GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=1239991.03..1239995.15 rows=27 width=20) Group Key: t0.cat -> Sort (cost=1239991.03..1239991.50 rows=189 width=44) Sort Key: t0.cat -> Custom Scan (GpuPreAgg) (cost=1239980.10..1239983.88 rows=189 width=44) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) -> Custom Scan (GpuJoin) (cost=50776.43..1199522.96 rows=33332245 width=12) GPU Projection: t0.cat, t1.ax Depth 1: GpuHashJoin (nrows 33332245...33332245) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size: 10.39MB) -> Custom Scan (GpuScan) on t0 (cost=12634.49..1187710.85 rows=33332245 width=8) GPU Projection: cat, aid GPU Filter: (aid < bid) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) (18 rows) This example causes data ping-pong between GPU and host buffers for each execution stage, so not efficient and less performance. On the other hands, the query execution plan below pulls up sub-plans. # EXPLAIN ANALYZE SELECT cat,count(*),avg(ax) FROM t0 NATURAL JOIN t1 WHERE aid < bid GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- GroupAggregate (cost=903669.50..903673.62 rows=27 width=20) (actual time=7761.630..7761.644 rows=27 loops=1) Group Key: t0.cat -> Sort (cost=903669.50..903669.97 rows=189 width=44) (actual time=7761.621..7761.626 rows=27 loops=1) Sort Key: t0.cat Sort Method: quicksort Memory: 28kB -> Custom Scan (GpuPreAgg) (cost=903658.57..903662.35 rows=189 width=44) (actual time=7761.531..7761.540 rows=27 loops=1) Reduction: Local GPU Projection: cat, pgstrom.nrows(), pgstrom.nrows((ax IS NOT NULL)), pgstrom.psum(ax) Combined GpuJoin: enabled -> Custom Scan (GpuJoin) on t0 (cost=12483.41..863201.43 rows=33332245 width=12) (never executed) GPU Projection: t0.cat, t1.ax Outer Scan: t0 (cost=12634.49..1187710.85 rows=33332245 width=8) (actual time=59.623..5557.052 rows=100000000 loops=1) Outer Scan Filter: (aid < bid) Rows Removed by Outer Scan Filter: 50002874 Depth 1: GpuHashJoin (plan nrows: 33332245...33332245, actual nrows: 49997126...49997126) HashKeys: t0.aid JoinQuals: (t0.aid = t1.aid) KDS-Hash (size plan: 10.39MB, exec: 64.00MB) -> Seq Scan on t1 (cost=0.00..1972.85 rows=103785 width=12) (actual time=0.013..15.303 rows=100000 loops=1) Planning time: 0.506 ms Execution time: 8495.391 ms (21 rows) You may notice that SCAN on the table t0 is embedded into GpuJoin, and GpuScan gets vanished. It means GpuJoin pulls up the underlying GpuScan, then combined GPU kernel function is also responsible for evaluation of the supplied WHERE-clause. In addition, here is a strange output in EXPLAIN ANALYZE result - it displays (never executed) for GpuJoin. It means GpuJoin is never executed during the query execution, and it is right. GpuPreAgg pulls up the underlying GpuJoin, then its combined GPU kernel function runs JOIN and GROUP BY. The pg_strom.pullup_outer_scan parameter controls whether SCAN is pulled up, and the pg_strom.pullup_outer_join parameter also controls whether JOIN is pulled up. Both parameters are configured to on . Usually, no need to disable them, however, you can use the parameters to identify the problems on system troubles.","title":"Pullup underlying plans"},{"location":"operations/#knowledge-base","text":"We publish several articles, just called \"notes\", on the project wiki-site of PG-Strom. https://github.com/heterodb/pg-strom/wiki","title":"Knowledge base"},{"location":"partition/","text":"Partitioning This chapter introduces the way to use PG-Strom and the partitioning feature of PostgreSQL. Note that this chapter is only valid when PG-Strom works on PostgreSQL v11 or later . Also see PostgreSQL Document: Table Partitioning for more details of the partitioning feature of PostgreSQL. Overview PostgreSQL v10 newly support table partitioning. This mechanism splits one logically large table into physically small pieces. It is valuable because it can skip partitioned child tables which is obviously unnecessary to scan from the search qualification, and it can offer broader I/O bandwidth by physically distributed storage and so on. PostgreSQL v10 supports two kinds of them: range-partitioning and list-partitioning. Then, PostgreSQL v11 newly supports hash-partitioning and partition-wise JOINs. The diagram below shows a range-partitioning configuration with date -type key values. A record which has 2018-05-30 as key is distributed to the partition child table tbl_2018 , in the same way, a record which has 2014-03-21 is distributed to the partition child table tbl_2014 , and so on. In case when scan qualifier WHERE ymd > '2016-07-01'::date is added on scan of the partitioned table for example, it is obvious that tbl_2014 and tbl_2015 contains no records to match, therefore, PostgreSQL' optimizer constructs query execution plan which runs on only tbl_2016 , tbl_2017 and tbl_2018 then merges their results by Append node. It shall perform as if records are read from one logical table. When PG-Strom is used with table partitioning of PostgreSQL together, its optimizer may choose GpuScan to scan the individual partition child tables to be scanned, in the result of cost estimation. In this case, Append node merges the results of GpuScan . On the other hands, if query runs JOIN or GROUP BY, which can be accelerated by PG-Strom, next to the scan on partitioned table, it needs consideration from the standpoint of performance optimization. For example, in case when query scans non-partitioned table then runs JOIN with other tables and GROUP BY, under some conditions, it can handle step-step data exchange on GPU device memory. It is an optimal workload for PG-Strom due to minimized data exchange between GPU and CPU. In case when query runs corresponding workload on the partitioned table, it is problematic that Append node is injected into between the child tables scan and JOIN/GROUP BY. Under the query execution plan, the result of GpuScan must be written back to the host system, then Append merges them and send back the data to GPU to run the following GpuJoin and GpuPreAgg. It is never efficient query execution. The example below shows a query execution plan to the query which includes JOIN and GROUP BY towards the partitioned table pt by the key field ymd of date type; per year distribution. Due to the scan qualification, it omits scan on the partition child tables for 2016 or prior, in addition, a combined JOIN and GROUP BY on the pt_2017 , pt_2018 and pt_2019 shall be executed prior to the Append . # EXPLAIN SELECT cat,count(*),avg(ax) FROM pt NATURAL JOIN t1 WHERE ymd > '2017-01-01'::date GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- HashAggregate (cost=196410.07..196412.57 rows=200 width=48) Group Key: pt_2017.cat -> Gather (cost=66085.69..196389.07 rows=1200 width=72) Workers Planned: 2 -> Parallel Append (cost=65085.69..195269.07 rows=600 width=72) -> Parallel Custom Scan (GpuPreAgg) (cost=65085.69..65089.69 rows=200 width=72) Reduction: Local Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on pt_2017 (cost=32296.64..74474.20 rows=1050772 width=40) Outer Scan: pt_2017 (cost=28540.80..66891.11 rows=1050772 width=36) Outer Scan Filter: (ymd > '2017-01-01'::date) Depth 1: GpuHashJoin (nrows 1050772...2521854) HashKeys: pt_2017.aid JoinQuals: (pt_2017.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) -> Parallel Custom Scan (GpuPreAgg) (cost=65078.35..65082.35 rows=200 width=72) Reduction: Local Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on pt_2018 (cost=32296.65..74465.75 rows=1050649 width=40) Outer Scan: pt_2018 (cost=28540.81..66883.43 rows=1050649 width=36) Outer Scan Filter: (ymd > '2017-01-01'::date) Depth 1: GpuHashJoin (nrows 1050649...2521557) HashKeys: pt_2018.aid JoinQuals: (pt_2018.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) -> Parallel Custom Scan (GpuPreAgg) (cost=65093.03..65097.03 rows=200 width=72) Reduction: Local Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on pt_2019 (cost=32296.65..74482.64 rows=1050896 width=40) Outer Scan: pt_2019 (cost=28540.80..66898.79 rows=1050896 width=36) Outer Scan Filter: (ymd > '2017-01-01'::date) Depth 1: GpuHashJoin (nrows 1050896...2522151) HashKeys: pt_2019.aid JoinQuals: (pt_2019.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) (38 rows) Configuration and Operation By the GUC parameters below, PG-Strom enables/disables the push-down of JOIN/GROUP BY under the partition child tables. Parameter Type Default Description pg_strom.enable_partitionwise_gpujoin bool on Enables/disables whether GpuJoin is pushed down to the partition children. Available only PostgreSQL v10 or later. pg_strom.enable_partitionwise_gpupreagg bool on Enables/disables whether GpuPreAgg is pushed down to the partition children. Available only PostgreSQL v10 or later. Default of the parameters are on . Once set to off , push-down is disabled. The query execution plan is changed as follows, by EXPLAIN command for the query above section. It uses GpuScan to scan the partition child tables, however, their results are once written back to the host system, then merged by Append and moved to GPU again to process GpuJoin . postgres=# set pg_strom.enable_partitionwise_gpujoin = off; SET postgres=# set pg_strom.enable_partitionwise_gpupreagg = off; SET postgres=# EXPLAIN SELECT cat,count(*),avg(ax) FROM pt NATURAL JOIN t1 WHERE ymd > '2017-01-01'::date group by cat; QUERY PLAN -------------------------------------------------------------------------------------------------------------------------------- Finalize GroupAggregate (cost=341392.92..341399.42 rows=200 width=48) Group Key: pt.cat -> Sort (cost=341392.92..341393.92 rows=400 width=72) Sort Key: pt.cat -> Gather (cost=341333.63..341375.63 rows=400 width=72) Workers Planned: 2 -> Partial HashAggregate (cost=340333.63..340335.63 rows=200 width=72) Group Key: pt.cat -> Parallel Custom Scan (GpuJoin) (cost=283591.92..283591.92 rows=7565562 width=40) Depth 1: GpuHashJoin (nrows 3152318...7565562) HashKeys: pt.aid JoinQuals: (pt.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Append (cost=28540.80..200673.34 rows=3152318 width=36) -> Parallel Custom Scan (GpuScan) on pt_2017 (cost=28540.80..66891.11 rows=1050772 width=36) GPU Filter: (ymd > '2017-01-01'::date) -> Parallel Custom Scan (GpuScan) on pt_2018 (cost=28540.81..66883.43 rows=1050649 width=36) GPU Filter: (ymd > '2017-01-01'::date) -> Parallel Custom Scan (GpuScan) on pt_2019 (cost=28540.80..66898.79 rows=1050896 width=36) GPU Filter: (ymd > '2017-01-01'::date) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) (21 rows) Consideration for SSD/GPU location Limitations Experimental Feature It is an experimental feature to push down GpuJoin and GpuPreAgg to the partitioned child tables, so it may lead unexpected behavior or system crash. In such case, disable the feature using pg_strom.enable_partitionwise_gpujoin or pg_strom.enable_partitionwise_gpupreagg . And report your case to PG-Strom Issues .","title":"Partitioning"},{"location":"partition/#partitioning","text":"This chapter introduces the way to use PG-Strom and the partitioning feature of PostgreSQL. Note that this chapter is only valid when PG-Strom works on PostgreSQL v11 or later . Also see PostgreSQL Document: Table Partitioning for more details of the partitioning feature of PostgreSQL.","title":"Partitioning"},{"location":"partition/#overview","text":"PostgreSQL v10 newly support table partitioning. This mechanism splits one logically large table into physically small pieces. It is valuable because it can skip partitioned child tables which is obviously unnecessary to scan from the search qualification, and it can offer broader I/O bandwidth by physically distributed storage and so on. PostgreSQL v10 supports two kinds of them: range-partitioning and list-partitioning. Then, PostgreSQL v11 newly supports hash-partitioning and partition-wise JOINs. The diagram below shows a range-partitioning configuration with date -type key values. A record which has 2018-05-30 as key is distributed to the partition child table tbl_2018 , in the same way, a record which has 2014-03-21 is distributed to the partition child table tbl_2014 , and so on. In case when scan qualifier WHERE ymd > '2016-07-01'::date is added on scan of the partitioned table for example, it is obvious that tbl_2014 and tbl_2015 contains no records to match, therefore, PostgreSQL' optimizer constructs query execution plan which runs on only tbl_2016 , tbl_2017 and tbl_2018 then merges their results by Append node. It shall perform as if records are read from one logical table. When PG-Strom is used with table partitioning of PostgreSQL together, its optimizer may choose GpuScan to scan the individual partition child tables to be scanned, in the result of cost estimation. In this case, Append node merges the results of GpuScan . On the other hands, if query runs JOIN or GROUP BY, which can be accelerated by PG-Strom, next to the scan on partitioned table, it needs consideration from the standpoint of performance optimization. For example, in case when query scans non-partitioned table then runs JOIN with other tables and GROUP BY, under some conditions, it can handle step-step data exchange on GPU device memory. It is an optimal workload for PG-Strom due to minimized data exchange between GPU and CPU. In case when query runs corresponding workload on the partitioned table, it is problematic that Append node is injected into between the child tables scan and JOIN/GROUP BY. Under the query execution plan, the result of GpuScan must be written back to the host system, then Append merges them and send back the data to GPU to run the following GpuJoin and GpuPreAgg. It is never efficient query execution. The example below shows a query execution plan to the query which includes JOIN and GROUP BY towards the partitioned table pt by the key field ymd of date type; per year distribution. Due to the scan qualification, it omits scan on the partition child tables for 2016 or prior, in addition, a combined JOIN and GROUP BY on the pt_2017 , pt_2018 and pt_2019 shall be executed prior to the Append . # EXPLAIN SELECT cat,count(*),avg(ax) FROM pt NATURAL JOIN t1 WHERE ymd > '2017-01-01'::date GROUP BY cat; QUERY PLAN -------------------------------------------------------------------------------- HashAggregate (cost=196410.07..196412.57 rows=200 width=48) Group Key: pt_2017.cat -> Gather (cost=66085.69..196389.07 rows=1200 width=72) Workers Planned: 2 -> Parallel Append (cost=65085.69..195269.07 rows=600 width=72) -> Parallel Custom Scan (GpuPreAgg) (cost=65085.69..65089.69 rows=200 width=72) Reduction: Local Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on pt_2017 (cost=32296.64..74474.20 rows=1050772 width=40) Outer Scan: pt_2017 (cost=28540.80..66891.11 rows=1050772 width=36) Outer Scan Filter: (ymd > '2017-01-01'::date) Depth 1: GpuHashJoin (nrows 1050772...2521854) HashKeys: pt_2017.aid JoinQuals: (pt_2017.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) -> Parallel Custom Scan (GpuPreAgg) (cost=65078.35..65082.35 rows=200 width=72) Reduction: Local Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on pt_2018 (cost=32296.65..74465.75 rows=1050649 width=40) Outer Scan: pt_2018 (cost=28540.81..66883.43 rows=1050649 width=36) Outer Scan Filter: (ymd > '2017-01-01'::date) Depth 1: GpuHashJoin (nrows 1050649...2521557) HashKeys: pt_2018.aid JoinQuals: (pt_2018.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) -> Parallel Custom Scan (GpuPreAgg) (cost=65093.03..65097.03 rows=200 width=72) Reduction: Local Combined GpuJoin: enabled -> Parallel Custom Scan (GpuJoin) on pt_2019 (cost=32296.65..74482.64 rows=1050896 width=40) Outer Scan: pt_2019 (cost=28540.80..66898.79 rows=1050896 width=36) Outer Scan Filter: (ymd > '2017-01-01'::date) Depth 1: GpuHashJoin (nrows 1050896...2522151) HashKeys: pt_2019.aid JoinQuals: (pt_2019.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) (38 rows)","title":"Overview"},{"location":"partition/#configuration-and-operation","text":"By the GUC parameters below, PG-Strom enables/disables the push-down of JOIN/GROUP BY under the partition child tables. Parameter Type Default Description pg_strom.enable_partitionwise_gpujoin bool on Enables/disables whether GpuJoin is pushed down to the partition children. Available only PostgreSQL v10 or later. pg_strom.enable_partitionwise_gpupreagg bool on Enables/disables whether GpuPreAgg is pushed down to the partition children. Available only PostgreSQL v10 or later. Default of the parameters are on . Once set to off , push-down is disabled. The query execution plan is changed as follows, by EXPLAIN command for the query above section. It uses GpuScan to scan the partition child tables, however, their results are once written back to the host system, then merged by Append and moved to GPU again to process GpuJoin . postgres=# set pg_strom.enable_partitionwise_gpujoin = off; SET postgres=# set pg_strom.enable_partitionwise_gpupreagg = off; SET postgres=# EXPLAIN SELECT cat,count(*),avg(ax) FROM pt NATURAL JOIN t1 WHERE ymd > '2017-01-01'::date group by cat; QUERY PLAN -------------------------------------------------------------------------------------------------------------------------------- Finalize GroupAggregate (cost=341392.92..341399.42 rows=200 width=48) Group Key: pt.cat -> Sort (cost=341392.92..341393.92 rows=400 width=72) Sort Key: pt.cat -> Gather (cost=341333.63..341375.63 rows=400 width=72) Workers Planned: 2 -> Partial HashAggregate (cost=340333.63..340335.63 rows=200 width=72) Group Key: pt.cat -> Parallel Custom Scan (GpuJoin) (cost=283591.92..283591.92 rows=7565562 width=40) Depth 1: GpuHashJoin (nrows 3152318...7565562) HashKeys: pt.aid JoinQuals: (pt.aid = t1.aid) KDS-Hash (size: 10.78MB) -> Append (cost=28540.80..200673.34 rows=3152318 width=36) -> Parallel Custom Scan (GpuScan) on pt_2017 (cost=28540.80..66891.11 rows=1050772 width=36) GPU Filter: (ymd > '2017-01-01'::date) -> Parallel Custom Scan (GpuScan) on pt_2018 (cost=28540.81..66883.43 rows=1050649 width=36) GPU Filter: (ymd > '2017-01-01'::date) -> Parallel Custom Scan (GpuScan) on pt_2019 (cost=28540.80..66898.79 rows=1050896 width=36) GPU Filter: (ymd > '2017-01-01'::date) -> Seq Scan on t1 (cost=0.00..1935.00 rows=100000 width=12) (21 rows)","title":"Configuration and Operation"},{"location":"partition/#consideration-for-ssdgpu-location","text":"","title":"Consideration for SSD/GPU location"},{"location":"partition/#limitations","text":"Experimental Feature It is an experimental feature to push down GpuJoin and GpuPreAgg to the partitioned child tables, so it may lead unexpected behavior or system crash. In such case, disable the feature using pg_strom.enable_partitionwise_gpujoin or pg_strom.enable_partitionwise_gpupreagg . And report your case to PG-Strom Issues .","title":"Limitations"},{"location":"postgis/","text":"GPU-PostGIS This chapter describes GPU-PostGIS Overview PostGIS is an extension to PostgreSQL to utilize geographic information. PostGIS provides data type ( Geometry ) for handling geographic data such as points, lines, and polygons, as well as a large number of functions and operators for evaluating geographic data elements, such as distance calculation, inclusion, and intersection determination. In addition, some of the operators can search faster by the R-Tree using GiST(Generalized Search Tree) mechanism included in PostgreSQL. Since the first version was released in 2001, it has been enhanced and maintained by the developer community for over 20 years. These functions and operators provided by PostGIS are very large, over 500 in total. For this reason, PG-Strom has ported only a few relatively frequently used PostGIS functions to the GPU. For example: geometry st_point(float8 lon,float8 lat) returns a point with the given longitude and latitude as a Point of Geometry type. bool st_contains(geometry a,geometry b) determines if the geometry a contains the geometry b or not. bool st_crosses(geometry,geometry) determines if the geometries intersect each other. text st_relate(geometry,geometry) returns the relationship between geometries as a matrix representation of DE-9IM(Dimensionally Extended 9-Intersection Model) . PostGIS Usage You can use GPU-PostGIS without any configurations. PG-Strom will automatically determine if the PostGIS functions used in the query are executable on the GPU when PostGIS is installed from the package or the source code and the geometry data types and PostGIS functions are defined using the CREATE EXTENSION syntax. Please refer to the PostGIS documentaion for installation. For example, the following query uses the GPU-executable PostGIS funtion st_contains() and st_makepoint() to determine if a two-dimensional point read from the table is contained within the range of the geometry type constant 'polygon ((10 10,30 10,30 20,10 20,10 10))' . As you can see from the fact that these functions are listed as part of the \"GPU Filter:\", PG-Strom will automatically detect supported PostGIS functions and attempt to run them on the GPU as much as possible. =# explain select * from dpoints where st_contains('polygon ((10 10,30 10,30 20,10 20,10 10))', st_makepoint(x,y)); QUERY PLAN ------------------------------------------------------------------------------------------ Custom Scan (GpuScan) on dpoints (cost=1397205.10..12627630.76 rows=800 width=28) GPU Filter: st_contains('01030000000100000005000000000000000000244000000000000024400000000000003E4000000000000024400000000000003E4000000000000034400000000000002440000000000000344000000000000024400000000000002440'::geometry, st_makepoint(x, y)) GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) (3 rows) GiST Index Some of the PostGIS functions that evaluate relationships between geometries, such as st_contains() and st_crosses() , support the GiST index (R-Tree), which enables fast refinement of the search using only the CPU. GpuJoin in PG-Strom sometimes transfers not only the contents of the table but also GiST index (R-Tree) to filter the rows to be joined fast when the join condition between tables can be accelerated. This process is usually executed at a much higher parallelism level than the CPU, so a significant speedup can be expected. On the other hand, GpuScan does not use GiST index to scan a single table. This is because IndexScan filtering by CPU is often faster. The following is an example of a SQL statement to create a GiST index on city boundary data (\"geom\" column of \"giscity\" table). =# CREATE INDEX on giscity USING gist (geom); CREATE INDEX The following is an execution plan of SQL that joins municipal boundary data (\"giscity\" table) and latitude and longitude data (\"dpoints\" table) and outputs the number of latitude and longitude data (points) contained in the area expressed as polygons for each municipality. The optimizer selects GpuJoin, and GpuGiSTJoin to join \"giscity\" table with \"dpoints\" table. The \"IndexFilter:\" line shows that the filtering condition on the GiST index is (g.geom ~ st_makepoint(d.x, d.y)) and the index giscity_geom_idx will be used. The execution of PostGIS functions is a relatively \"heavy\" process even for GPU. By using GiST index, we can eliminate combinations that obviously do not match the condition and speed up the search process significantly. =# EXPLAIN SELECT pref, city, count(*) FROM giscity g, dpoints d WHERE pref = 'Tokyo' AND st_contains(g.geom,st_makepoint(d.x, d.y)) GROUP BY pref, city; QUERY PLAN ----------------------------------------------------------------------------------------------------------- GroupAggregate (cost=5700646.35..5700759.39 rows=5024 width=29) Group Key: g.n03_001, g.n03_004 -> Sort (cost=5700646.35..5700658.91 rows=5024 width=29) Sort Key: g.n03_004 -> Custom Scan (GpuPreAgg) (cost=5700274.71..5700337.51 rows=5024 width=29) Reduction: Local Combined GpuJoin: enabled GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on dpoints d (cost=638671.58..5668511.23 rows=50821573 width=21) Outer Scan: dpoints d (cost=0.00..141628.18 rows=7999618 width=16) Depth 1: GpuGiSTJoin(nrows 7999618...50821573) HeapSize: 3251.36KB IndexFilter: (g.geom ~ st_makepoint(d.x, d.y)) on giscity_geom_idx JoinQuals: st_contains(g.geom, st_makepoint(d.x, d.y)) GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) -> Seq Scan on giscity g (cost=0.00..8929.24 rows=6353 width=1883) Filter: ((pref)::text = 'Tokyo'::text) (17 rows)","title":"PostGIS"},{"location":"postgis/#gpu-postgis","text":"This chapter describes GPU-PostGIS","title":"GPU-PostGIS"},{"location":"postgis/#overview","text":"PostGIS is an extension to PostgreSQL to utilize geographic information. PostGIS provides data type ( Geometry ) for handling geographic data such as points, lines, and polygons, as well as a large number of functions and operators for evaluating geographic data elements, such as distance calculation, inclusion, and intersection determination. In addition, some of the operators can search faster by the R-Tree using GiST(Generalized Search Tree) mechanism included in PostgreSQL. Since the first version was released in 2001, it has been enhanced and maintained by the developer community for over 20 years. These functions and operators provided by PostGIS are very large, over 500 in total. For this reason, PG-Strom has ported only a few relatively frequently used PostGIS functions to the GPU. For example: geometry st_point(float8 lon,float8 lat) returns a point with the given longitude and latitude as a Point of Geometry type. bool st_contains(geometry a,geometry b) determines if the geometry a contains the geometry b or not. bool st_crosses(geometry,geometry) determines if the geometries intersect each other. text st_relate(geometry,geometry) returns the relationship between geometries as a matrix representation of DE-9IM(Dimensionally Extended 9-Intersection Model) .","title":"Overview"},{"location":"postgis/#postgis-usage","text":"You can use GPU-PostGIS without any configurations. PG-Strom will automatically determine if the PostGIS functions used in the query are executable on the GPU when PostGIS is installed from the package or the source code and the geometry data types and PostGIS functions are defined using the CREATE EXTENSION syntax. Please refer to the PostGIS documentaion for installation. For example, the following query uses the GPU-executable PostGIS funtion st_contains() and st_makepoint() to determine if a two-dimensional point read from the table is contained within the range of the geometry type constant 'polygon ((10 10,30 10,30 20,10 20,10 10))' . As you can see from the fact that these functions are listed as part of the \"GPU Filter:\", PG-Strom will automatically detect supported PostGIS functions and attempt to run them on the GPU as much as possible. =# explain select * from dpoints where st_contains('polygon ((10 10,30 10,30 20,10 20,10 10))', st_makepoint(x,y)); QUERY PLAN ------------------------------------------------------------------------------------------ Custom Scan (GpuScan) on dpoints (cost=1397205.10..12627630.76 rows=800 width=28) GPU Filter: st_contains('01030000000100000005000000000000000000244000000000000024400000000000003E4000000000000024400000000000003E4000000000000034400000000000002440000000000000344000000000000024400000000000002440'::geometry, st_makepoint(x, y)) GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) (3 rows)","title":"PostGIS Usage"},{"location":"postgis/#gist-index","text":"Some of the PostGIS functions that evaluate relationships between geometries, such as st_contains() and st_crosses() , support the GiST index (R-Tree), which enables fast refinement of the search using only the CPU. GpuJoin in PG-Strom sometimes transfers not only the contents of the table but also GiST index (R-Tree) to filter the rows to be joined fast when the join condition between tables can be accelerated. This process is usually executed at a much higher parallelism level than the CPU, so a significant speedup can be expected. On the other hand, GpuScan does not use GiST index to scan a single table. This is because IndexScan filtering by CPU is often faster. The following is an example of a SQL statement to create a GiST index on city boundary data (\"geom\" column of \"giscity\" table). =# CREATE INDEX on giscity USING gist (geom); CREATE INDEX The following is an execution plan of SQL that joins municipal boundary data (\"giscity\" table) and latitude and longitude data (\"dpoints\" table) and outputs the number of latitude and longitude data (points) contained in the area expressed as polygons for each municipality. The optimizer selects GpuJoin, and GpuGiSTJoin to join \"giscity\" table with \"dpoints\" table. The \"IndexFilter:\" line shows that the filtering condition on the GiST index is (g.geom ~ st_makepoint(d.x, d.y)) and the index giscity_geom_idx will be used. The execution of PostGIS functions is a relatively \"heavy\" process even for GPU. By using GiST index, we can eliminate combinations that obviously do not match the condition and speed up the search process significantly. =# EXPLAIN SELECT pref, city, count(*) FROM giscity g, dpoints d WHERE pref = 'Tokyo' AND st_contains(g.geom,st_makepoint(d.x, d.y)) GROUP BY pref, city; QUERY PLAN ----------------------------------------------------------------------------------------------------------- GroupAggregate (cost=5700646.35..5700759.39 rows=5024 width=29) Group Key: g.n03_001, g.n03_004 -> Sort (cost=5700646.35..5700658.91 rows=5024 width=29) Sort Key: g.n03_004 -> Custom Scan (GpuPreAgg) (cost=5700274.71..5700337.51 rows=5024 width=29) Reduction: Local Combined GpuJoin: enabled GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) -> Custom Scan (GpuJoin) on dpoints d (cost=638671.58..5668511.23 rows=50821573 width=21) Outer Scan: dpoints d (cost=0.00..141628.18 rows=7999618 width=16) Depth 1: GpuGiSTJoin(nrows 7999618...50821573) HeapSize: 3251.36KB IndexFilter: (g.geom ~ st_makepoint(d.x, d.y)) on giscity_geom_idx JoinQuals: st_contains(g.geom, st_makepoint(d.x, d.y)) GPU Preference: GPU0 (NVIDIA Tesla V100-PCIE-16GB) -> Seq Scan on giscity g (cost=0.00..8929.24 rows=6353 width=1883) Filter: ((pref)::text = 'Tokyo'::text) (17 rows)","title":"GiST Index"},{"location":"ref_devfuncs/","text":"Functions and operators This chapter introduces the functions and operators executable on GPU devices. Type cast bool <-- int4 int1 <-- int2 , int4 , int8 , float2 , float4 , float8 , numeric int2 <-- int1 , int4 , int8 , float2 , float4 , float8 , numeric int4 <-- bool , int1 , int2 , int8 , float2 , float4 , float8 , numeric int8 <-- int1 , int2 , int4 , float2 , float4 , float8 , numeric float2 <-- int1 , int2 , int4 , int8 , float4 , float8 , numeric float4 <-- int1 , int2 , int4 , int8 , float2 , float8 , numeric float8 <-- int1 , int2 , int4 , int8 , float2 , float4 , numeric numeric <-- int1 , int2 , int4 , int8 , float2 , float4 , float8 money <-- int4 , int8 , numeric date <-- timestamp , timestamptz time <-- timetz , timestamp , timestamptz timetz <-- time , timestamptz timestamp <-- date , timestamptz timestamptz <-- date , timestamp Numeric functions/operators bool COMP bool comparison operators of boolean type. COMP is any of =,<> INT COMP INT comparison operators of integer types. INT is any of int1,int2,int4,int8 . It is acceptable if left side and right side have different interger types. COMP is any of =,<>,<,<=,>=,> FP COMP FP comparison operators of floating-point types. FP is any of float2,float4,float8 . It is acceptable if left side and right side have different floating-point types. COMP is any of =,<>,<,<=,>=,> numeric COMP numeric comparison operators of numeric type. COMP is any of =,<>,<,<=,>=,> INT OP INT arithemetic operators of integer types. INT is any of int1,int2,int4,int8 . It is acceptable if left side and right side have different interger types. OP is any of +,-,*,/ FP OP FP arithemetic operators of floating-point types. FP is any of float2,float4,float8 . It is acceptable if left side and right side have different floating-point types. COMP is any of +,-,*,/ numeric OP numeric comparison operators of numeric type. OP is any of +,-,*,/ INT % INT Reminer operator. INT is any of int1,int2,int4,int8 INT & INT Bitwise AND operator. INT is any of int1,int2,int4,int8 INT | INT Bitwise OR operator. INT is any of int1,int2,int4,int8 INT # INT Bitwise XOR operator. INT is any of int1,int2,int4,int8 ~ INT Bitwise NOT operator. INT is any of int1,int2,int4,int8 INT >> int4 Right shift operator. INT is any of int1,int2,int4,int8 INT << int4 Left shift operator. INT is any of int1,int2,int4,int8 + TYPE Unary plus operator. TYPE is any of int1,int2,int4,int8,float2,float4,float8,numeric . - TYPE Unary minus operator. TYPE is any of int1,int2,int4,int8,float2,float4,float8,numeric . @ TYPE Absolute value. TYPE is any of int1,int2,int4,int8,float2,float4,float8,numeric . Mathematical functions float8 cbrt(float8) float8 dcbrt(float8) cube root| float8 ceil(float8) float8 ceiling(float8) nearest integer greater than or equal to argument float8 exp(float8) float8 dexp(float8) exponential float8 floor(float8) nearest integer less than or equal to argument float8 ln(float8) float8 dlog1(float8) natural logarithm float8 log(float8) float8 dlog10(float8) base 10 logarithm float8 pi() circumference ratio float8 power(float8,float8) float8 pow(float8,float8) float8 dpow(float8,float8) power float8 round(float8) float8 dround(float8) round to the nearest integer float8 sign(float8) sign of the argument float8 sqrt(float8) float8 dsqrt(float8) square root| float8 trunc(float8) float8 dtrunc(float8) truncate toward zero| Trigonometric functions float8 degrees(float8) radians to degrees float8 radians(float8) degrees to radians float8 acos(float8) inverse cosine float8 asin(float8) inverse sine float8 atan(float8) inverse tangent float8 atan2(float8,float8) inverse tangent of arg1 / arg2 float8 cos(float8) cosine float8 cot(float8) cotangent float8 sin(float8) sine float8 tan(float8) tangent Date and time operators date COMP date comparison operators for date type. COMP is any of =,<>,<,<=,>=,> . date COMP timestamp timestamp COMP date comparison operators for date and timestamp type. COMP is any of =,<>,<,<=,>=,> . date COMP timestamptz timestamptz COMP date comparison operators for date and timestamptz type. COMP is any of =,<>,<,<=,>=,> . time COMP time comparison operators for time type. COMP is any of =,<>,<,<=,>=,> . timetz COMP timetz comparison operators for timetz type. COMP is any of =,<>,<,<=,>=,> . timestamp COMP timestamp comparison operators for timestamp type. COMP is any of =,<>,<,<=,>=,> . timestamptz COMP timestamptz comparison operators for timestamptz type. COMP is any of =,<>,<,<=,>=,> . timestamp COMP timestamptz timestamptz COMP timestamp comparison operators for timestamp and timestamptz type. COMP is any of =,<>,<,<=,>=,> . interval COMP interval comparison operators for interval type. COMP is any of =,<>,<,<=,>=,> . date + int4 int4 + date addition operator of date type date - int4 subtraction operator of date type date - date difference between date types date + time time + date constructs a timestamp from date and time date + timetz constructs a timestamptz from date and timetz time - time difference between time types timestamp - timestamp difference between timestamp types timetz + interval timetz - interval addition or subtraction operator of timetz by interval . timestamptz + interval timestamptz - interval addition or subtraction operator of timestamptz by interval . overlaps(TYPE,TYPE,TYPE,TYPE) checks whether the 2 given time periods overlaps. TYPE is any of time,timetz,timestamp,timestamptz . extract(text FROM TYPE) retrieves subfields such as day or hour from date/time values. TYPE is any of time,timetz,timestamp,timestamptz,interval . now() current time of the transaction - interval unary minus operator of interval type interval + interval addition operator of interval type interval - interval subtraction operator of interval type Text functions/operators {text,bpchar} COMP {text,bpchar} comparison operators; COMP is any of =,<>,<,<=,>=,> Note that <,<=,>=,> operators are valid only when locale is UTF-8 or C (no locale). varchar || varchar concatenates the two strings. Both side must be varchar(n) to ensure maximum length of the result being predictible. substring(text,int4) substring(text,int4,int4) substr(text,int4) substr(text,int4,int4) extracts the substring length({text,bpchar}) length of the string {text,bpchar} [NOT] LIKE text pattern-matching according to the LIKE expression {text,bpchar} [NOT] ILIKE text case-insensitive pattern-matching according to the LIKE expression. Note that ILIKE operator is valid only when locale is UTF-8 or C (no locale). Network functions/operators macaddr COMP macaddr comparison operators; COMP is any of =,<>,<,<=,>=,> macaddr & macaddr Bitwise AND operator macaddr | macaddr Bitwise OR operator ~ macaddr Bitwise NOT operator trunc(macaddr) Set last 3 bytes to zero inet COMP inet comparison operators; COMP is any of =,<>,<,<=,>=,> inet << inet Left side is contained by right side inet <<= inet Left side is contained by or equals to right side inet >> inet Left side contains right side inet >>= inet Left side contains or is equals to right side inet && inet Left side contains or is contained by right side ~ inet Bitwise NOT operator inet & inet Bitwise AND operator inet | inet Bitwise OR operator inet + int8 addition operator inet - int8 subtraction operator inet - inet subtraction operator broadcast(inet) returns the broadcast address of the given network address family(inet) returns the family of the given network address; 4 for IPv4, and 6 for IPv6 hostmask(inet) extract host mask of the given network address masklen(inet) extract netmask length of the given network address netmask(inet) extract netmask of the given network address network(inet) extract network part of the given network address set_masklen(NETADDR,int) set netmask length of the given network address; NETADDR is either inet or cidr . inet_merge(inet,inet) the smallest network which includes both of the given networks Currency operators money COMP money comparison operators; COMP is any of =,<>,<,<=,>=,> money OP money arthmetric operators; OP is any of +,-,/ money * TYPE TYPE * money Multiply a currency with a numeric value; TYPE is any of int2,int4,float2,float4,float8 money / TYPE Division of a currency by a numeric value; TYPE is any of int2,int4,float2,float4,float8 money / money Division of currency values UUID operators uuid COMP uuid comparison operator. COMP is any of =,<>,<,<=,>=,> JSONB operators jsonb -> KEY Get a JSON object field specified by the KEY jsonb -> NUM Get a JSON array element indexed by NUM jsonb ->> KEY Get a JSON object field specified by the KEY , as text jsonb ->> NUM Get a JSON array element indexed by NUM , as text (jsonb ->> KEY)::TYPE If TYPE is any of int2,int4,int8,float4,float8,numeric , get a JSON object field specified by KEY , as numeric data type. See the note below. (jsonb ->> NUM)::TYPE If TYPE is any of int2,int4,int8,float4,float8,numeric Get a JSON array element indexed by NUM , as numeric data type. See the note below. jsonb ? KEY Check whether jsonb object contains the KEY Note When we convert a jsonb element fetched by jsonb ->> KEY operator into numerical data types like float or numeric , PostgreSQL takes 2 steps operations; an internal numerical form is printed as text first, then it is converted into numerical data type. PG-Strom optimizes the GPU code using a special device function to fetch a numerical datum from jsonb object/array, if jsonb ->> KEY operator and text-to-numeric case are continuously used. Range type functions/operators Note RANGE is any of { int4range , int8range , tsrange , tstzrange , daterange } in this section. TYPE is the element type of the RANGE which is introduced together in this section. RANGE = RANGE Both sides are equal. RANGE <> RANGE Both sides are not equal. RANGE < RANGE Left side is less than right side. RANGE <= RANGE Left side is less than or equal to right side. RANGE > RANGE Left side is greater than right side. RANGE >= RANGE Left side is greater than or equal to right side. RANGE @ RANGE The range in left side contains the range in right side. RANGE @ TYPE The range in left side contains the element in right side. RANGE <@ RANGE The range in left side is contained by the range in right side. TYPE <@ RANGE The element in left side is contained by the range in right side. RANGE && RANGE Left and right side are overlap (they have points in common). RANGE << RANGE Left side is strictly less than the right side RANGE >> RANGE Left side is strictly greater than the right side RANGE &< RANGE Any points in the left side is never greater than the right side RANGE &> RANGE Any points in the right side is never greater than the left side RANGE -|- RANGE Left side is adjacent to the right side RANGE + RANGE A union range by the left side and right side RANGE * RANGE An intersection range by the left and right side RANGE - RANGE An difference range by the left and right side lower(RANGE) lower bound of the range upper(RANGE) upper bound of the range isempty(RANGE) checks whether the range is empty lower_inc(RANGE) checks whether the lower bound is inclusive upper_inc(RANGE) checks whether the upper bound is inclusive lower_inf(RANGE) checks whether the lower bound is infinite upper_inf(RANGE) checks whether the upper bound is infinite range_merge(RANGE,RANGE) returns the smallest range which includes both of the given ranges PostGIS Functions geometry st_makepoint(float8,float8) geometry st_point(float8,float8) It makes 2-dimensional POINT geometry. geometry st_makepoint(float8,float8,float8) It makes 3-dimensional POINT geometry. geometry st_makepoint(float8,float8,float8,float8) It makes 4-dimensional POINT geometry. geometry st_setsrid(geometry,int4) It assigns SRID on the given geometry float8 st_distance(geometry,geometry) It returns the distance between geometries in float8 . bool st_dwithin(geometry,geometry,float8) It returns true if the distance between geometries is shorter than the specified threshold. It is often faster than the combination of st_distance and comparison operator. text st_relate(geometry,geometry) It checks intersection of geometries, then returns DE9-IM(Dimensionally Extended Nine-Intersection Matrix) format string. bool st_contains(geometry,geometry) It returns whether the geometry1 fully contains the geometry1. bool st_crosses(geometry,geometry) It returns whether the geometries are crossed. int4 st_linecrossingdirection(geometry,geometry) It checks how two LINESTRING geometries are crossing, or not crossing.","title":"Functions and Operators"},{"location":"ref_devfuncs/#functions-and-operators","text":"This chapter introduces the functions and operators executable on GPU devices.","title":"Functions and operators"},{"location":"ref_devfuncs/#type-cast","text":"bool <-- int4 int1 <-- int2 , int4 , int8 , float2 , float4 , float8 , numeric int2 <-- int1 , int4 , int8 , float2 , float4 , float8 , numeric int4 <-- bool , int1 , int2 , int8 , float2 , float4 , float8 , numeric int8 <-- int1 , int2 , int4 , float2 , float4 , float8 , numeric float2 <-- int1 , int2 , int4 , int8 , float4 , float8 , numeric float4 <-- int1 , int2 , int4 , int8 , float2 , float8 , numeric float8 <-- int1 , int2 , int4 , int8 , float2 , float4 , numeric numeric <-- int1 , int2 , int4 , int8 , float2 , float4 , float8 money <-- int4 , int8 , numeric date <-- timestamp , timestamptz time <-- timetz , timestamp , timestamptz timetz <-- time , timestamptz timestamp <-- date , timestamptz timestamptz <-- date , timestamp","title":"Type cast"},{"location":"ref_devfuncs/#numeric-functionsoperators","text":"bool COMP bool comparison operators of boolean type. COMP is any of =,<> INT COMP INT comparison operators of integer types. INT is any of int1,int2,int4,int8 . It is acceptable if left side and right side have different interger types. COMP is any of =,<>,<,<=,>=,> FP COMP FP comparison operators of floating-point types. FP is any of float2,float4,float8 . It is acceptable if left side and right side have different floating-point types. COMP is any of =,<>,<,<=,>=,> numeric COMP numeric comparison operators of numeric type. COMP is any of =,<>,<,<=,>=,> INT OP INT arithemetic operators of integer types. INT is any of int1,int2,int4,int8 . It is acceptable if left side and right side have different interger types. OP is any of +,-,*,/ FP OP FP arithemetic operators of floating-point types. FP is any of float2,float4,float8 . It is acceptable if left side and right side have different floating-point types. COMP is any of +,-,*,/ numeric OP numeric comparison operators of numeric type. OP is any of +,-,*,/ INT % INT Reminer operator. INT is any of int1,int2,int4,int8 INT & INT Bitwise AND operator. INT is any of int1,int2,int4,int8 INT | INT Bitwise OR operator. INT is any of int1,int2,int4,int8 INT # INT Bitwise XOR operator. INT is any of int1,int2,int4,int8 ~ INT Bitwise NOT operator. INT is any of int1,int2,int4,int8 INT >> int4 Right shift operator. INT is any of int1,int2,int4,int8 INT << int4 Left shift operator. INT is any of int1,int2,int4,int8 + TYPE Unary plus operator. TYPE is any of int1,int2,int4,int8,float2,float4,float8,numeric . - TYPE Unary minus operator. TYPE is any of int1,int2,int4,int8,float2,float4,float8,numeric . @ TYPE Absolute value. TYPE is any of int1,int2,int4,int8,float2,float4,float8,numeric .","title":"Numeric functions/operators"},{"location":"ref_devfuncs/#mathematical-functions","text":"float8 cbrt(float8) float8 dcbrt(float8) cube root| float8 ceil(float8) float8 ceiling(float8) nearest integer greater than or equal to argument float8 exp(float8) float8 dexp(float8) exponential float8 floor(float8) nearest integer less than or equal to argument float8 ln(float8) float8 dlog1(float8) natural logarithm float8 log(float8) float8 dlog10(float8) base 10 logarithm float8 pi() circumference ratio float8 power(float8,float8) float8 pow(float8,float8) float8 dpow(float8,float8) power float8 round(float8) float8 dround(float8) round to the nearest integer float8 sign(float8) sign of the argument float8 sqrt(float8) float8 dsqrt(float8) square root| float8 trunc(float8) float8 dtrunc(float8) truncate toward zero|","title":"Mathematical functions"},{"location":"ref_devfuncs/#trigonometric-functions","text":"float8 degrees(float8) radians to degrees float8 radians(float8) degrees to radians float8 acos(float8) inverse cosine float8 asin(float8) inverse sine float8 atan(float8) inverse tangent float8 atan2(float8,float8) inverse tangent of arg1 / arg2 float8 cos(float8) cosine float8 cot(float8) cotangent float8 sin(float8) sine float8 tan(float8) tangent","title":"Trigonometric functions"},{"location":"ref_devfuncs/#date-and-time-operators","text":"date COMP date comparison operators for date type. COMP is any of =,<>,<,<=,>=,> . date COMP timestamp timestamp COMP date comparison operators for date and timestamp type. COMP is any of =,<>,<,<=,>=,> . date COMP timestamptz timestamptz COMP date comparison operators for date and timestamptz type. COMP is any of =,<>,<,<=,>=,> . time COMP time comparison operators for time type. COMP is any of =,<>,<,<=,>=,> . timetz COMP timetz comparison operators for timetz type. COMP is any of =,<>,<,<=,>=,> . timestamp COMP timestamp comparison operators for timestamp type. COMP is any of =,<>,<,<=,>=,> . timestamptz COMP timestamptz comparison operators for timestamptz type. COMP is any of =,<>,<,<=,>=,> . timestamp COMP timestamptz timestamptz COMP timestamp comparison operators for timestamp and timestamptz type. COMP is any of =,<>,<,<=,>=,> . interval COMP interval comparison operators for interval type. COMP is any of =,<>,<,<=,>=,> . date + int4 int4 + date addition operator of date type date - int4 subtraction operator of date type date - date difference between date types date + time time + date constructs a timestamp from date and time date + timetz constructs a timestamptz from date and timetz time - time difference between time types timestamp - timestamp difference between timestamp types timetz + interval timetz - interval addition or subtraction operator of timetz by interval . timestamptz + interval timestamptz - interval addition or subtraction operator of timestamptz by interval . overlaps(TYPE,TYPE,TYPE,TYPE) checks whether the 2 given time periods overlaps. TYPE is any of time,timetz,timestamp,timestamptz . extract(text FROM TYPE) retrieves subfields such as day or hour from date/time values. TYPE is any of time,timetz,timestamp,timestamptz,interval . now() current time of the transaction - interval unary minus operator of interval type interval + interval addition operator of interval type interval - interval subtraction operator of interval type","title":"Date and time operators"},{"location":"ref_devfuncs/#text-functionsoperators","text":"{text,bpchar} COMP {text,bpchar} comparison operators; COMP is any of =,<>,<,<=,>=,> Note that <,<=,>=,> operators are valid only when locale is UTF-8 or C (no locale). varchar || varchar concatenates the two strings. Both side must be varchar(n) to ensure maximum length of the result being predictible. substring(text,int4) substring(text,int4,int4) substr(text,int4) substr(text,int4,int4) extracts the substring length({text,bpchar}) length of the string {text,bpchar} [NOT] LIKE text pattern-matching according to the LIKE expression {text,bpchar} [NOT] ILIKE text case-insensitive pattern-matching according to the LIKE expression. Note that ILIKE operator is valid only when locale is UTF-8 or C (no locale).","title":"Text functions/operators"},{"location":"ref_devfuncs/#network-functionsoperators","text":"macaddr COMP macaddr comparison operators; COMP is any of =,<>,<,<=,>=,> macaddr & macaddr Bitwise AND operator macaddr | macaddr Bitwise OR operator ~ macaddr Bitwise NOT operator trunc(macaddr) Set last 3 bytes to zero inet COMP inet comparison operators; COMP is any of =,<>,<,<=,>=,> inet << inet Left side is contained by right side inet <<= inet Left side is contained by or equals to right side inet >> inet Left side contains right side inet >>= inet Left side contains or is equals to right side inet && inet Left side contains or is contained by right side ~ inet Bitwise NOT operator inet & inet Bitwise AND operator inet | inet Bitwise OR operator inet + int8 addition operator inet - int8 subtraction operator inet - inet subtraction operator broadcast(inet) returns the broadcast address of the given network address family(inet) returns the family of the given network address; 4 for IPv4, and 6 for IPv6 hostmask(inet) extract host mask of the given network address masklen(inet) extract netmask length of the given network address netmask(inet) extract netmask of the given network address network(inet) extract network part of the given network address set_masklen(NETADDR,int) set netmask length of the given network address; NETADDR is either inet or cidr . inet_merge(inet,inet) the smallest network which includes both of the given networks","title":"Network functions/operators"},{"location":"ref_devfuncs/#currency-operators","text":"money COMP money comparison operators; COMP is any of =,<>,<,<=,>=,> money OP money arthmetric operators; OP is any of +,-,/ money * TYPE TYPE * money Multiply a currency with a numeric value; TYPE is any of int2,int4,float2,float4,float8 money / TYPE Division of a currency by a numeric value; TYPE is any of int2,int4,float2,float4,float8 money / money Division of currency values","title":"Currency operators"},{"location":"ref_devfuncs/#uuid-operators","text":"uuid COMP uuid comparison operator. COMP is any of =,<>,<,<=,>=,>","title":"UUID operators"},{"location":"ref_devfuncs/#jsonb-operators","text":"jsonb -> KEY Get a JSON object field specified by the KEY jsonb -> NUM Get a JSON array element indexed by NUM jsonb ->> KEY Get a JSON object field specified by the KEY , as text jsonb ->> NUM Get a JSON array element indexed by NUM , as text (jsonb ->> KEY)::TYPE If TYPE is any of int2,int4,int8,float4,float8,numeric , get a JSON object field specified by KEY , as numeric data type. See the note below. (jsonb ->> NUM)::TYPE If TYPE is any of int2,int4,int8,float4,float8,numeric Get a JSON array element indexed by NUM , as numeric data type. See the note below. jsonb ? KEY Check whether jsonb object contains the KEY Note When we convert a jsonb element fetched by jsonb ->> KEY operator into numerical data types like float or numeric , PostgreSQL takes 2 steps operations; an internal numerical form is printed as text first, then it is converted into numerical data type. PG-Strom optimizes the GPU code using a special device function to fetch a numerical datum from jsonb object/array, if jsonb ->> KEY operator and text-to-numeric case are continuously used.","title":"JSONB operators"},{"location":"ref_devfuncs/#range-type-functionsoperators","text":"Note RANGE is any of { int4range , int8range , tsrange , tstzrange , daterange } in this section. TYPE is the element type of the RANGE which is introduced together in this section. RANGE = RANGE Both sides are equal. RANGE <> RANGE Both sides are not equal. RANGE < RANGE Left side is less than right side. RANGE <= RANGE Left side is less than or equal to right side. RANGE > RANGE Left side is greater than right side. RANGE >= RANGE Left side is greater than or equal to right side. RANGE @ RANGE The range in left side contains the range in right side. RANGE @ TYPE The range in left side contains the element in right side. RANGE <@ RANGE The range in left side is contained by the range in right side. TYPE <@ RANGE The element in left side is contained by the range in right side. RANGE && RANGE Left and right side are overlap (they have points in common). RANGE << RANGE Left side is strictly less than the right side RANGE >> RANGE Left side is strictly greater than the right side RANGE &< RANGE Any points in the left side is never greater than the right side RANGE &> RANGE Any points in the right side is never greater than the left side RANGE -|- RANGE Left side is adjacent to the right side RANGE + RANGE A union range by the left side and right side RANGE * RANGE An intersection range by the left and right side RANGE - RANGE An difference range by the left and right side lower(RANGE) lower bound of the range upper(RANGE) upper bound of the range isempty(RANGE) checks whether the range is empty lower_inc(RANGE) checks whether the lower bound is inclusive upper_inc(RANGE) checks whether the upper bound is inclusive lower_inf(RANGE) checks whether the lower bound is infinite upper_inf(RANGE) checks whether the upper bound is infinite range_merge(RANGE,RANGE) returns the smallest range which includes both of the given ranges","title":"Range type functions/operators"},{"location":"ref_devfuncs/#postgis-functions","text":"geometry st_makepoint(float8,float8) geometry st_point(float8,float8) It makes 2-dimensional POINT geometry. geometry st_makepoint(float8,float8,float8) It makes 3-dimensional POINT geometry. geometry st_makepoint(float8,float8,float8,float8) It makes 4-dimensional POINT geometry. geometry st_setsrid(geometry,int4) It assigns SRID on the given geometry float8 st_distance(geometry,geometry) It returns the distance between geometries in float8 . bool st_dwithin(geometry,geometry,float8) It returns true if the distance between geometries is shorter than the specified threshold. It is often faster than the combination of st_distance and comparison operator. text st_relate(geometry,geometry) It checks intersection of geometries, then returns DE9-IM(Dimensionally Extended Nine-Intersection Matrix) format string. bool st_contains(geometry,geometry) It returns whether the geometry1 fully contains the geometry1. bool st_crosses(geometry,geometry) It returns whether the geometries are crossed. int4 st_linecrossingdirection(geometry,geometry) It checks how two LINESTRING geometries are crossing, or not crossing.","title":"PostGIS Functions"},{"location":"ref_params/","text":"GUC Parameters This session introduces PG-Strom's configuration parameters. Enables/disables a particular feature pg_strom.enabled [type: bool / default: on] Enables/disables entire PG-Strom features at once pg_strom.enable_gpuscan [type: bool / default: on] Enables/disables GpuScan pg_strom.enable_gpuhashjoin [type: bool / default: on] Enables/disables JOIN by GpuHashJoin pg_strom.enable_gpunestloop [type: bool / default: on] Enables/disables JOIN by GpuNestLoop pg_strom.enable_gpupreagg [type: bool / default: on] Enables/disables GpuPreAgg pg_strom.enable_brin [type: bool / default: on] Enables/disables BRIN index support on tables scan pg_strom.enable_gpucache [type: bool / default: on] Controls whether GPU Cache is referenced, instead of PostgreSQL tables, if any Note that GPU Cache trigger functions continue to update the REDO Log buffer, even if this parameter is turned off. pg_strom.enable_partitionwise_gpujoin [type: bool / default: on] Enables/disables whether GpuJoin is pushed down to the partition children. pg_strom.enable_partitionwise_gpupreagg [type: bool / default: on] Enables/disables whether GpuPreAgg is pushed down to the partition children. pg_strom.pullup_outer_scan [type: bool / default: on] Enables/disables to pull up full-table scan if it is just below GpuPreAgg/GpuJoin, to reduce data transfer between CPU/RAM and GPU. pg_strom.pullup_outer_join [type: bool / default: on] Enables/disables to pull up tables-join if GpuJoin is just below GpuPreAgg, to reduce data transfer between CPU/RAM and GPU. pg_strom.enable_numeric_aggfuncs [type: bool / default: on] Enables/disables support of aggregate function that takes numeric data type. Note that aggregated function at GPU mapps numeric data type to double precision floating point values. So, if you are sensitive to calculation errors, you can turn off this configuration to suppress the calculation errors by the operations on CPU. pg_strom.cpu_fallback [type: bool / default: off] Controls whether it actually run CPU fallback operations, if GPU program returned \"CPU ReCheck Error\" pg_strom.regression_test_mode [type: bool / default: off] It disables some EXPLAIN command output that depends on software execution platform, like GPU model name. It avoid \"false-positive\" on the regression test, so use usually don't tough this configuration. Optimizer Configuration pg_strom.chunk_size [type: int / default: 65534kB ] Size of the data blocks processed by a single GPU kernel invocation. It was configurable, but makes less sense, so fixed to about 64MB in the current version. pg_strom.gpu_setup_cost [type: real / default: 4000 ] Cost value for initialization of GPU device pg_strom.gpu_dma_cost [type: real / default: 10 ] Cost value for DMA transfer over PCIe bus per data-chunk ( pg_strom.chunk_size = 64MB) pg_strom.gpu_operator_cost [type: real / default: 0.00015 ] Cost value to process an expression formula on GPU. If larger value than cpu_operator_cost is configured, no chance to choose PG-Strom towards any size of tables Executor Configuration pg_strom.max_async_tasks [type: int / default: 5 ] Max number of asynchronous taks PG-Strom can throw into GPU's execution queue per process. If CPU parallel is used in combination, this limitation shall be applied for each background worker. So, more than pg_strom.max_async_tasks asynchronous tasks are executed in parallel on the entire batch job. pg_strom.reuse_cuda_context [type: bool / default: off ] If on , it tries to reuse CUDA context on the next query execution, already constructed according to the previous query execution. Usually, construction of CUDA context takes 100-200ms, it may improve queries response time, on the other hands, it continue to occupy a part of GPU device memory on the down-side. So, we don't recommend to enable this parameter expect for benchmarking and so on. Also, this configuration makes no sense if query uses CPU parallel execution, because the worker processes shall always construct new CUDA context for each. GPUDirect SQL Configuration pg_strom.gpudirect_driver [type: text ] It shows the driver software name of GPUDirect SQL (read-only). Either nvidia cufile or heterodb nvme-strom pg_strom.gpudirect_enabled [type: bool / default: on ] Enables/disables GPUDirect SQL feature. pg_strom.gpudirect_threshold [type: int / default: auto] Controls the table-size threshold to invoke GPUDirect SQL feature. The default is auto configuration; a threshold calculated by the system physical memory size and shared_buffers configuration. pg_strom.cufile_io_unitsz [type: int / default: 16MB ] Unit size of read-i/o when PG-Strom uses cuFile API. No need to change from the default setting for most cases. It is only available when nvidia cufile driver is used. pg_strom.nvme_distance_map [type: text / default: null ] It manually configures the closest GPU for the particular storage devices, like NVME devices or NFS volumes. Its format string is <gpuX>=(<nvmeX>|<sfdvX>|</path/to/nfsmount>)[;<gpuY>=...] ; semi-colon separated list of pairs of GPU and storage like NVME devices. (example: gpu0=nvme1; gpu1=/mnt/nfs_volume ) <gpuX> means a GPU with device identifier X. <nvmeX> means a local NVME-SSD or a remote NVME-oF device. <sfdvX> means a special device of CSD drives by ScaleFlux,Inc. /path/to/nfsmount means a mount point by NFS volume with NFS-over-RDMA. Automatic configuration is often sufficient for local NVME-SSD drives, however, you should manually configure the closest GPU for NVME-oF or NFS-over-RDMA volumes. Arrow_Fdw Configuration arrow_fdw.enabled [type: bool / default: on ] By adjustment of estimated cost value, it turns on/off Arrow_Fdw. Note that only Foreign Scan (Arrow_Fdw) can scan on Arrow files, if GpuScan is not capable to run on. arrow_fdw.metadata_cache_size [type: int / default: 128MB ] Size of shared memory to cache metadata of Arrow files. Once consumption of the shared memory exceeds this value, the older metadata shall be released based on LRU. arrow_fdw.record_batch_size [type: int / default: 256MB ] Threshold of RecordBatch when Arrow_Fdw foreign table is written. When total amount of the buffer size exceeds this configuration, Arrow_Fdw writes out the buffer to Apache Arrow file, even if INSERT command is not completed yet. GPU Cache configuration pg_strom.enable_gpucache [type: bool / default: on ] Controls whether search/analytic query tries to use GPU Cache. Note that this parameter does not affect to any writes on the REDO Log buffer by the trigger. pg_strom.gpucache_auto_preload [type: text / default: null ] It specifies the table names to be loaded onto GPU Cache just after PostgreSQL startup. Its format is DATABASE_NAME.SCHEMA_NAME.TABLE_NAME , and separated by comma if multiple tables are preloaded. Initial-loading of GPU Cache usually takes a lot of time. So, preloading enables to avoid delay of response time of search/analytic queries on the first time. If this parameter is '*', PG-Strom tries to load all the configured tables onto GPU Cache sequentially. Configuration of GPU code generation and build pg_strom.program_cache_size [type: int / default: 256MB ] Amount of the shared memory size to cache GPU programs already built. It needs restart to update the parameter. pg_strom.num_program_builders [type: int / default: 2 ] Number of background workers to build GPU programs asynchronously. It needs restart to update the parameter. pg_strom.debug_jit_compile_options [type: bool / default: off ] Controls to include debug option (line-numbers and symbol information) on JIT compile of GPU programs. It is valuable for complicated bug analysis using GPU core dump, however, should not be enabled on daily use because of performance degradation. pg_strom.extra_kernel_stack_size [type: int / default: 0 ] Extra size of stack, in bytes, for each GPU kernel thread to be allocated on execution. Usually, no need to change from the default value. GPU Device Configuration pg_strom.cuda_visible_devices [type: text / default: null ] List of GPU device numbers in comma separated, if you want to recognize particular GPUs on PostgreSQL startup. It is equivalent to the environment variable CUDAVISIBLE_DEVICES pg_strom.gpu_memory_segment_size [type: int / default: 512MB ] Specifies the amount of device memory to be allocated per CUDA API call. Larger configuration will reduce the overhead of API calls, but not efficient usage of device memory. PG-Strom shared memory configuration shmbuf.segment_size [type: int / default: 256MB ] It configures the unit length of the shared memory segment that has portable virtual addresses. Usually, it does not need to change the default value, except for the case when GPU Cache uses REDO Log buffer larger than 256MB . In this case, you need to enlarge this parameter also. This parameter allows only power of 2. shmbuf.num_logical_segments [type: int / default: auto] It configures the number of the shared memory segment that has portable virtual addresses. On the system startup, PG-Strom reserves ( shmbuf.segment_size x shmbuf.num_logical_segments ) bytes of virtual address space using mmap(2) with PROT_NONE, then, signal handler allocates physical memory on the demand. The default configuration is auto; that is almost twice of the physical memory size installed on the system.","title":"GUC Parameters"},{"location":"ref_params/#guc-parameters","text":"This session introduces PG-Strom's configuration parameters.","title":"GUC Parameters"},{"location":"ref_params/#enablesdisables-a-particular-feature","text":"pg_strom.enabled [type: bool / default: on] Enables/disables entire PG-Strom features at once pg_strom.enable_gpuscan [type: bool / default: on] Enables/disables GpuScan pg_strom.enable_gpuhashjoin [type: bool / default: on] Enables/disables JOIN by GpuHashJoin pg_strom.enable_gpunestloop [type: bool / default: on] Enables/disables JOIN by GpuNestLoop pg_strom.enable_gpupreagg [type: bool / default: on] Enables/disables GpuPreAgg pg_strom.enable_brin [type: bool / default: on] Enables/disables BRIN index support on tables scan pg_strom.enable_gpucache [type: bool / default: on] Controls whether GPU Cache is referenced, instead of PostgreSQL tables, if any Note that GPU Cache trigger functions continue to update the REDO Log buffer, even if this parameter is turned off. pg_strom.enable_partitionwise_gpujoin [type: bool / default: on] Enables/disables whether GpuJoin is pushed down to the partition children. pg_strom.enable_partitionwise_gpupreagg [type: bool / default: on] Enables/disables whether GpuPreAgg is pushed down to the partition children. pg_strom.pullup_outer_scan [type: bool / default: on] Enables/disables to pull up full-table scan if it is just below GpuPreAgg/GpuJoin, to reduce data transfer between CPU/RAM and GPU. pg_strom.pullup_outer_join [type: bool / default: on] Enables/disables to pull up tables-join if GpuJoin is just below GpuPreAgg, to reduce data transfer between CPU/RAM and GPU. pg_strom.enable_numeric_aggfuncs [type: bool / default: on] Enables/disables support of aggregate function that takes numeric data type. Note that aggregated function at GPU mapps numeric data type to double precision floating point values. So, if you are sensitive to calculation errors, you can turn off this configuration to suppress the calculation errors by the operations on CPU. pg_strom.cpu_fallback [type: bool / default: off] Controls whether it actually run CPU fallback operations, if GPU program returned \"CPU ReCheck Error\" pg_strom.regression_test_mode [type: bool / default: off] It disables some EXPLAIN command output that depends on software execution platform, like GPU model name. It avoid \"false-positive\" on the regression test, so use usually don't tough this configuration.","title":"Enables/disables a particular feature"},{"location":"ref_params/#optimizer-configuration","text":"pg_strom.chunk_size [type: int / default: 65534kB ] Size of the data blocks processed by a single GPU kernel invocation. It was configurable, but makes less sense, so fixed to about 64MB in the current version. pg_strom.gpu_setup_cost [type: real / default: 4000 ] Cost value for initialization of GPU device pg_strom.gpu_dma_cost [type: real / default: 10 ] Cost value for DMA transfer over PCIe bus per data-chunk ( pg_strom.chunk_size = 64MB) pg_strom.gpu_operator_cost [type: real / default: 0.00015 ] Cost value to process an expression formula on GPU. If larger value than cpu_operator_cost is configured, no chance to choose PG-Strom towards any size of tables","title":"Optimizer Configuration"},{"location":"ref_params/#executor-configuration","text":"pg_strom.max_async_tasks [type: int / default: 5 ] Max number of asynchronous taks PG-Strom can throw into GPU's execution queue per process. If CPU parallel is used in combination, this limitation shall be applied for each background worker. So, more than pg_strom.max_async_tasks asynchronous tasks are executed in parallel on the entire batch job. pg_strom.reuse_cuda_context [type: bool / default: off ] If on , it tries to reuse CUDA context on the next query execution, already constructed according to the previous query execution. Usually, construction of CUDA context takes 100-200ms, it may improve queries response time, on the other hands, it continue to occupy a part of GPU device memory on the down-side. So, we don't recommend to enable this parameter expect for benchmarking and so on. Also, this configuration makes no sense if query uses CPU parallel execution, because the worker processes shall always construct new CUDA context for each.","title":"Executor Configuration"},{"location":"ref_params/#gpudirect-sql-configuration","text":"pg_strom.gpudirect_driver [type: text ] It shows the driver software name of GPUDirect SQL (read-only). Either nvidia cufile or heterodb nvme-strom pg_strom.gpudirect_enabled [type: bool / default: on ] Enables/disables GPUDirect SQL feature. pg_strom.gpudirect_threshold [type: int / default: auto] Controls the table-size threshold to invoke GPUDirect SQL feature. The default is auto configuration; a threshold calculated by the system physical memory size and shared_buffers configuration. pg_strom.cufile_io_unitsz [type: int / default: 16MB ] Unit size of read-i/o when PG-Strom uses cuFile API. No need to change from the default setting for most cases. It is only available when nvidia cufile driver is used. pg_strom.nvme_distance_map [type: text / default: null ] It manually configures the closest GPU for the particular storage devices, like NVME devices or NFS volumes. Its format string is <gpuX>=(<nvmeX>|<sfdvX>|</path/to/nfsmount>)[;<gpuY>=...] ; semi-colon separated list of pairs of GPU and storage like NVME devices. (example: gpu0=nvme1; gpu1=/mnt/nfs_volume ) <gpuX> means a GPU with device identifier X. <nvmeX> means a local NVME-SSD or a remote NVME-oF device. <sfdvX> means a special device of CSD drives by ScaleFlux,Inc. /path/to/nfsmount means a mount point by NFS volume with NFS-over-RDMA. Automatic configuration is often sufficient for local NVME-SSD drives, however, you should manually configure the closest GPU for NVME-oF or NFS-over-RDMA volumes.","title":"GPUDirect SQL Configuration"},{"location":"ref_params/#arrow_fdw-configuration","text":"arrow_fdw.enabled [type: bool / default: on ] By adjustment of estimated cost value, it turns on/off Arrow_Fdw. Note that only Foreign Scan (Arrow_Fdw) can scan on Arrow files, if GpuScan is not capable to run on. arrow_fdw.metadata_cache_size [type: int / default: 128MB ] Size of shared memory to cache metadata of Arrow files. Once consumption of the shared memory exceeds this value, the older metadata shall be released based on LRU. arrow_fdw.record_batch_size [type: int / default: 256MB ] Threshold of RecordBatch when Arrow_Fdw foreign table is written. When total amount of the buffer size exceeds this configuration, Arrow_Fdw writes out the buffer to Apache Arrow file, even if INSERT command is not completed yet.","title":"Arrow_Fdw Configuration"},{"location":"ref_params/#gpu-cache-configuration","text":"pg_strom.enable_gpucache [type: bool / default: on ] Controls whether search/analytic query tries to use GPU Cache. Note that this parameter does not affect to any writes on the REDO Log buffer by the trigger. pg_strom.gpucache_auto_preload [type: text / default: null ] It specifies the table names to be loaded onto GPU Cache just after PostgreSQL startup. Its format is DATABASE_NAME.SCHEMA_NAME.TABLE_NAME , and separated by comma if multiple tables are preloaded. Initial-loading of GPU Cache usually takes a lot of time. So, preloading enables to avoid delay of response time of search/analytic queries on the first time. If this parameter is '*', PG-Strom tries to load all the configured tables onto GPU Cache sequentially.","title":"GPU Cache configuration"},{"location":"ref_params/#configuration-of-gpu-code-generation-and-build","text":"pg_strom.program_cache_size [type: int / default: 256MB ] Amount of the shared memory size to cache GPU programs already built. It needs restart to update the parameter. pg_strom.num_program_builders [type: int / default: 2 ] Number of background workers to build GPU programs asynchronously. It needs restart to update the parameter. pg_strom.debug_jit_compile_options [type: bool / default: off ] Controls to include debug option (line-numbers and symbol information) on JIT compile of GPU programs. It is valuable for complicated bug analysis using GPU core dump, however, should not be enabled on daily use because of performance degradation. pg_strom.extra_kernel_stack_size [type: int / default: 0 ] Extra size of stack, in bytes, for each GPU kernel thread to be allocated on execution. Usually, no need to change from the default value.","title":"Configuration of GPU code generation and build"},{"location":"ref_params/#gpu-device-configuration","text":"pg_strom.cuda_visible_devices [type: text / default: null ] List of GPU device numbers in comma separated, if you want to recognize particular GPUs on PostgreSQL startup. It is equivalent to the environment variable CUDAVISIBLE_DEVICES pg_strom.gpu_memory_segment_size [type: int / default: 512MB ] Specifies the amount of device memory to be allocated per CUDA API call. Larger configuration will reduce the overhead of API calls, but not efficient usage of device memory.","title":"GPU Device Configuration"},{"location":"ref_params/#pg-strom-shared-memory-configuration","text":"shmbuf.segment_size [type: int / default: 256MB ] It configures the unit length of the shared memory segment that has portable virtual addresses. Usually, it does not need to change the default value, except for the case when GPU Cache uses REDO Log buffer larger than 256MB . In this case, you need to enlarge this parameter also. This parameter allows only power of 2. shmbuf.num_logical_segments [type: int / default: auto] It configures the number of the shared memory segment that has portable virtual addresses. On the system startup, PG-Strom reserves ( shmbuf.segment_size x shmbuf.num_logical_segments ) bytes of virtual address space using mmap(2) with PROT_NONE, then, signal handler allocates physical memory on the demand. The default configuration is auto; that is almost twice of the physical memory size installed on the system.","title":"PG-Strom shared memory configuration"},{"location":"ref_sqlfuncs/","text":"SQL Objects This chapter introduces SQL objects additionally provided by PG-Strom. System Information pgstrom.device_info System View It shows properties of GPU devices installed for PG-Strom. Below is schema definition of the view. name type description device_nr int GPU device number aindex int Attribute index attribute text Attribute name value text Attribute value There are various kind of GPU device properties, but depending on the CUDA driver version where system is running. So, pgstrom.device_info system view identifies the target property by GPU device number ( device_nr ) and attribute index ( aindex ). Below is an example of pgstrom.device_info system view. postgres=# select * from pgstrom.device_info limit 10; device_nr | aindex | attribute | value -----------+--------+-------------------------------------+------------------------------------------ 0 | 0 | GPU Device Name | NVIDIA Tesla V100-PCIE-16GB 0 | 1 | GPU Device Brand | TESLA 0 | 2 | GPU Device UUID | GPU-8ba149db-53d8-c5f3-0f55-97ce8cfadb28 0 | 3 | GPU Total RAM Size | 15.78GB 0 | 4 | GPU PCI Bar1 Size | 16.00GB 0 | 5 | Maximum number of threads per block | 1024 0 | 6 | Maximum block dimension X | 1024 0 | 7 | Maximum block dimension Y | 1024 0 | 8 | Maximum block dimension Z | 64 0 | 9 | Maximum grid dimension X | 2147483647 (10 rows) Arrow_Fdw fdw_handler pgstrom.arrow_fdw_handler() FDW handler function of Arrow_Fdw. Usually, users don't need to invoke this function. void pgstrom.arrow_fdw_validator(text[], oid) FDW options validation function of Arrow_Fdw. Usually, users don't need to invoke this function. void pgstrom.arrow_fdw_import_file(text,text,text = null) This function tries to import Apache Arrow file, and defines a new foreign table. Its first argument is name of the new foreign table, the second argument is path of the Apache Arrow file, and the optional third argument is the schema name. This function is similar to IMPORT FOREIGN SCHEMA statement, but allows to import Apache Arrow files that have wider fields than the limitation of number of columns in PostgreSQL ( MaxTupleAttributeNumber = 1664). So, we recommend to use IMPORT FOREIGN SCHEMA statement for most cases. The example below shows the steps to import an Apache Arrow file with 2000 of Int16 fields by the pgstrom.arrow_fdw_import_file . The result of \\d mytest shows this foreign table has 2000 fields. Due to the internal data format of PostgreSQL, it is not possible to read all the columns at once, but possible to read a part of columns like the last example. =# select pgstrom.arrow_fdw_import_file('mytest', '/tmp/wide2000.arrow'); arrow_fdw_import_file ----------------------- (1 row) =# \\d List of relations Schema | Name | Type | Owner --------+--------+---------------+-------- public | mytest | foreign table | kaigai (1 row) =# \\d mytest Foreign table \"public.mytest\" Column | Type | Collation | Nullable | Default | FDW options -----------+----------+-----------+----------+---------+------------- object_id | integer | | | | c000 | smallint | | | | c001 | smallint | | | | c002 | smallint | | | | c003 | smallint | | | | : : : : : : c1997 | smallint | | | | c1998 | smallint | | | | c1999 | smallint | | | | Server: arrow_fdw FDW options: (file '/tmp/wide2000.arrow') =# select * from mytest ; ERROR: target lists can have at most 1664 entries =# select c0010,c1234,c1999 from mytest limit 3; c0010 | c1234 | c1999 -------+-------+------- 232 | 232 | 232 537 | 537 | 537 219 | 219 | 219 (3 rows) GPU Cache pgstrom.gpucache_info System View It shows the current status of GPU Cache. Below is schema definition of the view. name type description database_oid oid Database OID where the table with GPU Cache belongs to. database_name text Database name where the table with GPU Cache belongs to. table_oid oid Table OID that has GPU Cache. Note that it may not be in the current database. table_name text Table name that has GPU Cache. Note that it may not be in the current database. signature int8 An identifier hash value of GPU Cache. It may be changed after ALTER TABLE for example. gpu_main_sz int8 Size of the fixed-length values area on the GPU Cache. gpu_extra_sz int8 Size of the variable-length values area on the GPU Cache redo_write_ts timestamptz Last update timestamp on the REDO Log buffer redo_write_nitems int8 Total number of REDO Log entries written to the REDO Log buffer. redo_write_pos int8 Total bytes of REDO Log entries written to the REDO Log buffer. redo_read_nitems int8 Total number of REDO Log entries read from REDO Log buffer, and already applied to. redo_read_pos int8 Total bytes of REDO Log entries read from REDO Log buffer, and already applied to. redo_sync_pos int8 The latest position on the REDO Log buffer, where it is already required the background worker to synchronize onto the GPU Cache. When free space of REDO Log buffer becomes tight, it is internally used to avoid flood of simultaneous asynchronized requests by many sessions. config_options text Options string of the GPU Cache Below is an example of pgstrom.gpucache_info system view. =# select * from pgstrom.gpucache_info ; database_oid | database_name | table_oid | table_name | signature | gpu_main_sz | gpu_extra_sz | redo_write_ts | redo_write_nitems | redo_write_pos | redo_read_nitems | redo_read_pos | redo_sync_pos | config_options --------------+---------------+-----------+------------+------------+-------------+--------------+----------------------------+-------------------+----------------+------------------+---------------+---------------+------------------------------------------------------------------------------------------------------------------------ 12728 | postgres | 25244 | mytest | 6295279771 | 675028992 | 0 | 2021-05-14 03:00:18.623503 | 500000 | 36000000 | 500000 | 36000000 | 36000000 | gpu_device_id=0,max_num_rows=10485760,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 12728 | postgres | 25262 | dpoints | 5985886065 | 772505600 | 0 | 2021-05-14 03:00:18.524627 | 8000000 | 576000192 | 8000000 | 576000192 | 576000192 | gpu_device_id=0,max_num_rows=12000000,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 (2 rows) trigger pgstrom.gpucache_sync_trigger() A trigger function to synchronize GPU Cache on table updates. See GPU Cache chapter for more details. bigint pgstrom.gpucache_apply_redo(regclass) If the given table has GPU Cache configured, it forcibly applies the REDO log entries onto the GPU Cache. bigint pgstrom.gpucache_compaction(regclass) If the given table has GPU Cache configured, it forcibly run compaction of the variable-length data buffer. Test Data Generator void pgstrom.random_setseed(int) It initializes the random seed. bigint pgstrom.random_int(float=0.0, bigint=0, bigint=INT_MAX) It generates random data in bigint type within the range. float pgstrom.random_float(float=0.0, float=0.0, float=1.0) It generates random data in float type within the range. date pgstrom.random_date(float=0.0, date='2015-01-01', date='2025-12-31') It generates random data in date type within the range. time pgstrom.random_time(float=0.0, time='00:00:00', time='23:59:59') It generates random data in time type within the range. timetz pgstrom.random_timetz(float=0.0, time='00:00:00', time='23:59:59') It generates random data in timetz type within the range. timestamp pgstrom.random_timestamp(float=0.0, timestamp='2015-01-01', timestamp='2025-01-01') It generates random data in timestamp type within the range. macaddr pgstrom.random_macaddr(float=0.0, macaddr='ab:cd:00:00:00', macaddr='ab:cd:ff:ff:ff:ff') It generates random data in macaddr type within the range. inet pgstrom.random_inet(float=0.0, inet='192.168.0.1/16') It generates random data in inet type within the range. text pgstrom.random_text(float=0.0, text='test_**') It generates random data in text type. The '*' characters in 2nd argument shall be replaced randomly. text pgstrom.random_text_len(float=0.0, int=10) It generates random data in text type within the specified length. int4range pgstrom.random_int4range(float=0.0, bigint=0, bigint=INT_MAX) It generates random data in int4range type within the range. int8range pgstrom.random_int8range(float=0.0, bigint=0, bigint=LONG_MAX) It generates random data in int8range type within the range. tsrange pgstrom.random_tsrange(float=0.0, timestamp='2015-01-01', timestamp='2025-01-01') It generates random data in tsrange type within the range. tstzrange pgstrom.random_tstzrange(float=0.0, timestamptz='2015-01-01', timestamptz='2025-01-01') It generates random data in tstzrange type within the range. daterange pgstrom.random_daterange(float=0.0, date='2015-01-01', date='2025-12-31') It generates random data in daterange type within the range. Other Functions pgstrom.license_query It shows the active commercial subscription, if loaded. =# select pgstrom.license_query(); license_query ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- { \"version\" : 2, \"serial_nr\" : \"HDB-TRIAL\", \"issued_at\" : \"2020-11-24\", \"expired_at\" : \"2025-12-31\", \"gpus\" : [ { \"uuid\" : \"GPU-8ba149db-53d8-c5f3-0f55-97ce8cfadb28\" } ]} (1 row)","title":"SQL Objects"},{"location":"ref_sqlfuncs/#sql-objects","text":"This chapter introduces SQL objects additionally provided by PG-Strom.","title":"SQL Objects"},{"location":"ref_sqlfuncs/#system-information","text":"pgstrom.device_info System View It shows properties of GPU devices installed for PG-Strom. Below is schema definition of the view. name type description device_nr int GPU device number aindex int Attribute index attribute text Attribute name value text Attribute value There are various kind of GPU device properties, but depending on the CUDA driver version where system is running. So, pgstrom.device_info system view identifies the target property by GPU device number ( device_nr ) and attribute index ( aindex ). Below is an example of pgstrom.device_info system view. postgres=# select * from pgstrom.device_info limit 10; device_nr | aindex | attribute | value -----------+--------+-------------------------------------+------------------------------------------ 0 | 0 | GPU Device Name | NVIDIA Tesla V100-PCIE-16GB 0 | 1 | GPU Device Brand | TESLA 0 | 2 | GPU Device UUID | GPU-8ba149db-53d8-c5f3-0f55-97ce8cfadb28 0 | 3 | GPU Total RAM Size | 15.78GB 0 | 4 | GPU PCI Bar1 Size | 16.00GB 0 | 5 | Maximum number of threads per block | 1024 0 | 6 | Maximum block dimension X | 1024 0 | 7 | Maximum block dimension Y | 1024 0 | 8 | Maximum block dimension Z | 64 0 | 9 | Maximum grid dimension X | 2147483647 (10 rows)","title":"System Information"},{"location":"ref_sqlfuncs/#arrow_fdw","text":"fdw_handler pgstrom.arrow_fdw_handler() FDW handler function of Arrow_Fdw. Usually, users don't need to invoke this function. void pgstrom.arrow_fdw_validator(text[], oid) FDW options validation function of Arrow_Fdw. Usually, users don't need to invoke this function. void pgstrom.arrow_fdw_import_file(text,text,text = null) This function tries to import Apache Arrow file, and defines a new foreign table. Its first argument is name of the new foreign table, the second argument is path of the Apache Arrow file, and the optional third argument is the schema name. This function is similar to IMPORT FOREIGN SCHEMA statement, but allows to import Apache Arrow files that have wider fields than the limitation of number of columns in PostgreSQL ( MaxTupleAttributeNumber = 1664). So, we recommend to use IMPORT FOREIGN SCHEMA statement for most cases. The example below shows the steps to import an Apache Arrow file with 2000 of Int16 fields by the pgstrom.arrow_fdw_import_file . The result of \\d mytest shows this foreign table has 2000 fields. Due to the internal data format of PostgreSQL, it is not possible to read all the columns at once, but possible to read a part of columns like the last example. =# select pgstrom.arrow_fdw_import_file('mytest', '/tmp/wide2000.arrow'); arrow_fdw_import_file ----------------------- (1 row) =# \\d List of relations Schema | Name | Type | Owner --------+--------+---------------+-------- public | mytest | foreign table | kaigai (1 row) =# \\d mytest Foreign table \"public.mytest\" Column | Type | Collation | Nullable | Default | FDW options -----------+----------+-----------+----------+---------+------------- object_id | integer | | | | c000 | smallint | | | | c001 | smallint | | | | c002 | smallint | | | | c003 | smallint | | | | : : : : : : c1997 | smallint | | | | c1998 | smallint | | | | c1999 | smallint | | | | Server: arrow_fdw FDW options: (file '/tmp/wide2000.arrow') =# select * from mytest ; ERROR: target lists can have at most 1664 entries =# select c0010,c1234,c1999 from mytest limit 3; c0010 | c1234 | c1999 -------+-------+------- 232 | 232 | 232 537 | 537 | 537 219 | 219 | 219 (3 rows)","title":"Arrow_Fdw"},{"location":"ref_sqlfuncs/#gpu-cache","text":"pgstrom.gpucache_info System View It shows the current status of GPU Cache. Below is schema definition of the view. name type description database_oid oid Database OID where the table with GPU Cache belongs to. database_name text Database name where the table with GPU Cache belongs to. table_oid oid Table OID that has GPU Cache. Note that it may not be in the current database. table_name text Table name that has GPU Cache. Note that it may not be in the current database. signature int8 An identifier hash value of GPU Cache. It may be changed after ALTER TABLE for example. gpu_main_sz int8 Size of the fixed-length values area on the GPU Cache. gpu_extra_sz int8 Size of the variable-length values area on the GPU Cache redo_write_ts timestamptz Last update timestamp on the REDO Log buffer redo_write_nitems int8 Total number of REDO Log entries written to the REDO Log buffer. redo_write_pos int8 Total bytes of REDO Log entries written to the REDO Log buffer. redo_read_nitems int8 Total number of REDO Log entries read from REDO Log buffer, and already applied to. redo_read_pos int8 Total bytes of REDO Log entries read from REDO Log buffer, and already applied to. redo_sync_pos int8 The latest position on the REDO Log buffer, where it is already required the background worker to synchronize onto the GPU Cache. When free space of REDO Log buffer becomes tight, it is internally used to avoid flood of simultaneous asynchronized requests by many sessions. config_options text Options string of the GPU Cache Below is an example of pgstrom.gpucache_info system view. =# select * from pgstrom.gpucache_info ; database_oid | database_name | table_oid | table_name | signature | gpu_main_sz | gpu_extra_sz | redo_write_ts | redo_write_nitems | redo_write_pos | redo_read_nitems | redo_read_pos | redo_sync_pos | config_options --------------+---------------+-----------+------------+------------+-------------+--------------+----------------------------+-------------------+----------------+------------------+---------------+---------------+------------------------------------------------------------------------------------------------------------------------ 12728 | postgres | 25244 | mytest | 6295279771 | 675028992 | 0 | 2021-05-14 03:00:18.623503 | 500000 | 36000000 | 500000 | 36000000 | 36000000 | gpu_device_id=0,max_num_rows=10485760,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 12728 | postgres | 25262 | dpoints | 5985886065 | 772505600 | 0 | 2021-05-14 03:00:18.524627 | 8000000 | 576000192 | 8000000 | 576000192 | 576000192 | gpu_device_id=0,max_num_rows=12000000,redo_buffer_size=167772160,gpu_sync_interval=5000000,gpu_sync_threshold=41943040 (2 rows) trigger pgstrom.gpucache_sync_trigger() A trigger function to synchronize GPU Cache on table updates. See GPU Cache chapter for more details. bigint pgstrom.gpucache_apply_redo(regclass) If the given table has GPU Cache configured, it forcibly applies the REDO log entries onto the GPU Cache. bigint pgstrom.gpucache_compaction(regclass) If the given table has GPU Cache configured, it forcibly run compaction of the variable-length data buffer.","title":"GPU Cache"},{"location":"ref_sqlfuncs/#test-data-generator","text":"void pgstrom.random_setseed(int) It initializes the random seed. bigint pgstrom.random_int(float=0.0, bigint=0, bigint=INT_MAX) It generates random data in bigint type within the range. float pgstrom.random_float(float=0.0, float=0.0, float=1.0) It generates random data in float type within the range. date pgstrom.random_date(float=0.0, date='2015-01-01', date='2025-12-31') It generates random data in date type within the range. time pgstrom.random_time(float=0.0, time='00:00:00', time='23:59:59') It generates random data in time type within the range. timetz pgstrom.random_timetz(float=0.0, time='00:00:00', time='23:59:59') It generates random data in timetz type within the range. timestamp pgstrom.random_timestamp(float=0.0, timestamp='2015-01-01', timestamp='2025-01-01') It generates random data in timestamp type within the range. macaddr pgstrom.random_macaddr(float=0.0, macaddr='ab:cd:00:00:00', macaddr='ab:cd:ff:ff:ff:ff') It generates random data in macaddr type within the range. inet pgstrom.random_inet(float=0.0, inet='192.168.0.1/16') It generates random data in inet type within the range. text pgstrom.random_text(float=0.0, text='test_**') It generates random data in text type. The '*' characters in 2nd argument shall be replaced randomly. text pgstrom.random_text_len(float=0.0, int=10) It generates random data in text type within the specified length. int4range pgstrom.random_int4range(float=0.0, bigint=0, bigint=INT_MAX) It generates random data in int4range type within the range. int8range pgstrom.random_int8range(float=0.0, bigint=0, bigint=LONG_MAX) It generates random data in int8range type within the range. tsrange pgstrom.random_tsrange(float=0.0, timestamp='2015-01-01', timestamp='2025-01-01') It generates random data in tsrange type within the range. tstzrange pgstrom.random_tstzrange(float=0.0, timestamptz='2015-01-01', timestamptz='2025-01-01') It generates random data in tstzrange type within the range. daterange pgstrom.random_daterange(float=0.0, date='2015-01-01', date='2025-12-31') It generates random data in daterange type within the range.","title":"Test Data Generator"},{"location":"ref_sqlfuncs/#other-functions","text":"pgstrom.license_query It shows the active commercial subscription, if loaded. =# select pgstrom.license_query(); license_query ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- { \"version\" : 2, \"serial_nr\" : \"HDB-TRIAL\", \"issued_at\" : \"2020-11-24\", \"expired_at\" : \"2025-12-31\", \"gpus\" : [ { \"uuid\" : \"GPU-8ba149db-53d8-c5f3-0f55-97ce8cfadb28\" } ]} (1 row)","title":"Other Functions"},{"location":"ref_types/","text":"Data Types PG-Strom support the following data types for use on GPU device. Numeric types int1 [length: 1byte] 8bit integer data type; enhanced data type by PG-Strom int2 (alias smallint ) [length: 2bytes] 16bit integer data type int4 (alias int ) [length: 4bytes] 32bit integer data type int8 (alias bigint ) [length: 8bytes] 64bit integer data type float2 [length: 2bytes] Half precision data type; enhanced data type by PG-Strom float4 (alias real ) [length: 4bytes] Single precision floating-point data type float8 (alias double precision ) [length: 8bytes] Double precision floating-point data type numeric [length: variable] Real number data type; handled as a 128bit fixed-point value in GPU Note When GPU processes values in numeric data type, it is converted to an internal 128bit fixed-point number because of implementation reason. (This layout is identical to Decimal type in Apache Arrow.) It is transparently converted to/from the internal format, on the other hands, PG-Strom cannot convert numaric datum with large number of digits, so tries to fallback operations by CPU. Therefore, it may lead slowdown if numeric data with large number of digits are supplied to GPU device. To avoid the problem, turn off the GUC option pg_strom.enable_numeric_type not to run operational expression including numeric data types on GPU devices. Note Even though GPU supports half-precision floating-point numbers by hardware, CPU (x86_64 processor) does not support it yet. So, when CPU processes float2 data types, it transform them to float or double on calculations. So, CPU has no advantages for calculation performance of float2 , unlike GPU. It is a feature to save storage/memory capacity for machine-learning / statistical-analytics. Date and time types date [length: 4bytes] Date data type time (alias time without time zone ) [length: 8bytes] Time data type timetz (alias time with time zone ) [length: 12bytes] Time with timezone data type timestamp (alias timestamp without time zone ) [length: 8bytes] Timestamp data type timestamptz (alias timestamp with time zone ) [length: 8bytes] Timestamp with timezone data type interval [length: 16bytes] Interval data type Variable length types bpchar [length: variable] variable length text with whitespace paddings varchar [length: variable] variable length text type text [length: variable] variable length text type bytea [length: variable] variable length binary type unstructured data types jsonb [length: variable] JSON data type with binary indexed keys Note Pay attention for the two points below, when GPU processes jsonb data types. jsonb is not performance efficient data types because it has to load unreferenced attributes onto GPU from the storage, so tend to consume I/O bandwidth by junk data. In case when jsonb data length exceeds the threshold of datum TOASTen , entire jsonb value is written out to TOAST table, thus, GPU cannot process these values and invokes inefficient CPU-fallback operations. Regarding to the 2nd problem, you can extend table's storage option toast_tuple_target to enlarge the threshold for datum TOASTen. Miscellaneous types boolean [length: 1byte] Boolean data type money [length: 8bytes] Money data type uuid [length: 16bytes] UUID data type macaddr [length: 6bytes] Network MAC address data type inet [length: 7 or 19bytes] Network address data type cidr [length: 7 or 19butes] Network address data type Range data types int4range [length: 14bytes] Range type of 32bit integer int8range [length: 22bytes] Range type of 64bit integer tsrange [length: 22bytes] Range type of timestamp data tstzrange [length: 22bytes] Range type of timestamp with timezone data daterange [length: 14bytes] Range type of date type Geometry data types geometry [length: variable] Geometry object of PostGIS","title":"Data Types"},{"location":"ref_types/#data-types","text":"PG-Strom support the following data types for use on GPU device.","title":"Data Types"},{"location":"ref_types/#numeric-types","text":"int1 [length: 1byte] 8bit integer data type; enhanced data type by PG-Strom int2 (alias smallint ) [length: 2bytes] 16bit integer data type int4 (alias int ) [length: 4bytes] 32bit integer data type int8 (alias bigint ) [length: 8bytes] 64bit integer data type float2 [length: 2bytes] Half precision data type; enhanced data type by PG-Strom float4 (alias real ) [length: 4bytes] Single precision floating-point data type float8 (alias double precision ) [length: 8bytes] Double precision floating-point data type numeric [length: variable] Real number data type; handled as a 128bit fixed-point value in GPU Note When GPU processes values in numeric data type, it is converted to an internal 128bit fixed-point number because of implementation reason. (This layout is identical to Decimal type in Apache Arrow.) It is transparently converted to/from the internal format, on the other hands, PG-Strom cannot convert numaric datum with large number of digits, so tries to fallback operations by CPU. Therefore, it may lead slowdown if numeric data with large number of digits are supplied to GPU device. To avoid the problem, turn off the GUC option pg_strom.enable_numeric_type not to run operational expression including numeric data types on GPU devices. Note Even though GPU supports half-precision floating-point numbers by hardware, CPU (x86_64 processor) does not support it yet. So, when CPU processes float2 data types, it transform them to float or double on calculations. So, CPU has no advantages for calculation performance of float2 , unlike GPU. It is a feature to save storage/memory capacity for machine-learning / statistical-analytics.","title":"Numeric types"},{"location":"ref_types/#date-and-time-types","text":"date [length: 4bytes] Date data type time (alias time without time zone ) [length: 8bytes] Time data type timetz (alias time with time zone ) [length: 12bytes] Time with timezone data type timestamp (alias timestamp without time zone ) [length: 8bytes] Timestamp data type timestamptz (alias timestamp with time zone ) [length: 8bytes] Timestamp with timezone data type interval [length: 16bytes] Interval data type","title":"Date and time types"},{"location":"ref_types/#variable-length-types","text":"bpchar [length: variable] variable length text with whitespace paddings varchar [length: variable] variable length text type text [length: variable] variable length text type bytea [length: variable] variable length binary type","title":"Variable length types"},{"location":"ref_types/#unstructured-data-types","text":"jsonb [length: variable] JSON data type with binary indexed keys Note Pay attention for the two points below, when GPU processes jsonb data types. jsonb is not performance efficient data types because it has to load unreferenced attributes onto GPU from the storage, so tend to consume I/O bandwidth by junk data. In case when jsonb data length exceeds the threshold of datum TOASTen , entire jsonb value is written out to TOAST table, thus, GPU cannot process these values and invokes inefficient CPU-fallback operations. Regarding to the 2nd problem, you can extend table's storage option toast_tuple_target to enlarge the threshold for datum TOASTen.","title":"unstructured data types"},{"location":"ref_types/#miscellaneous-types","text":"boolean [length: 1byte] Boolean data type money [length: 8bytes] Money data type uuid [length: 16bytes] UUID data type macaddr [length: 6bytes] Network MAC address data type inet [length: 7 or 19bytes] Network address data type cidr [length: 7 or 19butes] Network address data type","title":"Miscellaneous types"},{"location":"ref_types/#range-data-types","text":"int4range [length: 14bytes] Range type of 32bit integer int8range [length: 22bytes] Range type of 64bit integer tsrange [length: 22bytes] Range type of timestamp data tstzrange [length: 22bytes] Range type of timestamp with timezone data daterange [length: 14bytes] Range type of date type","title":"Range data types"},{"location":"ref_types/#geometry-data-types","text":"geometry [length: variable] Geometry object of PostGIS","title":"Geometry data types"},{"location":"release_v2.0/","text":"PG-Strom v2.0 Release PG-Strom Development Team (17-Apr-2018) Overview Major enhancement in PG-Strom v2.0 includes: Overall redesign of the internal infrastructure to manage GPU and stabilization CPU+GPU hybrid parallel execution SSD-to-GPU Direct SQL Execution In-memory columnar cache GPU memory store (gstore_fdw) Redesign of GpuJoin and GpuPreAgg and speed-up GpuPreAgg + GpuJoin + GpuScan combined GPU kernel You can download the summary of new features from: PG-Strom v2.0 Technical Brief . Prerequisites PostgreSQL v9.6, v10 CUDA Toolkit 9.1 Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or Volta) New Features Entire re-design and stabilization of the internal infrastructure to manage GPU device. PostgreSQL backend process simultaneously uses only one GPU at most. In case of multi-GPUs installation, it assumes combination use with CPU parallel execution of PostgreSQL. Usually, it is not a matter because throughput of CPU to provide data to GPU is much narrower than capability of GPU processors. We prioritized simpleness of the software architecture. We began to utilize the demand paging feature of GPU device memory supported at the GPU models since Pascal generation. In most of SQL workloads, we cannot know exact size of the required result buffer prior to its execution, therefore, we had allocated more buffer than estimated buffer length, and retried piece of the workloads if estimated buffer size is not sufficient actually. This design restricts available resources of GPU which can be potentially used for other concurrent processes, and complicated error-retry logic was a nightmare for software quality. The demand paging feature allows to eliminate and simplify these stuffs. We stop to use CUDA asynchronous interface. Use of the demand paging feature on GPU device memory makes asynchronous APIs for DMA (like cuMemCpyHtoD ) perform synchronously, then it reduces concurrency and usage ratio of GPU kernels. Instead of the CUDA asynchronous APIs, PG-Strom manages its own worker threads which call synchronous APIs for each. As a by-product, we also could eliminate asynchronous callbacks ( cuStreamAddCallback ), it allows to use MPS daemon which has a restriction at this API. CPU+GPU Hybrid Parallel Execution CPU parallel execution at PostgreSQL v9.6 is newly supported. CustomScan logic of GpuScan, GpuJoin and GpuPreAgg provided by PG-Strom are executable on multiple background worker processes of PostgreSQL in parallel. Limitation: PG-Strom's own statistics displayed at EXPLAIN ANALYZE if CPU parallel execution. Because PostgreSQL v9.6 does not provide ShutdownCustomScan callback of the CustomScan interface, coordinator process has no way to reclaim information of worker processes prior to the release of DSM (Dynamic Shared Memory) segment. SSD-to-GPU Direct SQL Execution By cooperation with the nvme_strom Linux kernel module, it enables to load PostgreSQL's data blocks on NVMe-SSD to GPU device memory directly, bypassing the CPU and host buffer. This feature enables to apply PG-Strom on the area which have to process large data set more than system RAM size. It allows to pull out pretty high throughput close to the hardware limitation because its data stream skips block-device or filesystem layer. Then, GPU runs SQL workloads that usually reduce the amount of data to be processed by CPU. The chemical reaction of these characteristics enables to redefine GPU's role as accelerator of I/O workloads also, not only computing intensive workloads. In-memory Columnar Cache For middle size data-set loadable onto the system RAM, it allows to cache data-blocks in column format which is more suitable for GPU computing. If cached data-blocks are found during table scan, PG-Strom prefers to reference the columnar cache more than shared buffer of PostgreSQL. In-memory columnar cache can be built synchronously, or asynchronously by the background workers. You may remember very early revision of PG-Strom had similar feature. In case when a cached tuple gets updated, the latest in-memory columnar cache which we newly implemented in v2.0 invalidates the cache block which includes the updated tuples. It never updates the columnar cache according to the updates of row-store, so performance degradation is quite limited. GPU Memory Store (gstore_fdw) It enables to write to / read from preserved GPU device memory region by SELECT/INSERT/UPDATE/DELETE in SQL-level, using foreign table interface. In v2.0, only pgstrom internal data format is supported. It saves written data using PG-Strom's buffer format of KDS_FORMAT_COLUMN . It can compress variable length data using LZ algorithm. In v2.0, GPU memory store can be used as data source of PL/CUDA user defined function. Redesign and performance improvement of GpuJoin and GpuPreAgg Stop using Dynamic Parallelism which we internally used in GpuJoin and GpuPreAgg, and revised entire logic of these operations. Old design had a problem of less GPU usage ratio because a GPU kernel which launches GPU sub-kernel and just waits for its completion occupied GPU's execution slot. A coproduct of this redesign is suspend/resume of GpuJoin. In principle, JOIN operation of SQL may generate larger number of rows than number of input rows, but preliminary not predictive. The new design allows to suspend GPU kernel once buffer available space gets lacked, then resume with new result buffer. It simplifies size estimation logic of the result buffer, and eliminates GPU kernel retry by lack of buffer on run-time. GpuPreAgg+GpuJoin+GpuScan combined GPU kernel In case when GPU executable SCAN, JOIN and GROUP BY are serially cascaded, a single GPU kernel invocation runs a series of tasks equivalent to the GpuScan, GpuJoin and GpuPreAgg. This is an approach to minimize data exchange between CPU and GPU. For example, result buffer of GpuJoin is used as input buffer of GpuPreAgg. This feature is especially valuable if combined with SSD-to-GPU Direct SQL Execution. PL/CUDA Enhancement #plcuda_include is enhanced to specify SQL function which returns text type. It can change the code block to inject according to the argument, so it also allows to generate multiple GPU kernel variations, not only inclusion of externally defined functions. If PL/CUDA takes reggstore type argument, GPU kernel function receives pointer of the GPU memory store. Note that it does not pass the OID value. Other Enhancement lo_import_gpu and lo_export_gpu functions allows to import contents of the GPU device memory acquired by external applications directly, or export contents of the largeobject to the GPU device memory. Packaging Add RPM packages to follow the PostgreSQL packages distributed by PostgreSQL Global Development Group. All the software packages are available at HeteroDB SWDC(Software Distribution Center) and downloadable. Document PG-Strom documentation was entirely rewritten using markdown and mkdocs. It makes documentation maintenance easier than the previous HTML based approach, so expects timely updates according to the development of new features. Test Regression test for PG-Strom was built on top of the regression test framework of PostgreSQL. Dropped features PostgreSQL v9.5 Support PostgreSQL v9.6 had big changes in both of the optimizer and executor to support CPU parallel query execution. The biggest change for extension modules that interact them is an enhancement of the interface called \"upper planner path-ification\". It allows to choose an optimal execution-plan from the multiple candidates based on the estimated cost, even if it is aggregation or sorting. It is fundamentally different from the older way where we rewrote query execution plan to inject GpuPreAgg using the hooks. It allows to inject GpuPreAgg node in more reasonable and reliable way, and we could drop complicated (and buggy) logic to rewrite query execution plan once constructed. CustomScan interface is also enhanced to support CPU parallel execution. Due to the reason, we dropped PostgreSQL v9.5 support to follow these new enhancement. GpuSort feature We dropped GpuSort because we have little advantages in the performance. Sorting is one of the GPU suitable workloads. However, in case when we try to sort data blocks larger than GPU device memory, we have to split the data blocks into multiple chunks, then partially sort them and merge them by CPU to generate final results. Larger chunk size is better to reduce the load to merge multiple chunks by CPU, on the other hands, larger chunk size takes larger lead time to launch GPU kernel to sort. It means here is a trade-off; which disallows asynchronous processing by PG-Strom to make data transfer latency invisible. It is hard to solve the problem, or too early to solve the problem, we dropped GpuSort feature once.","title":"PG-Strom v2.0"},{"location":"release_v2.0/#pg-strom-v20-release","text":"PG-Strom Development Team (17-Apr-2018)","title":"PG-Strom v2.0 Release"},{"location":"release_v2.0/#overview","text":"Major enhancement in PG-Strom v2.0 includes: Overall redesign of the internal infrastructure to manage GPU and stabilization CPU+GPU hybrid parallel execution SSD-to-GPU Direct SQL Execution In-memory columnar cache GPU memory store (gstore_fdw) Redesign of GpuJoin and GpuPreAgg and speed-up GpuPreAgg + GpuJoin + GpuScan combined GPU kernel You can download the summary of new features from: PG-Strom v2.0 Technical Brief .","title":"Overview"},{"location":"release_v2.0/#prerequisites","text":"PostgreSQL v9.6, v10 CUDA Toolkit 9.1 Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or Volta)","title":"Prerequisites"},{"location":"release_v2.0/#new-features","text":"Entire re-design and stabilization of the internal infrastructure to manage GPU device. PostgreSQL backend process simultaneously uses only one GPU at most. In case of multi-GPUs installation, it assumes combination use with CPU parallel execution of PostgreSQL. Usually, it is not a matter because throughput of CPU to provide data to GPU is much narrower than capability of GPU processors. We prioritized simpleness of the software architecture. We began to utilize the demand paging feature of GPU device memory supported at the GPU models since Pascal generation. In most of SQL workloads, we cannot know exact size of the required result buffer prior to its execution, therefore, we had allocated more buffer than estimated buffer length, and retried piece of the workloads if estimated buffer size is not sufficient actually. This design restricts available resources of GPU which can be potentially used for other concurrent processes, and complicated error-retry logic was a nightmare for software quality. The demand paging feature allows to eliminate and simplify these stuffs. We stop to use CUDA asynchronous interface. Use of the demand paging feature on GPU device memory makes asynchronous APIs for DMA (like cuMemCpyHtoD ) perform synchronously, then it reduces concurrency and usage ratio of GPU kernels. Instead of the CUDA asynchronous APIs, PG-Strom manages its own worker threads which call synchronous APIs for each. As a by-product, we also could eliminate asynchronous callbacks ( cuStreamAddCallback ), it allows to use MPS daemon which has a restriction at this API. CPU+GPU Hybrid Parallel Execution CPU parallel execution at PostgreSQL v9.6 is newly supported. CustomScan logic of GpuScan, GpuJoin and GpuPreAgg provided by PG-Strom are executable on multiple background worker processes of PostgreSQL in parallel. Limitation: PG-Strom's own statistics displayed at EXPLAIN ANALYZE if CPU parallel execution. Because PostgreSQL v9.6 does not provide ShutdownCustomScan callback of the CustomScan interface, coordinator process has no way to reclaim information of worker processes prior to the release of DSM (Dynamic Shared Memory) segment. SSD-to-GPU Direct SQL Execution By cooperation with the nvme_strom Linux kernel module, it enables to load PostgreSQL's data blocks on NVMe-SSD to GPU device memory directly, bypassing the CPU and host buffer. This feature enables to apply PG-Strom on the area which have to process large data set more than system RAM size. It allows to pull out pretty high throughput close to the hardware limitation because its data stream skips block-device or filesystem layer. Then, GPU runs SQL workloads that usually reduce the amount of data to be processed by CPU. The chemical reaction of these characteristics enables to redefine GPU's role as accelerator of I/O workloads also, not only computing intensive workloads. In-memory Columnar Cache For middle size data-set loadable onto the system RAM, it allows to cache data-blocks in column format which is more suitable for GPU computing. If cached data-blocks are found during table scan, PG-Strom prefers to reference the columnar cache more than shared buffer of PostgreSQL. In-memory columnar cache can be built synchronously, or asynchronously by the background workers. You may remember very early revision of PG-Strom had similar feature. In case when a cached tuple gets updated, the latest in-memory columnar cache which we newly implemented in v2.0 invalidates the cache block which includes the updated tuples. It never updates the columnar cache according to the updates of row-store, so performance degradation is quite limited. GPU Memory Store (gstore_fdw) It enables to write to / read from preserved GPU device memory region by SELECT/INSERT/UPDATE/DELETE in SQL-level, using foreign table interface. In v2.0, only pgstrom internal data format is supported. It saves written data using PG-Strom's buffer format of KDS_FORMAT_COLUMN . It can compress variable length data using LZ algorithm. In v2.0, GPU memory store can be used as data source of PL/CUDA user defined function. Redesign and performance improvement of GpuJoin and GpuPreAgg Stop using Dynamic Parallelism which we internally used in GpuJoin and GpuPreAgg, and revised entire logic of these operations. Old design had a problem of less GPU usage ratio because a GPU kernel which launches GPU sub-kernel and just waits for its completion occupied GPU's execution slot. A coproduct of this redesign is suspend/resume of GpuJoin. In principle, JOIN operation of SQL may generate larger number of rows than number of input rows, but preliminary not predictive. The new design allows to suspend GPU kernel once buffer available space gets lacked, then resume with new result buffer. It simplifies size estimation logic of the result buffer, and eliminates GPU kernel retry by lack of buffer on run-time. GpuPreAgg+GpuJoin+GpuScan combined GPU kernel In case when GPU executable SCAN, JOIN and GROUP BY are serially cascaded, a single GPU kernel invocation runs a series of tasks equivalent to the GpuScan, GpuJoin and GpuPreAgg. This is an approach to minimize data exchange between CPU and GPU. For example, result buffer of GpuJoin is used as input buffer of GpuPreAgg. This feature is especially valuable if combined with SSD-to-GPU Direct SQL Execution. PL/CUDA Enhancement #plcuda_include is enhanced to specify SQL function which returns text type. It can change the code block to inject according to the argument, so it also allows to generate multiple GPU kernel variations, not only inclusion of externally defined functions. If PL/CUDA takes reggstore type argument, GPU kernel function receives pointer of the GPU memory store. Note that it does not pass the OID value. Other Enhancement lo_import_gpu and lo_export_gpu functions allows to import contents of the GPU device memory acquired by external applications directly, or export contents of the largeobject to the GPU device memory. Packaging Add RPM packages to follow the PostgreSQL packages distributed by PostgreSQL Global Development Group. All the software packages are available at HeteroDB SWDC(Software Distribution Center) and downloadable. Document PG-Strom documentation was entirely rewritten using markdown and mkdocs. It makes documentation maintenance easier than the previous HTML based approach, so expects timely updates according to the development of new features. Test Regression test for PG-Strom was built on top of the regression test framework of PostgreSQL.","title":"New Features"},{"location":"release_v2.0/#dropped-features","text":"PostgreSQL v9.5 Support PostgreSQL v9.6 had big changes in both of the optimizer and executor to support CPU parallel query execution. The biggest change for extension modules that interact them is an enhancement of the interface called \"upper planner path-ification\". It allows to choose an optimal execution-plan from the multiple candidates based on the estimated cost, even if it is aggregation or sorting. It is fundamentally different from the older way where we rewrote query execution plan to inject GpuPreAgg using the hooks. It allows to inject GpuPreAgg node in more reasonable and reliable way, and we could drop complicated (and buggy) logic to rewrite query execution plan once constructed. CustomScan interface is also enhanced to support CPU parallel execution. Due to the reason, we dropped PostgreSQL v9.5 support to follow these new enhancement. GpuSort feature We dropped GpuSort because we have little advantages in the performance. Sorting is one of the GPU suitable workloads. However, in case when we try to sort data blocks larger than GPU device memory, we have to split the data blocks into multiple chunks, then partially sort them and merge them by CPU to generate final results. Larger chunk size is better to reduce the load to merge multiple chunks by CPU, on the other hands, larger chunk size takes larger lead time to launch GPU kernel to sort. It means here is a trade-off; which disallows asynchronous processing by PG-Strom to make data transfer latency invisible. It is hard to solve the problem, or too early to solve the problem, we dropped GpuSort feature once.","title":"Dropped features"},{"location":"release_v2.2/","text":"PG-Strom v2.2 Release PG-Strom Development Team (1-May-2019) Overview Major enhancement in PG-Strom v2.2 includes: Table partitioning support Columnar store support with Arrow_Fdw Pre-built GPU binary support Enables to implement GPU functions that returns variable length data GpuSort support on GPU memory store (Gstore_Fdw) NVME-oF support (Experimental) Prerequisites PostgreSQL v9.6, v10, v11 CUDA Toolkit 10.1 Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or Volta) New Features Table partitioning support If multi-GPUs configuration, an optimal GPU shall be chosen according to the physical distance between GPU and child tables that construct a partition. If PG-Strom cannot identify the distance from PCIe-bus topology, like NVME-oF configuration, DBA can configure the relation of GPU and NVME-SSD using pg_strom.nvme_distance_map . When we join a partitioned table with non-partition tables, this version can produce a query execution plan that preliminary joins the non-partitioned table with partition child tables for each, and gather the results from child tables. This feature is proposed to PostgreSQL v13 core, as Asymmetric Partition-wise JOIN. Columnar store support with Arrow_Fdw It supports to read external Apache Arrow files using foreign table. It also supports SSD-to-GPU Direct SQL on Apache Arrow files. Pre-built GPU binary support When GPU binary code is generated from SQL, the older version wrote out eitire CUDA C source code, including static portions like libraries, then NVRTC(NVIDIA Run-Time Compiker) built them on the fly. However, a part of complicated function consumed much longer compilation time. v2.2 preliminary builds static functions preliminary, and only dynamic portion from SQL are built dynamically. It reduces the time for GPU binary generation. JSONB data type support This version allows to reference elements of JSONB object, and to utilize them as numeric or test . Enables to implement GPU functions that returns variable length data This version allows to implement SQL functions that returns variable-length data, like textcat , on GPU devices. GpuSort support on GPU memory store (Gstore_Fdw) This version allows to read data from GPU memory store for SQL workloads execution, not only PL/CUDA. Addition of regression test Several simple regression tests are added. NVME-oF support (Experimental) It supports SSD-to-GPU Direct SQL from remote SSD disks which are mounted using NVME-over-Fabric. Please note that it is an experimental feature, and it needs to replace the nvme_rdma kernel module on Red Hat Enterprise Linux 7.x / CentOS 7.x. Features to be deprecated PostgreSQL v9.6 support CustomScan API in PostgreSQL v9.6 lacks a few APIs to handle dynamic shared memory (DSM), so it is unable to collect run-time statistics. It also changes the way to keep expression objects internally, therefore, we had to put #if ... #endif blocks at no little points. It has damaged to code maintainability. Due to the problems, this is the last version to support PostgreSQL v9.6. If you applied PG-Strom on PostgreSQL v9.6, let us recommend to move PostgreSQL v11 as soon as possible. The pgstrom format of Gstore_Fdw foreign table The internal data format on GPU memory store (Gstore_Fdw) is originally designed for data source of PL/CUDA procedures. It is our own format, and used PostgreSQL's data representations as is, like variable-length data, numeric, and so on. After that, NVIDIA released RAPIDS(cuDF), based on Apache Arrow, for data exchange on GPU, then its adoption becomes wider on machine-learning application and Python software stack. PG-Strom will switch its internal data format of Gstore_Fdw, to improve interoperability with these machine-learning software, then existing data format shall be deprecated. Dropped Features In-memory columnar cache As results of use-case analysis, we concluded Arrow_Fdw can replace this feature in most cases. Due to feature duplication, we dropped the in-memory columnar cache.","title":"PG-Strom v2.2"},{"location":"release_v2.2/#pg-strom-v22-release","text":"PG-Strom Development Team (1-May-2019)","title":"PG-Strom v2.2 Release"},{"location":"release_v2.2/#overview","text":"Major enhancement in PG-Strom v2.2 includes: Table partitioning support Columnar store support with Arrow_Fdw Pre-built GPU binary support Enables to implement GPU functions that returns variable length data GpuSort support on GPU memory store (Gstore_Fdw) NVME-oF support (Experimental)","title":"Overview"},{"location":"release_v2.2/#prerequisites","text":"PostgreSQL v9.6, v10, v11 CUDA Toolkit 10.1 Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or Volta)","title":"Prerequisites"},{"location":"release_v2.2/#new-features","text":"Table partitioning support If multi-GPUs configuration, an optimal GPU shall be chosen according to the physical distance between GPU and child tables that construct a partition. If PG-Strom cannot identify the distance from PCIe-bus topology, like NVME-oF configuration, DBA can configure the relation of GPU and NVME-SSD using pg_strom.nvme_distance_map . When we join a partitioned table with non-partition tables, this version can produce a query execution plan that preliminary joins the non-partitioned table with partition child tables for each, and gather the results from child tables. This feature is proposed to PostgreSQL v13 core, as Asymmetric Partition-wise JOIN. Columnar store support with Arrow_Fdw It supports to read external Apache Arrow files using foreign table. It also supports SSD-to-GPU Direct SQL on Apache Arrow files. Pre-built GPU binary support When GPU binary code is generated from SQL, the older version wrote out eitire CUDA C source code, including static portions like libraries, then NVRTC(NVIDIA Run-Time Compiker) built them on the fly. However, a part of complicated function consumed much longer compilation time. v2.2 preliminary builds static functions preliminary, and only dynamic portion from SQL are built dynamically. It reduces the time for GPU binary generation. JSONB data type support This version allows to reference elements of JSONB object, and to utilize them as numeric or test . Enables to implement GPU functions that returns variable length data This version allows to implement SQL functions that returns variable-length data, like textcat , on GPU devices. GpuSort support on GPU memory store (Gstore_Fdw) This version allows to read data from GPU memory store for SQL workloads execution, not only PL/CUDA. Addition of regression test Several simple regression tests are added. NVME-oF support (Experimental) It supports SSD-to-GPU Direct SQL from remote SSD disks which are mounted using NVME-over-Fabric. Please note that it is an experimental feature, and it needs to replace the nvme_rdma kernel module on Red Hat Enterprise Linux 7.x / CentOS 7.x.","title":"New Features"},{"location":"release_v2.2/#features-to-be-deprecated","text":"PostgreSQL v9.6 support CustomScan API in PostgreSQL v9.6 lacks a few APIs to handle dynamic shared memory (DSM), so it is unable to collect run-time statistics. It also changes the way to keep expression objects internally, therefore, we had to put #if ... #endif blocks at no little points. It has damaged to code maintainability. Due to the problems, this is the last version to support PostgreSQL v9.6. If you applied PG-Strom on PostgreSQL v9.6, let us recommend to move PostgreSQL v11 as soon as possible. The pgstrom format of Gstore_Fdw foreign table The internal data format on GPU memory store (Gstore_Fdw) is originally designed for data source of PL/CUDA procedures. It is our own format, and used PostgreSQL's data representations as is, like variable-length data, numeric, and so on. After that, NVIDIA released RAPIDS(cuDF), based on Apache Arrow, for data exchange on GPU, then its adoption becomes wider on machine-learning application and Python software stack. PG-Strom will switch its internal data format of Gstore_Fdw, to improve interoperability with these machine-learning software, then existing data format shall be deprecated.","title":"Features to be deprecated"},{"location":"release_v2.2/#dropped-features","text":"In-memory columnar cache As results of use-case analysis, we concluded Arrow_Fdw can replace this feature in most cases. Due to feature duplication, we dropped the in-memory columnar cache.","title":"Dropped Features"},{"location":"release_v2.3/","text":"PG-Strom v2.3 Release PG-Strom Development Team (1-Apr-2020) Overview Major changes in PG-Strom v2.3 includes: GpuJoin supports parallel construction of inner buffer Arrow_Fdw now becomes writable; supports INSERT/TRUNCATE. pg2arrow command supports 'append' mode. mysql2arrow command was added. Prerequisites PostgreSQL v10, v11, v12 CUDA Toolkit 10.1 or later Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or Volta) New Features GpuJoin supports parallel construction of inner buffer The older version construct inner buffer of GpuJoin by the backend process only. This restriction leads a problem; parallel scan of partitioned table delays extremely. This version allows both of the backend and worker processes to construct inner buffer. In case when we scan a partitioned table, any processes that is assigned to a particular child table can start GpuJoin operations immediately. Refactoring of the partition-wise asymmetric GpuJoin By the refactoring of the partition-wise asymmetric GpuJoin, optimizer becomes to prefer multi-level GpuJoin in case when it offers cheaper execution cost. Arrow_Fdw becomes writable; INSERT/TRUNCATE supported Arrow_Fdw foreign table allows bulk-loading by INSERT and data elimination by pgstrom.arrow_fdw_truncate . pg2arrow command supports 'append' mode. We added --append option for pg2arrow command. As literal, it appends query results on existing Apache Arrow file. Also, -t table option was added as an alias of SELECT * FROM table . mysql2arrow command was added. We added mysql2arrow command that connects to MySQL server, not PostgreSQL, and write out SQL query results as Apache Arrow files. It has equivalent functionality to pg2arrow except for enum data type. mysql2arrow saves enum values as flat Utf8 values without DictionaryBatch chunks. Regression test was added Several test cases were added according to the PostgreSQL regression test framework. Significant bug fixes Revised cache invalidation logic for GPU device functions / types The older version had invalidated all the metadata cache entries of GPU device functions / type on execution of ALTER command. It was revised to invalidate the entries that are actually updated. Revised extreme performance degradation if GROUP BY has same grouping key twice or even number times. GpuPreAgg combined hash values of grouping key of GROUP BY using XOR. So, if case when same column appeared even number time, it always leads 0 for hash-index problematically. Now we add a randomization for better hash distribution. Potential infinite loop on GpuScan By uninitialized values, GpuScan potentially goes to infinite loop when SSD2GPU Direct SQL is available. Potential GPU kernel crash on GpuJoin By uninitialized values, GpuJoin potentially makes GPU kernel crash when 3 or more tables are joined. Deprecated Features PostgreSQL v9.6 Support CustomScan API in PostgreSQL v9.6 lacks a few APIs to handle dynamic shared memory (DSM). It has been a problem to handle a common code for v10 or later. To avoid the problem, we dropped PostgreSQL v9.6 support in this version. PL/CUDA According to the usecase analytics, users prefer familiar programming language environment like Python, rather than own special environment. A combination of Arrow_Fdw's GPU export functionality and CuPy invocation at PL/Python is a successor of PL/CUDA, for in-database machine-learning / statistical analytics. Gstore_Fdw This feature is replaced by the writable Arrow_Fdw and its GPU export functionality. Largeobject export to/import from GPU According to the usecase analytics, we determined this feature is not needed.","title":"PG-Strom v2.3"},{"location":"release_v2.3/#pg-strom-v23-release","text":"PG-Strom Development Team (1-Apr-2020)","title":"PG-Strom v2.3 Release"},{"location":"release_v2.3/#overview","text":"Major changes in PG-Strom v2.3 includes: GpuJoin supports parallel construction of inner buffer Arrow_Fdw now becomes writable; supports INSERT/TRUNCATE. pg2arrow command supports 'append' mode. mysql2arrow command was added.","title":"Overview"},{"location":"release_v2.3/#prerequisites","text":"PostgreSQL v10, v11, v12 CUDA Toolkit 10.1 or later Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or Volta)","title":"Prerequisites"},{"location":"release_v2.3/#new-features","text":"GpuJoin supports parallel construction of inner buffer The older version construct inner buffer of GpuJoin by the backend process only. This restriction leads a problem; parallel scan of partitioned table delays extremely. This version allows both of the backend and worker processes to construct inner buffer. In case when we scan a partitioned table, any processes that is assigned to a particular child table can start GpuJoin operations immediately. Refactoring of the partition-wise asymmetric GpuJoin By the refactoring of the partition-wise asymmetric GpuJoin, optimizer becomes to prefer multi-level GpuJoin in case when it offers cheaper execution cost. Arrow_Fdw becomes writable; INSERT/TRUNCATE supported Arrow_Fdw foreign table allows bulk-loading by INSERT and data elimination by pgstrom.arrow_fdw_truncate . pg2arrow command supports 'append' mode. We added --append option for pg2arrow command. As literal, it appends query results on existing Apache Arrow file. Also, -t table option was added as an alias of SELECT * FROM table . mysql2arrow command was added. We added mysql2arrow command that connects to MySQL server, not PostgreSQL, and write out SQL query results as Apache Arrow files. It has equivalent functionality to pg2arrow except for enum data type. mysql2arrow saves enum values as flat Utf8 values without DictionaryBatch chunks. Regression test was added Several test cases were added according to the PostgreSQL regression test framework.","title":"New Features"},{"location":"release_v2.3/#significant-bug-fixes","text":"Revised cache invalidation logic for GPU device functions / types The older version had invalidated all the metadata cache entries of GPU device functions / type on execution of ALTER command. It was revised to invalidate the entries that are actually updated. Revised extreme performance degradation if GROUP BY has same grouping key twice or even number times. GpuPreAgg combined hash values of grouping key of GROUP BY using XOR. So, if case when same column appeared even number time, it always leads 0 for hash-index problematically. Now we add a randomization for better hash distribution. Potential infinite loop on GpuScan By uninitialized values, GpuScan potentially goes to infinite loop when SSD2GPU Direct SQL is available. Potential GPU kernel crash on GpuJoin By uninitialized values, GpuJoin potentially makes GPU kernel crash when 3 or more tables are joined.","title":"Significant bug fixes"},{"location":"release_v2.3/#deprecated-features","text":"PostgreSQL v9.6 Support CustomScan API in PostgreSQL v9.6 lacks a few APIs to handle dynamic shared memory (DSM). It has been a problem to handle a common code for v10 or later. To avoid the problem, we dropped PostgreSQL v9.6 support in this version. PL/CUDA According to the usecase analytics, users prefer familiar programming language environment like Python, rather than own special environment. A combination of Arrow_Fdw's GPU export functionality and CuPy invocation at PL/Python is a successor of PL/CUDA, for in-database machine-learning / statistical analytics. Gstore_Fdw This feature is replaced by the writable Arrow_Fdw and its GPU export functionality. Largeobject export to/import from GPU According to the usecase analytics, we determined this feature is not needed.","title":"Deprecated Features"},{"location":"release_v3.0/","text":"PG-Strom v3.0 Release PG-Strom Development Team (29-Jun-2021) Overview Major changes in PG-Strom v3.0 are as follows: NVIDIA GPUDirect Storage (cuFile) is now supported. Several PostGIS functions are executable on GPUs. GpuJoin using GiST index is now supported. GPU Cache mechanism is newly implemented. User-defined GPU data types/functions/operators are experimentally supported. Software license was switched from GPLv2 to PostgreSQL license. Prerequisites PostgreSQL v11, v12, v13 CUDA Toolkit 11.2 or later Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or newer) NVIDIA GPUDirect Storage GPUDirect Storage , has been developed by NVIDIA, is now supported as a driver for GPU Direct SQL , in addition to the existing nvme_strom kernel module. Both of drivers have almost equivalent functionalities and performance, but supports of GPUDirect Storage enables P2P direct read from NVME-oF (NVME over Fabrics) devices, SDS (Software Defined Storage) devices and shared filesystem built on these devices. Therefore, it offers larger and more flexible storage configuration. We can use GPUDirect SQL to scan PostgreSQL's heap table and Apache Arrow files. It can expect significant performance improvement for the workloads where table scans are the major bottleneck, in either driver cases. The performance measurement below is by SSBM (Star Schema Benchmark) using 1xGPU and 4xNVME-SSDs under the GPUDirect Storage driver. It shows number of rows processed per unit time is significantly improved regardless of the storage system; either PostgreSQL heap or Apache Arrow. In comparison of the read throughput from NVME-SSD drives during the query execution, it shows the table scan by GPUDirect Storage pulls out almost optimal performance close to the hardware limitation, much faster than the scan by filesystem (PostgreSQL Heap Storage). GPU-PostGIS and GiST-index We have implemented GPU versions of several PostGIS functions. When these PostGIS functions are used in qualifier clauses (like, WHERE-clause), PG-Strom will automatically generate a GPU program to execute it on the GPU. The main target of GPU version of PostGIS is the workload to check the real-time location data of mobile devices, like smartphones or vehicles, against the area definition data like boundary of municipality or school districts. For example, when you want to deliver an advertisement to smartphonws in a particular area, or when you want to deliver traffic jam information to cara in a particular area, it is effective in the process of searching for the corresponding device using the position as a key. In the following example, it creates 16 million random points data in a rectangular area that includes the Tokyo region, then count up number of the points contained in the cities in Tokyo for each. The vanilla PostGIS and GiST index took more than 160sec, on the other hand, GPU-version of PostGIS and GiST index responded in 0.830 sec. GPU Cache GPU Cache mechanism can store a copy of the target table in a pre-allocated area on the GPU device memory. It was designed for efficient execution of analytical/search queries on frequently updated data with relatively small data size (~10GB). The GPU can process SQL workloads by referring to GPU Cache instead of loading data from tables when executing analytical/search queries. This is typically a workload that keeps real-time data from millions of devices on the GPU and frequently updates timestamps and location information. When the table with GPU cache is updated, the update history is stored in the on-memory redo log buffer, then applied to the GPU cache at a regular intervals or before executing the analysis / search workload. By this mechanism, it achieved both of frequent updates and consistency of GPU cache. User-defined GPU datatype/functions A new API is provided to add user-defined GPU data types/functions. This allows users to define and implement their own niche data types and SQL functions to process them, without modifying PG-Strom itself. Notice This API is still under the experimental state, so its specifications may be changed without notifications. Also note that we assume the users of this API well understand PG-Strom internal, so no documentations are provided right now. PostgreSQL License Adoption PG-Strom v3.0 or later adopt the PostgreSQL License. The earlier version of PG-Strom has used GPLv2 due to the historical background, however, we recognized several concerns that license mismatch prevents joint solution development using PG-Strom core features and comprehensive tools. Other updates Unique int1 (8-bit integer) data type and related operators are now supported. --inner-join and --outer-join options are now available for pg2arrow . Apache Arrow files having more columns than the limit of PostgreSQL can now be generated. In a multi-GPU environment, the GPU Memory Keeper background worker will now be launched for each GPU. PostgreSQL v13.x is now supported. CUDA 11.2 and Ampere generation GPUs are now supported. GPUDirect SQL now supports ScaleFlux's Computational Storage CSD2000 series (only cuFile driver). Miscellaneous bug fixes Deprecated Features Support for PostgreSQL v10.x has been discontinued. The feature to link data with Python scripts (PyStrom) has been discontinued.","title":"PG-Strom v3.0"},{"location":"release_v3.0/#pg-strom-v30-release","text":"PG-Strom Development Team (29-Jun-2021)","title":"PG-Strom v3.0 Release"},{"location":"release_v3.0/#overview","text":"Major changes in PG-Strom v3.0 are as follows: NVIDIA GPUDirect Storage (cuFile) is now supported. Several PostGIS functions are executable on GPUs. GpuJoin using GiST index is now supported. GPU Cache mechanism is newly implemented. User-defined GPU data types/functions/operators are experimentally supported. Software license was switched from GPLv2 to PostgreSQL license.","title":"Overview"},{"location":"release_v3.0/#prerequisites","text":"PostgreSQL v11, v12, v13 CUDA Toolkit 11.2 or later Linux distributions supported by CUDA Toolkit Intel x86 64bit architecture (x86_64) NVIDIA GPU CC 6.0 or later (Pascal or newer)","title":"Prerequisites"},{"location":"release_v3.0/#nvidia-gpudirect-storage","text":"GPUDirect Storage , has been developed by NVIDIA, is now supported as a driver for GPU Direct SQL , in addition to the existing nvme_strom kernel module. Both of drivers have almost equivalent functionalities and performance, but supports of GPUDirect Storage enables P2P direct read from NVME-oF (NVME over Fabrics) devices, SDS (Software Defined Storage) devices and shared filesystem built on these devices. Therefore, it offers larger and more flexible storage configuration. We can use GPUDirect SQL to scan PostgreSQL's heap table and Apache Arrow files. It can expect significant performance improvement for the workloads where table scans are the major bottleneck, in either driver cases. The performance measurement below is by SSBM (Star Schema Benchmark) using 1xGPU and 4xNVME-SSDs under the GPUDirect Storage driver. It shows number of rows processed per unit time is significantly improved regardless of the storage system; either PostgreSQL heap or Apache Arrow. In comparison of the read throughput from NVME-SSD drives during the query execution, it shows the table scan by GPUDirect Storage pulls out almost optimal performance close to the hardware limitation, much faster than the scan by filesystem (PostgreSQL Heap Storage).","title":"NVIDIA GPUDirect Storage"},{"location":"release_v3.0/#gpu-postgis-and-gist-index","text":"We have implemented GPU versions of several PostGIS functions. When these PostGIS functions are used in qualifier clauses (like, WHERE-clause), PG-Strom will automatically generate a GPU program to execute it on the GPU. The main target of GPU version of PostGIS is the workload to check the real-time location data of mobile devices, like smartphones or vehicles, against the area definition data like boundary of municipality or school districts. For example, when you want to deliver an advertisement to smartphonws in a particular area, or when you want to deliver traffic jam information to cara in a particular area, it is effective in the process of searching for the corresponding device using the position as a key. In the following example, it creates 16 million random points data in a rectangular area that includes the Tokyo region, then count up number of the points contained in the cities in Tokyo for each. The vanilla PostGIS and GiST index took more than 160sec, on the other hand, GPU-version of PostGIS and GiST index responded in 0.830 sec.","title":"GPU-PostGIS and GiST-index"},{"location":"release_v3.0/#gpu-cache","text":"GPU Cache mechanism can store a copy of the target table in a pre-allocated area on the GPU device memory. It was designed for efficient execution of analytical/search queries on frequently updated data with relatively small data size (~10GB). The GPU can process SQL workloads by referring to GPU Cache instead of loading data from tables when executing analytical/search queries. This is typically a workload that keeps real-time data from millions of devices on the GPU and frequently updates timestamps and location information. When the table with GPU cache is updated, the update history is stored in the on-memory redo log buffer, then applied to the GPU cache at a regular intervals or before executing the analysis / search workload. By this mechanism, it achieved both of frequent updates and consistency of GPU cache.","title":"GPU Cache"},{"location":"release_v3.0/#user-defined-gpu-datatypefunctions","text":"A new API is provided to add user-defined GPU data types/functions. This allows users to define and implement their own niche data types and SQL functions to process them, without modifying PG-Strom itself. Notice This API is still under the experimental state, so its specifications may be changed without notifications. Also note that we assume the users of this API well understand PG-Strom internal, so no documentations are provided right now.","title":"User-defined GPU datatype/functions"},{"location":"release_v3.0/#postgresql-license-adoption","text":"PG-Strom v3.0 or later adopt the PostgreSQL License. The earlier version of PG-Strom has used GPLv2 due to the historical background, however, we recognized several concerns that license mismatch prevents joint solution development using PG-Strom core features and comprehensive tools.","title":"PostgreSQL License Adoption"},{"location":"release_v3.0/#other-updates","text":"Unique int1 (8-bit integer) data type and related operators are now supported. --inner-join and --outer-join options are now available for pg2arrow . Apache Arrow files having more columns than the limit of PostgreSQL can now be generated. In a multi-GPU environment, the GPU Memory Keeper background worker will now be launched for each GPU. PostgreSQL v13.x is now supported. CUDA 11.2 and Ampere generation GPUs are now supported. GPUDirect SQL now supports ScaleFlux's Computational Storage CSD2000 series (only cuFile driver). Miscellaneous bug fixes","title":"Other updates"},{"location":"release_v3.0/#deprecated-features","text":"Support for PostgreSQL v10.x has been discontinued. The feature to link data with Python scripts (PyStrom) has been discontinued.","title":"Deprecated Features"},{"location":"ssd2gpu/","text":"GPU Direct SQL Execution Overview For the fast execution of SQL workloads, it needs to provide processors rapid data stream from storage or memory, in addition to processor's execution efficiency. Processor will run idle if data stream would not be delivered. GPUDirect SQL Execution directly connects NVMe-SSD which enables high-speed I/O processing by direct attach to the PCIe bus and GPU device that is also attached on the same PCIe bus, and runs SQL workloads very high speed by supplying data stream close to the wired speed of the hardware. Usually, PostgreSQL data blocks on the storage shall be once loaded to CPU/RAM through the PCIe bus, then, PostgreSQL runs WHERE-clause for filtering or JOIN/GROUP BY according to the query execution plan. Due to the characteristics of analytic workloads, the amount of result data set is much smaller than the source data set. For example, it is not rare case to read billions rows but output just hundreds rows after the aggregation operations with GROUP BY. In the other words, we consume bandwidth of the PCIe bus to move junk data, however, we cannot determine whether rows are necessary or not prior to the evaluation by SQL workloads on CPU. So, it is not avoidable restriction in usual implementation. GPU Direct SQL Execution changes the flow to read blocks from the storage sequentially. It directly loads data blocks to GPU using peer-to-peer DMA over PCIe bus, then runs SQL workloads on GPU device to reduce number of rows to be processed by CPU. In other words, it utilizes GPU as a pre-processor of SQL which locates in the middle of the storage and CPU/RAM for reduction of CPU's load, then tries to accelerate I/O processing in the results. This feature internally uses either of NVIDIA GPUDirect Storage module or NVME-Strom module (if RHEL7/CentOS7), that is a Linux kernel module originally designed by HeteroDB, to coordinate P2P data transfer from NVME storage to GPU device memory. So, this feature requires either of the above Linux kernel modules, in addition to PG-Strom as an extension of PostgreSQL. Also note that this feature supports only NVME-SSD or NVME-oF remove devices. It does not support legacy storages like SAS or SATA-SSD. We have tested several NVMD-SSD models. You can refer 002: HW Validation List for your information. System Setup Driver Installation When PG-Strom is used on a RHEL7/CentOS7 platform, for existing PG-Strom systems in other words, GPUDirect SQL Execution requires NVME-Strom driver by HeteroDB. See the (\"Install\" -> \"heterodb-kmod Installation\")[../install/#heterodb-kmod] of this manual for more details. Note GPUDirect SQL by NVME-Strom driver supports only local NVME-SSD drives. We experimentally provide a driver for NVME-oF devices, but don't recommend to use in commercial systems. For usage of PG-Strom on the platform other than RHEL7/CentOS7, for newly installed PG-Strom systems in other words, GPUDirect SQL Execution requires NVIDIA GPUDirect Storage. It also requires to install the MOFED(Mellanox Open Fabrics Enterprise Distribution) driver with support of GPUDirect Storage, in addition to the GPUDirect Storage module itself. See the (\u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u300d\u21d2\u300cNVIDIA GPUDirect Storage\u300d)[../install/#nvidia-gpudirect-storage] of this manual for more details. Designing Tablespace GPU Direct SQL Execution shall be invoked in the following case. The target table to be scanned locates on the partition being consist of NVMe-SSD. /dev/nvmeXXXX block device, or md-raid0 volume which consists of NVMe-SSDs only. The target table size is larger than pg_strom.nvme_strom_threshold . You can adjust this configuration. Its default is physical RAM size of the system plus 1/3 of shared_buffers configuration. Note Striped read from multiple NVMe-SSD using md-raid0 requires the enterprise subscription provided by HeteroDB,Inc. In order to deploy the tables on the partition consists of NVMe-SSD, you can use the tablespace function of PostgreSQL to specify particular tables or databases to place them on NVMe-SSD volume, in addition to construction of the entire database cluster on the NVMe-SSD volume. For example, you can create a new tablespace below, if NVMe-SSD is mounted at /opt/nvme . CREATE TABLESPACE my_nvme LOCATION '/opt/nvme'; In order to create a new table on the tablespace, specify the TABLESPACE option at the CREATE TABLE command below. CREATE TABLE my_table (...) TABLESPACE my_nvme; Or, use ALTER DATABASE command as follows, to change the default tablespace of the database. Note that tablespace of the existing tables are not changed in thie case. ALTER DATABASE my_database SET TABLESPACE my_nvme; Operations Distance between GPU and NVME-SSD On selection of server hardware and installation of GPU and NVME-SSD, hardware configuration needs to pay attention to the distance between devices, to pull out maximum performance of the device. NVIDIA GPUDirect RDMA , basis of the SSD-to-GPU Direct SQL mechanism, requires both of the edge devices of P2P DMA are connected on the same PCIe root complex. In the other words, unable to configure the P2P DMA traverses QPI between CPUs when NVME-SSD is attached on CPU1 and GPU is attached on CPU2 at dual socket system. From standpoint of the performance, it is recommended to use dedicated PCIe-switch to connect both of the devices more than the PCIe controller built in CPU. The photo below is a motherboard of HPC server. It has 8 of PCIe x16 slots, and each pair is linked to the other over the PCIe switch. The slots in the left-side of the photo are connected to CPU1, and right-side are connected to CPU2. When a table on SSD-2 is scanned using SSD-to-GPU Direct SQL, the optimal GPU choice is GPU-2, and it may be able to use GPU1. However, we have to avoid to choose GPU-3 and GPU-4 due to the restriction of GPUDirect RDMA. PG-Strom calculate logical distances on any pairs of GPU and NVME-SSD using PCIe bus topology information of the system on startup time. It is displayed at the start up log. Each NVME-SSD determines the preferable GPU based on the distance, for example, GPU1 shall be used on scan of the /dev/nvme2 . $ pg_ctl restart : LOG: GPU<->SSD Distance Matrix LOG: GPU0 GPU1 GPU2 LOG: nvme0 ( 3) 7 7 LOG: nvme5 7 7 ( 3) LOG: nvme4 7 7 ( 3) LOG: nvme2 7 ( 3) 7 LOG: nvme1 ( 3) 7 7 LOG: nvme3 7 ( 3) 7 : Usually automatic configuration works well. In case when NVME-over-Fabric(RDMA) is used, unable to identify the location of nvme device on the PCIe-bus, so you need to configure the logical distance between NVME-SSD and GPU manually. The example below shows the configuration of gpu2 for nvme1 , and gpu1 for nvme2 and nvme3 . It shall be added to postgresql.conf . Please note than manual configuration takes priority than the automatic configuration. pg_strom.nvme_distance_map = nvme1:gpu2, nvme2:gpu1, nvme3:gpu1 Controls using GUC parameters There are two GPU parameters related to GPU Direct SQL Execution. The first is pg_strom.nvme_strom_enabled that simply turn on/off the function of SSD-to-GPU Direct SQL Execution. If off , SSD-to-GPU Direct SQL Execution should not be used regardless of the table size or physical location. Default is on . The other one is pg_strom.nvme_strom_threshold which specifies the least table size to invoke SSD-to-GPU Direct SQL Execution. PG-Strom will choose SSD-to-GPU Direct SQL Execution when target table is located on NVMe-SSD volume (or md-raid0 volume which consists of NVMe-SSD only), and the table size is larger than this parameter. Its default is sum of the physical memory size and 1/3 of the shared_buffers . It means default configuration invokes SSD-to-GPU Direct SQL Execution only for the tables where we certainly cannot process them on memory. Even if SSD-to-GPU Direct SQL Execution has advantages on a single table scan workload, usage of disk cache may work better on the second or later trial for the tables which are available to load onto the main memory. On course, this assumption is not always right depending on the workload charasteristics. Ensure usage of SSD-to-GPU Direct SQL Execution EXPLAIN command allows to ensure whether SSD-to-GPU Direct SQL Execution shall be used in the target query, or not. In the example below, a scan on the lineorder table by Custom Scan (GpuJoin) shows NVMe-Strom: enabled . In this case, SSD-to-GPU Direct SQL Execution shall be used to read from the lineorder table. # explain (costs off) select sum(lo_revenue), d_year, p_brand1 from lineorder, date1, part, supplier where lo_orderdate = d_datekey and lo_partkey = p_partkey and lo_suppkey = s_suppkey and p_category = 'MFGR#12' and s_region = 'AMERICA' group by d_year, p_brand1 order by d_year, p_brand1; QUERY PLAN ---------------------------------------------------------------------------------------------- GroupAggregate Group Key: date1.d_year, part.p_brand1 -> Sort Sort Key: date1.d_year, part.p_brand1 -> Custom Scan (GpuPreAgg) Reduction: Local GPU Projection: pgstrom.psum((lo_revenue)::double precision), d_year, p_brand1 Combined GpuJoin: enabled -> Custom Scan (GpuJoin) on lineorder GPU Projection: date1.d_year, part.p_brand1, lineorder.lo_revenue Outer Scan: lineorder Depth 1: GpuHashJoin (nrows 2406009600...97764190) HashKeys: lineorder.lo_partkey JoinQuals: (lineorder.lo_partkey = part.p_partkey) KDS-Hash (size: 10.67MB) Depth 2: GpuHashJoin (nrows 97764190...18544060) HashKeys: lineorder.lo_suppkey JoinQuals: (lineorder.lo_suppkey = supplier.s_suppkey) KDS-Hash (size: 131.59MB) Depth 3: GpuHashJoin (nrows 18544060...18544060) HashKeys: lineorder.lo_orderdate JoinQuals: (lineorder.lo_orderdate = date1.d_datekey) KDS-Hash (size: 461.89KB) NVMe-Strom: enabled -> Custom Scan (GpuScan) on part GPU Projection: p_brand1, p_partkey GPU Filter: (p_category = 'MFGR#12'::bpchar) -> Custom Scan (GpuScan) on supplier GPU Projection: s_suppkey GPU Filter: (s_region = 'AMERICA'::bpchar) -> Seq Scan on date1 (31 rows) Attension for visibility map Right now, GPU routines of PG-Strom cannot run MVCC visibility checks per row, because only host code has a special data structure for visibility checks. It also leads a problem. We cannot know which row is visible, or invisible at the time when PG-Strom requires P2P DMA for NVMe-SSD, because contents of the storage blocks are not yet loaded to CPU/RAM, and MVCC related attributes are written with individual records. PostgreSQL had similar problem when it supports IndexOnlyScan. To address the problem, PostgreSQL has an infrastructure of visibility map which is a bunch of flags to indicate whether any records in a particular data block are visible from all the transactions. If associated bit is set, we can know the associated block has no invisible records without reading the block itself. SSD-to-GPU Direct SQL Execution utilizes this infrastructure. It checks the visibility map first, then only \"all-visible\" blocks are required to read with SSD-to-GPU P2P DMA. VACUUM constructs visibility map, so you can enforce PostgreSQL to construct visibility map by explicit launch of VACUUM command. VACUUM ANALYZE linerorder;","title":"GPUDirect SQL"},{"location":"ssd2gpu/#gpu-direct-sql-execution","text":"","title":"GPU Direct SQL Execution"},{"location":"ssd2gpu/#overview","text":"For the fast execution of SQL workloads, it needs to provide processors rapid data stream from storage or memory, in addition to processor's execution efficiency. Processor will run idle if data stream would not be delivered. GPUDirect SQL Execution directly connects NVMe-SSD which enables high-speed I/O processing by direct attach to the PCIe bus and GPU device that is also attached on the same PCIe bus, and runs SQL workloads very high speed by supplying data stream close to the wired speed of the hardware. Usually, PostgreSQL data blocks on the storage shall be once loaded to CPU/RAM through the PCIe bus, then, PostgreSQL runs WHERE-clause for filtering or JOIN/GROUP BY according to the query execution plan. Due to the characteristics of analytic workloads, the amount of result data set is much smaller than the source data set. For example, it is not rare case to read billions rows but output just hundreds rows after the aggregation operations with GROUP BY. In the other words, we consume bandwidth of the PCIe bus to move junk data, however, we cannot determine whether rows are necessary or not prior to the evaluation by SQL workloads on CPU. So, it is not avoidable restriction in usual implementation. GPU Direct SQL Execution changes the flow to read blocks from the storage sequentially. It directly loads data blocks to GPU using peer-to-peer DMA over PCIe bus, then runs SQL workloads on GPU device to reduce number of rows to be processed by CPU. In other words, it utilizes GPU as a pre-processor of SQL which locates in the middle of the storage and CPU/RAM for reduction of CPU's load, then tries to accelerate I/O processing in the results. This feature internally uses either of NVIDIA GPUDirect Storage module or NVME-Strom module (if RHEL7/CentOS7), that is a Linux kernel module originally designed by HeteroDB, to coordinate P2P data transfer from NVME storage to GPU device memory. So, this feature requires either of the above Linux kernel modules, in addition to PG-Strom as an extension of PostgreSQL. Also note that this feature supports only NVME-SSD or NVME-oF remove devices. It does not support legacy storages like SAS or SATA-SSD. We have tested several NVMD-SSD models. You can refer 002: HW Validation List for your information.","title":"Overview"},{"location":"ssd2gpu/#system-setup","text":"","title":"System Setup"},{"location":"ssd2gpu/#driver-installation","text":"When PG-Strom is used on a RHEL7/CentOS7 platform, for existing PG-Strom systems in other words, GPUDirect SQL Execution requires NVME-Strom driver by HeteroDB. See the (\"Install\" -> \"heterodb-kmod Installation\")[../install/#heterodb-kmod] of this manual for more details. Note GPUDirect SQL by NVME-Strom driver supports only local NVME-SSD drives. We experimentally provide a driver for NVME-oF devices, but don't recommend to use in commercial systems. For usage of PG-Strom on the platform other than RHEL7/CentOS7, for newly installed PG-Strom systems in other words, GPUDirect SQL Execution requires NVIDIA GPUDirect Storage. It also requires to install the MOFED(Mellanox Open Fabrics Enterprise Distribution) driver with support of GPUDirect Storage, in addition to the GPUDirect Storage module itself. See the (\u300c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u300d\u21d2\u300cNVIDIA GPUDirect Storage\u300d)[../install/#nvidia-gpudirect-storage] of this manual for more details.","title":"Driver Installation"},{"location":"ssd2gpu/#designing-tablespace","text":"GPU Direct SQL Execution shall be invoked in the following case. The target table to be scanned locates on the partition being consist of NVMe-SSD. /dev/nvmeXXXX block device, or md-raid0 volume which consists of NVMe-SSDs only. The target table size is larger than pg_strom.nvme_strom_threshold . You can adjust this configuration. Its default is physical RAM size of the system plus 1/3 of shared_buffers configuration. Note Striped read from multiple NVMe-SSD using md-raid0 requires the enterprise subscription provided by HeteroDB,Inc. In order to deploy the tables on the partition consists of NVMe-SSD, you can use the tablespace function of PostgreSQL to specify particular tables or databases to place them on NVMe-SSD volume, in addition to construction of the entire database cluster on the NVMe-SSD volume. For example, you can create a new tablespace below, if NVMe-SSD is mounted at /opt/nvme . CREATE TABLESPACE my_nvme LOCATION '/opt/nvme'; In order to create a new table on the tablespace, specify the TABLESPACE option at the CREATE TABLE command below. CREATE TABLE my_table (...) TABLESPACE my_nvme; Or, use ALTER DATABASE command as follows, to change the default tablespace of the database. Note that tablespace of the existing tables are not changed in thie case. ALTER DATABASE my_database SET TABLESPACE my_nvme;","title":"Designing Tablespace"},{"location":"ssd2gpu/#operations","text":"","title":"Operations"},{"location":"ssd2gpu/#distance-between-gpu-and-nvme-ssd","text":"On selection of server hardware and installation of GPU and NVME-SSD, hardware configuration needs to pay attention to the distance between devices, to pull out maximum performance of the device. NVIDIA GPUDirect RDMA , basis of the SSD-to-GPU Direct SQL mechanism, requires both of the edge devices of P2P DMA are connected on the same PCIe root complex. In the other words, unable to configure the P2P DMA traverses QPI between CPUs when NVME-SSD is attached on CPU1 and GPU is attached on CPU2 at dual socket system. From standpoint of the performance, it is recommended to use dedicated PCIe-switch to connect both of the devices more than the PCIe controller built in CPU. The photo below is a motherboard of HPC server. It has 8 of PCIe x16 slots, and each pair is linked to the other over the PCIe switch. The slots in the left-side of the photo are connected to CPU1, and right-side are connected to CPU2. When a table on SSD-2 is scanned using SSD-to-GPU Direct SQL, the optimal GPU choice is GPU-2, and it may be able to use GPU1. However, we have to avoid to choose GPU-3 and GPU-4 due to the restriction of GPUDirect RDMA. PG-Strom calculate logical distances on any pairs of GPU and NVME-SSD using PCIe bus topology information of the system on startup time. It is displayed at the start up log. Each NVME-SSD determines the preferable GPU based on the distance, for example, GPU1 shall be used on scan of the /dev/nvme2 . $ pg_ctl restart : LOG: GPU<->SSD Distance Matrix LOG: GPU0 GPU1 GPU2 LOG: nvme0 ( 3) 7 7 LOG: nvme5 7 7 ( 3) LOG: nvme4 7 7 ( 3) LOG: nvme2 7 ( 3) 7 LOG: nvme1 ( 3) 7 7 LOG: nvme3 7 ( 3) 7 : Usually automatic configuration works well. In case when NVME-over-Fabric(RDMA) is used, unable to identify the location of nvme device on the PCIe-bus, so you need to configure the logical distance between NVME-SSD and GPU manually. The example below shows the configuration of gpu2 for nvme1 , and gpu1 for nvme2 and nvme3 . It shall be added to postgresql.conf . Please note than manual configuration takes priority than the automatic configuration. pg_strom.nvme_distance_map = nvme1:gpu2, nvme2:gpu1, nvme3:gpu1","title":"Distance between GPU and NVME-SSD"},{"location":"ssd2gpu/#controls-using-guc-parameters","text":"There are two GPU parameters related to GPU Direct SQL Execution. The first is pg_strom.nvme_strom_enabled that simply turn on/off the function of SSD-to-GPU Direct SQL Execution. If off , SSD-to-GPU Direct SQL Execution should not be used regardless of the table size or physical location. Default is on . The other one is pg_strom.nvme_strom_threshold which specifies the least table size to invoke SSD-to-GPU Direct SQL Execution. PG-Strom will choose SSD-to-GPU Direct SQL Execution when target table is located on NVMe-SSD volume (or md-raid0 volume which consists of NVMe-SSD only), and the table size is larger than this parameter. Its default is sum of the physical memory size and 1/3 of the shared_buffers . It means default configuration invokes SSD-to-GPU Direct SQL Execution only for the tables where we certainly cannot process them on memory. Even if SSD-to-GPU Direct SQL Execution has advantages on a single table scan workload, usage of disk cache may work better on the second or later trial for the tables which are available to load onto the main memory. On course, this assumption is not always right depending on the workload charasteristics.","title":"Controls using GUC parameters"},{"location":"ssd2gpu/#ensure-usage-of-ssd-to-gpu-direct-sql-execution","text":"EXPLAIN command allows to ensure whether SSD-to-GPU Direct SQL Execution shall be used in the target query, or not. In the example below, a scan on the lineorder table by Custom Scan (GpuJoin) shows NVMe-Strom: enabled . In this case, SSD-to-GPU Direct SQL Execution shall be used to read from the lineorder table. # explain (costs off) select sum(lo_revenue), d_year, p_brand1 from lineorder, date1, part, supplier where lo_orderdate = d_datekey and lo_partkey = p_partkey and lo_suppkey = s_suppkey and p_category = 'MFGR#12' and s_region = 'AMERICA' group by d_year, p_brand1 order by d_year, p_brand1; QUERY PLAN ---------------------------------------------------------------------------------------------- GroupAggregate Group Key: date1.d_year, part.p_brand1 -> Sort Sort Key: date1.d_year, part.p_brand1 -> Custom Scan (GpuPreAgg) Reduction: Local GPU Projection: pgstrom.psum((lo_revenue)::double precision), d_year, p_brand1 Combined GpuJoin: enabled -> Custom Scan (GpuJoin) on lineorder GPU Projection: date1.d_year, part.p_brand1, lineorder.lo_revenue Outer Scan: lineorder Depth 1: GpuHashJoin (nrows 2406009600...97764190) HashKeys: lineorder.lo_partkey JoinQuals: (lineorder.lo_partkey = part.p_partkey) KDS-Hash (size: 10.67MB) Depth 2: GpuHashJoin (nrows 97764190...18544060) HashKeys: lineorder.lo_suppkey JoinQuals: (lineorder.lo_suppkey = supplier.s_suppkey) KDS-Hash (size: 131.59MB) Depth 3: GpuHashJoin (nrows 18544060...18544060) HashKeys: lineorder.lo_orderdate JoinQuals: (lineorder.lo_orderdate = date1.d_datekey) KDS-Hash (size: 461.89KB) NVMe-Strom: enabled -> Custom Scan (GpuScan) on part GPU Projection: p_brand1, p_partkey GPU Filter: (p_category = 'MFGR#12'::bpchar) -> Custom Scan (GpuScan) on supplier GPU Projection: s_suppkey GPU Filter: (s_region = 'AMERICA'::bpchar) -> Seq Scan on date1 (31 rows)","title":"Ensure usage of SSD-to-GPU Direct SQL Execution"},{"location":"ssd2gpu/#attension-for-visibility-map","text":"Right now, GPU routines of PG-Strom cannot run MVCC visibility checks per row, because only host code has a special data structure for visibility checks. It also leads a problem. We cannot know which row is visible, or invisible at the time when PG-Strom requires P2P DMA for NVMe-SSD, because contents of the storage blocks are not yet loaded to CPU/RAM, and MVCC related attributes are written with individual records. PostgreSQL had similar problem when it supports IndexOnlyScan. To address the problem, PostgreSQL has an infrastructure of visibility map which is a bunch of flags to indicate whether any records in a particular data block are visible from all the transactions. If associated bit is set, we can know the associated block has no invisible records without reading the block itself. SSD-to-GPU Direct SQL Execution utilizes this infrastructure. It checks the visibility map first, then only \"all-visible\" blocks are required to read with SSD-to-GPU P2P DMA. VACUUM constructs visibility map, so you can enforce PostgreSQL to construct visibility map by explicit launch of VACUUM command. VACUUM ANALYZE linerorder;","title":"Attension for visibility map"},{"location":"troubles/","text":"Trouble Shooting Identify the problem In case when a particular workloads produce problems, it is the first step to identify which stuff may cause the problem. Unfortunately, much smaller number of developer supports the PG-Strom development community than PostgreSQL developer's community, thus, due to the standpoint of software quality and history, it is a reasonable estimation to suspect PG-Strom first. The pg_strom.enabled parameter allows to turn on/off all the functionality of PG-Strom at once. The configuration below disables PG-Strom, thus identically performs with the standard PostgreSQL. # SET pg_strom.enabled = off; In addition, we provide parameters to disable particular execution plan like GpuScan, GpuJoin and GpuPreAgg. See references/GUC Parameters for more details. Collecting crash dump Crash dump is very helpful for analysis of serious problems which lead system crash for example. This session introduces the way to collect crash dump of the PostgreSQL and PG-Strom process (CPU side) and PG-Strom's GPU kernel, and show the back trace on the serious problems. Add configuration on PostgreSQL startup For generation of crash dump (CPU-side) on process crash, you need to change the resource limitation of the operating system for size of core file PostgreSQL server process can generate. For generation of crash dump (GPU-size) on errors of GPU kernel, PostgreSQL server process has CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable, and its value has 1 . You can put a configuration file at /etc/systemd/system/postgresql-<version>.service.d/ when PostgreSQL is kicked by systemd. In case of RPM installation, a configuration file pg_strom.conf is also installed on the directory, and contains the following initial configuration. [Service] LimitNOFILE=65536 LimitCORE=infinity #Environment=CUDA_ENABLE_COREDUMP_ON_EXCEPTION=1 In CUDA 9.1, it usually takes more than several minutes to generate crash dump of GPU kernel, and it entirely stops response of the PostgreSQL session which causes an error. So, we recommend to set CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable only if you investigate errors of GPU kernels which happen on a certain query. The default configuration on RPM installation comments out the line of CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable. PostgreSQL server process should have unlimited Max core file size configuration, after the next restart. You can check it as follows. # cat /proc/<PID of postmaster>/limits Limit Soft Limit Hard Limit Units : : : : Max core file size unlimited unlimited bytes : : : : Installation of debuginfo package # yum install postgresql10-debuginfo pg_strom-PG10-debuginfo : ================================================================================ Package Arch Version Repository Size ================================================================================ Installing: pg_strom-PG10-debuginfo x86_64 1.9-180301.el7 heterodb-debuginfo 766 k postgresql10-debuginfo x86_64 10.3-1PGDG.rhel7 pgdg10 9.7 M Transaction Summary ================================================================================ Install 2 Packages : Installed: pg_strom-PG10-debuginfo.x86_64 0:1.9-180301.el7 postgresql10-debuginfo.x86_64 0:10.3-1PGDG.rhel7 Complete! Checking the back-trace on CPU side The kernel parameter kernel.core_pattern and kernel.core_uses_pid determine the path where crash dump is written out. It is usually created on the current working directory of the process, check /var/lib/pgdata where the database cluster is deployed, if you start PostgreSQL server using systemd. Once core.<PID> file gets generated, you can check its back-trace to reach system crash using gdb . gdb speficies the core file by -c option, and the crashed program by -f option. # gdb -c /var/lib/pgdata/core.134680 -f /usr/pgsql-10/bin/postgres GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7_4.1 : (gdb) bt #0 0x00007fb942af3903 in __epoll_wait_nocancel () from /lib64/libc.so.6 #1 0x00000000006f71ae in WaitEventSetWaitBlock (nevents=1, occurred_events=0x7ffee51e1d70, cur_timeout=-1, set=0x2833298) at latch.c:1048 #2 WaitEventSetWait (set=0x2833298, timeout=timeout@entry-1, occurred_events=occurred_events@entry0x7ffee51e1d70, nevents=nevents@entry1, wait_event_info=wait_event_info@entry100663296) at latch.c:1000 #3 0x00000000006210fb in secure_read (port=0x2876120, ptr=0xcaa7e0 <PqRecvBuffer>, len=8192) at be-secure.c:166 #4 0x000000000062b6e8 in pq_recvbuf () at pqcomm.c:963 #5 0x000000000062c345 in pq_getbyte () at pqcomm.c:1006 #6 0x0000000000718682 in SocketBackend (inBuf=0x7ffee51e1ef0) at postgres.c:328 #7 ReadCommand (inBuf=0x7ffee51e1ef0) at postgres.c:501 #8 PostgresMain (argc=<optimized out>, argv=argv@entry0x287bb68, dbname=0x28333f8 \"postgres\", username=<optimized out>) at postgres.c:4030 #9 0x000000000047adbc in BackendRun (port=0x2876120) at postmaster.c:4405 #10 BackendStartup (port=0x2876120) at postmaster.c:4077 #11 ServerLoop () at postmaster.c:1755 #12 0x00000000006afb7f in PostmasterMain (argc=argc@entry3, argv=argv@entry0x2831280) at postmaster.c:1363 #13 0x000000000047bbef in main (argc=3, argv=0x2831280) at main.c:228 bt command of gdb displays the backtrace. In this case, I sent SIGSEGV signal to the PostgreSQL backend which is waiting for queries from the client for intentional crash, the process got crashed at __epoll_wait_nocancel invoked by WaitEventSetWait . Checking the backtrace on GPU Crash dump of GPU kernel is generated on the current working directory of PostgreSQL server process, unless you don't specify the path using CUDA_COREDUMP_FILE environment variable explicitly. Check /var/lib/pgdata where the database cluster is deployed, if systemd started PostgreSQL. Dump file will have the following naming convension. core_<timestamp>_<hostname>_<PID>.nvcudmp Note that the dump-file of GPU kernel contains no debug information like symbol information in the default configuration. It is nearly impossible to investigate the problem, so enable inclusion of debug information for the GPU programs generated by PG-Strom, as follows. Also note than we don't recommend to turn on the configuration for daily usage, because it makes query execution performan slow down. Turn on only when you investigate the troubles. nvme=# set pg_strom.debug_jit_compile_options = on; SET You can check crash dump of the GPU kernel using cuda-gdb command. # /usr/local/cuda/bin/cuda-gdb NVIDIA (R) CUDA Debugger 9.1 release Portions Copyright (C) 2007-2017 NVIDIA Corporation : For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\". (cuda-gdb) Run cuda-gdb command, then load the crash dump file above using target command on the prompt. (cuda-gdb) target cudacore /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp Opening GPU coredump: /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp [New Thread 216240] CUDA Exception: Warp Illegal Address The exception was triggered at PC 0x7ff4dc82f930 (cuda_gpujoin.h:1159) [Current focus set to CUDA kernel 0, grid 1, block (0,0,0), thread (0,0,0), device 0, sm 0, warp 0, lane 0] #0 0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48, matched=0x7ff4f7fffc7c \"\") at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159 1159 while (khitem && khitem->hash != hash_value) You can check backtrace where the error happened on GPU kernel using bt command. (cuda-gdb) bt #0 0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48, matched=0x7ff4f7fffc7c \"\") at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159 #1 0x00007ff4dc9428f0 in gpujoin_main<<<(30,1,1),(256,1,1)>>> (kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, kds_dst=0x7fe9e8800030, kparams_gpreagg=0x0) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1347 Please check CUDA Toolkit Documentation - CUDA-GDB for more detailed usage of cuda-gdb command.","title":"Trouble Shooting"},{"location":"troubles/#trouble-shooting","text":"","title":"Trouble Shooting"},{"location":"troubles/#identify-the-problem","text":"In case when a particular workloads produce problems, it is the first step to identify which stuff may cause the problem. Unfortunately, much smaller number of developer supports the PG-Strom development community than PostgreSQL developer's community, thus, due to the standpoint of software quality and history, it is a reasonable estimation to suspect PG-Strom first. The pg_strom.enabled parameter allows to turn on/off all the functionality of PG-Strom at once. The configuration below disables PG-Strom, thus identically performs with the standard PostgreSQL. # SET pg_strom.enabled = off; In addition, we provide parameters to disable particular execution plan like GpuScan, GpuJoin and GpuPreAgg. See references/GUC Parameters for more details.","title":"Identify the problem"},{"location":"troubles/#collecting-crash-dump","text":"Crash dump is very helpful for analysis of serious problems which lead system crash for example. This session introduces the way to collect crash dump of the PostgreSQL and PG-Strom process (CPU side) and PG-Strom's GPU kernel, and show the back trace on the serious problems.","title":"Collecting crash dump"},{"location":"troubles/#add-configuration-on-postgresql-startup","text":"For generation of crash dump (CPU-side) on process crash, you need to change the resource limitation of the operating system for size of core file PostgreSQL server process can generate. For generation of crash dump (GPU-size) on errors of GPU kernel, PostgreSQL server process has CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable, and its value has 1 . You can put a configuration file at /etc/systemd/system/postgresql-<version>.service.d/ when PostgreSQL is kicked by systemd. In case of RPM installation, a configuration file pg_strom.conf is also installed on the directory, and contains the following initial configuration. [Service] LimitNOFILE=65536 LimitCORE=infinity #Environment=CUDA_ENABLE_COREDUMP_ON_EXCEPTION=1 In CUDA 9.1, it usually takes more than several minutes to generate crash dump of GPU kernel, and it entirely stops response of the PostgreSQL session which causes an error. So, we recommend to set CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable only if you investigate errors of GPU kernels which happen on a certain query. The default configuration on RPM installation comments out the line of CUDA_ENABLE_COREDUMP_ON_EXCEPTION environment variable. PostgreSQL server process should have unlimited Max core file size configuration, after the next restart. You can check it as follows. # cat /proc/<PID of postmaster>/limits Limit Soft Limit Hard Limit Units : : : : Max core file size unlimited unlimited bytes : : : :","title":"Add configuration on PostgreSQL startup"},{"location":"troubles/#installation-of-debuginfo-package","text":"# yum install postgresql10-debuginfo pg_strom-PG10-debuginfo : ================================================================================ Package Arch Version Repository Size ================================================================================ Installing: pg_strom-PG10-debuginfo x86_64 1.9-180301.el7 heterodb-debuginfo 766 k postgresql10-debuginfo x86_64 10.3-1PGDG.rhel7 pgdg10 9.7 M Transaction Summary ================================================================================ Install 2 Packages : Installed: pg_strom-PG10-debuginfo.x86_64 0:1.9-180301.el7 postgresql10-debuginfo.x86_64 0:10.3-1PGDG.rhel7 Complete!","title":"Installation of debuginfo package"},{"location":"troubles/#checking-the-back-trace-on-cpu-side","text":"The kernel parameter kernel.core_pattern and kernel.core_uses_pid determine the path where crash dump is written out. It is usually created on the current working directory of the process, check /var/lib/pgdata where the database cluster is deployed, if you start PostgreSQL server using systemd. Once core.<PID> file gets generated, you can check its back-trace to reach system crash using gdb . gdb speficies the core file by -c option, and the crashed program by -f option. # gdb -c /var/lib/pgdata/core.134680 -f /usr/pgsql-10/bin/postgres GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7_4.1 : (gdb) bt #0 0x00007fb942af3903 in __epoll_wait_nocancel () from /lib64/libc.so.6 #1 0x00000000006f71ae in WaitEventSetWaitBlock (nevents=1, occurred_events=0x7ffee51e1d70, cur_timeout=-1, set=0x2833298) at latch.c:1048 #2 WaitEventSetWait (set=0x2833298, timeout=timeout@entry-1, occurred_events=occurred_events@entry0x7ffee51e1d70, nevents=nevents@entry1, wait_event_info=wait_event_info@entry100663296) at latch.c:1000 #3 0x00000000006210fb in secure_read (port=0x2876120, ptr=0xcaa7e0 <PqRecvBuffer>, len=8192) at be-secure.c:166 #4 0x000000000062b6e8 in pq_recvbuf () at pqcomm.c:963 #5 0x000000000062c345 in pq_getbyte () at pqcomm.c:1006 #6 0x0000000000718682 in SocketBackend (inBuf=0x7ffee51e1ef0) at postgres.c:328 #7 ReadCommand (inBuf=0x7ffee51e1ef0) at postgres.c:501 #8 PostgresMain (argc=<optimized out>, argv=argv@entry0x287bb68, dbname=0x28333f8 \"postgres\", username=<optimized out>) at postgres.c:4030 #9 0x000000000047adbc in BackendRun (port=0x2876120) at postmaster.c:4405 #10 BackendStartup (port=0x2876120) at postmaster.c:4077 #11 ServerLoop () at postmaster.c:1755 #12 0x00000000006afb7f in PostmasterMain (argc=argc@entry3, argv=argv@entry0x2831280) at postmaster.c:1363 #13 0x000000000047bbef in main (argc=3, argv=0x2831280) at main.c:228 bt command of gdb displays the backtrace. In this case, I sent SIGSEGV signal to the PostgreSQL backend which is waiting for queries from the client for intentional crash, the process got crashed at __epoll_wait_nocancel invoked by WaitEventSetWait .","title":"Checking the back-trace on CPU side"},{"location":"troubles/#checking-the-backtrace-on-gpu","text":"Crash dump of GPU kernel is generated on the current working directory of PostgreSQL server process, unless you don't specify the path using CUDA_COREDUMP_FILE environment variable explicitly. Check /var/lib/pgdata where the database cluster is deployed, if systemd started PostgreSQL. Dump file will have the following naming convension. core_<timestamp>_<hostname>_<PID>.nvcudmp Note that the dump-file of GPU kernel contains no debug information like symbol information in the default configuration. It is nearly impossible to investigate the problem, so enable inclusion of debug information for the GPU programs generated by PG-Strom, as follows. Also note than we don't recommend to turn on the configuration for daily usage, because it makes query execution performan slow down. Turn on only when you investigate the troubles. nvme=# set pg_strom.debug_jit_compile_options = on; SET You can check crash dump of the GPU kernel using cuda-gdb command. # /usr/local/cuda/bin/cuda-gdb NVIDIA (R) CUDA Debugger 9.1 release Portions Copyright (C) 2007-2017 NVIDIA Corporation : For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\". (cuda-gdb) Run cuda-gdb command, then load the crash dump file above using target command on the prompt. (cuda-gdb) target cudacore /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp Opening GPU coredump: /var/lib/pgdata/core_1521131828_magro.heterodb.com_216238.nvcudmp [New Thread 216240] CUDA Exception: Warp Illegal Address The exception was triggered at PC 0x7ff4dc82f930 (cuda_gpujoin.h:1159) [Current focus set to CUDA kernel 0, grid 1, block (0,0,0), thread (0,0,0), device 0, sm 0, warp 0, lane 0] #0 0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48, matched=0x7ff4f7fffc7c \"\") at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159 1159 while (khitem && khitem->hash != hash_value) You can check backtrace where the error happened on GPU kernel using bt command. (cuda-gdb) bt #0 0x00007ff4dc82f938 in _INTERNAL_8_pg_strom_0124cb94::gpujoin_exec_hashjoin (kcxt=0x7ff4f7fffbf8, kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, depth=3, rd_stack=0x7fe9f4806118, wr_stack=0x7fe9f480c118, l_state=0x7ff4f7fffc48, matched=0x7ff4f7fffc7c \"\") at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1159 #1 0x00007ff4dc9428f0 in gpujoin_main<<<(30,1,1),(256,1,1)>>> (kgjoin=0x7fe9f4800078, kmrels=0x7fe9f8800000, kds_src=0x7fe9f0800030, kds_dst=0x7fe9e8800030, kparams_gpreagg=0x0) at /usr/pgsql-10/share/extension/cuda_gpujoin.h:1347 Please check CUDA Toolkit Documentation - CUDA-GDB for more detailed usage of cuda-gdb command.","title":"Checking the backtrace on GPU"}]}